Здесь описаны некоторые соглашения, которых следует придерживаться тем,
кто желает приложить свои усилия к проекту.


	Файлы спецификации RPM.

Наши соглашения для спецификаций RPM очень похожи на принятые в Red
Hat, за исключением нескольких отличий и дополнительных требований для
пакетов Owl.

1. Файл спецификации должен начинаться с комментария, содержащего
ключевое слово CVS Id, а после этого комментария должна быть пустая
строка.

2. Набор параметров и их порядок: Summary, Name, Version, Release,
Epoch, License, Group, URL, Source*, Patch*, PreReq, Requires,
Conflicts, Provides, Obsoletes, Auto*, Prefix, BuildRequires,
BuildArchitectures, ExcludeArch, ExclusiveArch, BuildRoot. Другие
параметры мы не используем.

3. Номера релизов пакетов Owl имеют вид:

	owlREVISION

или, если пакет содержит альфа-/бета-/пререлиз- версию какого-то
программного обеспечения и параметр Version содержит будущий номер версии:

	owl0.REVISION

или, при обновлении более старой ветки Owl:

	BRANCH_POINT_RELEASE.BRANCH.REVISION

где:
 REVISION - номер ревизии пакета внутри Owl, увеличивающийся при
 каждом обновлении
 BRANCH_POINT_RELEASE - строка, описывающая релиз, из которого "растет"
 данная ветка
 BRANCH - версия ветки (например, "0.1" в "Owl 0.1-stable")

При обновлении до новой версии REVISION сбрасывается до 1 и, в случае
старой ветки, BRANCH_POINT_RELEASE устанавливается в "owl0".

4. Тег BuildRoot для пакета Owl выглядит так:

	BuildRoot: /override/%name-%version

Наша система сборки определяет BuildRoot независимо от этого параметра,
но такое значение помогает напомнить пользователям о необходимости явно
указать значение BuildRoot при сборке пакета вручную - особенно при
использовании другой системы, нежели Owl.

5. Разделяйте названия параметров и их значения одним пробелом.
Используйте запятые с последующим пробелом для разделения элементов
списков зависимости. Завершайте строки Summary точкой. В описаниях
Summary и %description (равно как и в другой документации) избегайте
писать названия команд с заглавной буквы, даже если это первое слово в
предложении - если только такое написание не является официальным
наименованием программы. Разделяйте предложения двумя пробелами.

6. Наша система сборки выставляет флаги оптимизации для компилятора
C/C++ в %optflags оптимальным образом для сборки отдельных программ с
выдачей не слишком большого числа предупреждений для типовых исходных
текстов. При сборке библиотечных модулей можно использовать другой набор
флагов, для чего следует добавить непосредственно перед разделом %build
следующие 2 строчки:

	# Use optflags_lib for this package if defined.
	%{expand:%%define optflags %{?optflags_lib:%optflags_lib}%{!?optflags_lib:%optflags}}

Это отключит оптимизацию, способную помешать отладке программ,
собранных с использованием этих библиотек (даже если сами программы
корректно собраны с возможностью отладки) и, на x86, обеспечит
выравнивание стека для эффективных операций с плавающей точкой и MMX,
которые может использовать программа. (Последняя возможность нужна, по
большей мере, для сторонних программ. В программах, входящих в комплект
Owl нет столь значительного объема расчетов, и поэтому мы собираем их
без подобного выравнивания стека. К библиотекам же предъявляются иные
требования.)

Также рекомендуется писать исходные тексты программ достаточно
аккуратно, чтобы они не вызывали ни единого предупреждения при сборке
посредством "gcc -Wall". Если вы так и делаете, то хорошим тоном будет
передавать компилятору параметр -Wall посредством добавления
непосредственно перед разделом %build следующей строки:

	%{expand:%%define optflags %optflags -Wall}

7. Следует всеми силами избегать использовать subshells в скриптах
сборки, установки/удаления и trigger, так как они скрывают возможные
ошибки. Если вы хотите временно сменить текущий каталог, лучше
воспользуйтесь командами pushd и popd. Если же вам действительно
необходимо использовать subshell, то предполагается, что вы передаете
статус выполняемой команды процессу-предку самостоятельно.

8. Используйте символ табуляции в отступах для выделения условных блоков
и продолжений длинных строк в скриптах. Для "блоков" pushd ... popd
отступы не нужны.

9. Используйте -eq для сравнения числовых значений (аргумент $1,
который RPM передает скриптам; не помещайте $1 в кавычки).

10. Используйте макрос %buildroot вместо $RPM_BUILD_ROOT, а макрос
%_sourcedir вместо $RPM_SOURCE_DIR. Для ссылки на определенный файл
используйте %_sourcedir/WHATEVERFILE

11. Используйте соответствующие макросы RPM для запуска утилит сборки,
параметры запуска которых может потребоваться переопределить - например, 
используйте %__make вместо просто make, %__cc вместо gcc, итд. Тем не
менее, не следует использовать макросы для основных команд shell -
таких, как cp, mv, rm.

12. Не используйте в командах shell ключ "-f" ("force", "принудительно")
без особой необходимости. Если вы считаете, что необходимость есть -
не поленитесь написать комментарий, почему вы так считаете.

13. При написании дат в %changelog используйте две цифры для числа
месяца - если нужно, с ведущим нулем. При добавлении новых элементов
указывайте версию и номер релиза после своего адреса - например, так:

	* Wed Dec 01 2004 Your Name <you@example.com> 1.0-owl1

14. Для обеспечения переносимости spec-файлов в настоящее время сделано
так, чтобы в отличных от Owl системах они либо приводили к разумной
сборке пакетов, либо пакеты не собирались вообще. Некоторые spec-файлы
(те, что идут в archives/*.tar.gz при сборке Owl) предусматривают
возможность сборки не только под Owl. Разделы %clean должны
отсутствовать вообще) во всех spec-файлах независимо от их переносимости
- они не используются при сборке Owl, а в других системах оставление
"послесборочного мусора" заведомо безвредно.


	Имена patch-файлов.

Используйте следующий синтаксис для файлов исправлений:

	NAME-VERSION-ORIGIN-WHAT.diff

где NAME и VERSION означают название и версию пакета, ORIGIN есть
сокращенное название источника исправлений, а WHAT содержит краткое
описание собственно исправлений - для чего они предназначены или что
они делают.

Если один файл содержит исправления более чем из одного дистрибутива,
их следует перечислить в ORIGIN в порядке убывания важности. Для
исправлений, выпускаемых в рамках Owl, поле ORIGIN должно быть
установлено в "owl". Если файл исправлений изначально был взят из
другого дистрибутива, но при этом был переработан, поле ORIGIN
дополнительно должно содержать "-owl-" (чтобы пользователи знали, на
кого ругаться в случае ошибок). Если файл исправлений для пакета был
взят из репозитария CVS (например, в случае т.н. back-ports), поле
ORIGIN следует установить в "cvs", а поле WHAT наряду с обычным
описанием должно содержать дату в формате YYYYMMDD. Исправления от
основных разработчиков, которые (все еще?) не добавлены в базовый
репозитарий CVS, могут содержать "up" в поле ORIGIN.

Если WHAT состоит из нескольких слов, используйте символ "минус" в
качестве разделителя. Не используйте символы подчеркивания - за
исключением случаев, когда они содержатся, например, в имени функции
или переменной (в этой ситуации имя следует писать полностью, с
сохранением всех подчеркиваний и капитализации).

Также есть несколько типовых значений поля WHAT, которые следует
использовать в случаях, когда они применимы:

Makefile	- исправления только Makefile* (обратите внимание на то,
		  что только первая буква является заглавной)
bound		- проверки граничных условий (исправления переполнений
		  буферов и целочисленных переменных)
config		- исправления только конфигурационных файлов (как для
		  сборки, так и для работы)
doc		- исправления только документации
fixes		- кумулятивные обновления, касающиеся ошибок, надежности
		  или безопасности
format		- исправления строк формата у функций наподобие printf
		  (влияет не только на безопасность)
info		- исправления только документации в формате texinfo
install-no-root	- исправления для запуска "make install" и проведения
		  аналогичных операций не из-под root
linux		- исправления, необходимые для сборки под Linux (для
		  переносимого ПО)
man		- исправления только документации в формате man pages
tmp		- исправления, касающиеся работы с временными файлами
vitmp		- добавление поддержки vitmp(1)
warnings	- исправления, касающиеся предупреждений при сборке

Это, конечно же, НЕ ОБЯЗЫВАЕТ ВАС подгонять свои исправления под одну
из указанных категорий - это всего лишь рекомендация на случай, если,
например, у вас есть файл исправлений, попадающий под одну из категорий,
называть его соответствующим образом (например, "tmp", а не "mkstemp").


	Форматирование исходных текстов.

При разработке или переносе фрагментов кода на C для последующего
включения в Owl, можно использовать indent(1) с такими параметрами:

	indent -kr -i8 -nlp -nbbo -l79 -lc79

Это недостаточно точно соответствует нашему основному стилю оформления
кода, а посему не нужно использовать это для исходных текстов, уже
включенных в Owl.

$Id: Owl/doc/ru/CONVENTIONS,v 1.6 2005/05/11 19:22:14 gremlin Exp $
