Ce fichier explique quelques unes des conventions à suivre pour ceux qui
souhaitent contribuer au projet.


	Les fichiers spec RPM.

Nos conventions pour les fichiers spec RPM sont assez similaires à celles de
RedHat, mais quelques différences et besoins supplémentaires pour les
paquetages natifs Owl existent.

1. Commencez le fichier spec avec un commentaire contenant le mot clé CVS
Id, suivi par une ligne vide.

2. Les noms de tag préférés (chaque fois qu'un synonyme existe) et leur
ordre est : Summary, Name, Version, Release, Epoch, License, Group, URL,
Source*, Patch*, PreReq, Requires, Conflicts, Provides, Obsoletes, Auto*,
Prefix, BuildRequires, BuildArchitectures, ExcludeArch, ExclusiveArch,
BuildRoot (ndt : respectivement Résumé, Nom, Version, Numéro de sortie,
Époque, Licence, Groupe, URL, Source*, Patch*, Pré-Requis, Requière, Entre en
conflit, Fournit, Rend obsolète, Auto*, Préfixe, Requière à la compilation,
Architectures de compilation, Architectures exclues, Architectures
exclusives, Racine de compilation). Nous n'utilisons pas (actuellement) les
autres tags.

3. Le tag BuildRoot correct pour un paquetage Owl est :

	BuildRoot: /override/%{name}-%{version}

Notre environnement de compilation surchargera le tag BuildRoot sans tenir
compte de ce tag, mais le fixer de cette façon rappellera aux gens de
surcharger le tag BuildRoot pour les compilations manuelles du paquetage,
surtout en dehors de Owl.

4. Séparez les noms de tag et les valeurs que vous leur fixez avec un unique
caractère espace. Utilisez les virgules (également suivies par un espace)
pour séparer les articles dans les listes de dépendances. Terminez les
lignes Summary avec un point. Dans Summary et %description (comme dans tout
autre documentation), évitez de mettre une majuscule aux noms des commandes,
même si elles sont le premier mot d'une phrase, à moins que la forme avec
une majuscule soit le nom officiel pour le logiciel en question. Utilisez
deux espaces pour séparer les phrases.

5. Notre environnement de compilation fixe les drapeaux d'optimisation du
compilateur C/C++ dans %optflags d'une façon qui est optimale pour la
compilation de programmes standalone et qui ne produit pas trop
d'avertissements avec des fichiers sources typiques. En compilant des
bibliothèques, un autre ensemble de drapeaux d'optimisation peut être
utilisé en plaçant les deux lignes suivantes juste avant la section %build :

	# Use optflags_lib for this package if defined.
	%{expand:%%define optflags %{?optflags_lib:%optflags_lib}%{!?optflags_lib:%optflags}}

Ceci désactivera les optimisations qui empêcheraient le débogage des
programmes liés avec les bibliothèques (même quand les programmes eux-mêmes
sont correctement compilés pour le débogage) et, sur x86, garantira
l'alignement approprié dans la pile pour des opérations en nombres à
virgules flottantes et MMX efficaces qu'un programme lié à la bibliothèque
peut faire. (Ce dernier est juste pour être amical avec les programmes
tiers. Nous n'avons pas une quantité notable de mathématiques en virgules
flottantes dans les programmes qui font partie de Owl et ainsi nous ne
faisons pas d'alignement supplémentaire de la pile en compilant nos
programmes. Mais les bibliothèques ont besoin de différer à cause de
callback possibles.)

Il est recommandé également que vous fassiez que les fichiers sources soient
assez propres pour que le compilateur ne produire pas un seul avertissement
en compilant avec "gcc -Wall". Si vous le faites, alors la façon correcte de
passer -Wall est dans la plupart des cas en passant la ligne suivante juste
avant la section %build :

	%{expand:%%define optflags %optflags -Wall}

6. Les sous-shells dans la compilation, pre/post-
installation/désinstallation, et les trigger-scripts sont à éviter par tous
les moyens puisqu'ils masquent les erreurs possibles. Si vous avez
l'intention d'utiliser un sous-shell pour changer temporairement le
répertoire courant, utilisez plutôt les commandes pushd et popd. Si vous
devez réellement utiliser un sous-shell, il est suggéré que vous propagiez
manuellement le statut des commandes qu'il exécute au shell père.

7. Utilisez les tabulations pour indenter les blocs conditionnels et les
suites de lignes dans les scripts.

8. Utilisez -eq pour comparer les valeurs numériques (en particulier,
l'argument $1 que RPM lui-même passe aux scripts). Ne placez pas le $1 entre
guillemets.


	Nommage des fichiers patch.

Utilisez la syntaxe suivante pour les noms des fichiers patch.

	NOM-VERSION-ORIGINE-QUOI.diff

où NOM et VERSION sont les nom et version du paquetage, ORIGINE est une
abréviation du nom de la distribution (ou des noms des distributions) d'où
est originaire le patch, et QUOI est la description de ce pour quoi le patch
est fait ou ce qu'il fait.

Si un seul fichier patch est basé sur des pièces de plus d'une distribution,
toutes doivent être incluses dans ORIGINE par ordre de pertinence. Pour les
patches développés en tant que partie de Owl, ORIGINE doit être fixée à
"owl". Si un patch est dérivé d'une autre distribution mais avec des
changements significatifs appliqués, ORIGINE devrait inclure "-owl-"
également (ce qui devrait indiquer que tous les bogues sont les nôtres). Si
un patch a été extrait du dépôt CVS principal du paquetage en question (par
exemple, ceci peut être le cas pour divers rétro-portages), ORIGINE devrait
être fixée à "cvs" et QUOI à la date correspondante (comme AAAAMMJJ) plus la
description habituelle du patch.

Il y a également quelques QUOI communs à utiliser chaque fois que c'est en
vigueur :

bound		- vérification de limites (réparations de débordements de
		  tampon et/ou d'entier)
fixes		- accumulation de patches de bogue, de fiabilité, et/ou de
		  sécurité
format		- réparations de chaînes de formats de type printf (pas
		  seulement de sécurité)
install-no-root	- changements pour exécuter "make install" ou équivalent en
		  non-root
linux		- changements nécessaires pour compiler sur Linux (pour les
		  logiciels portés)
man		- patches seulement des manuels
tmp		- patches s'occupant de problèmes de manipulations de
		  fichiers temporaires

Ceci NE suggère PAS que vous devriez essayer d'arranger vos modifications
telles que les fichiers patch correspondent à une de ces catégories. En
fait, il est souvent préférable de faire les chose différemment. C'est juste
pour dire que s'il arrive d'avoir un fichier patch qui correspond à l'une
des catégories, nommez le en conséquence (tel que, "tmp" et non pas, disons,
"mkstemp").


	Formatage du code source C

En développant ou en important des bouts de code C pour maintenance
supplémentaire comme partie de Owl, indent(1) devrait être initialement
utilisé avec les options suivantes :

	indent -kr -i8 -nlp -nbbo -l79 -lc79

Ceci ne correspond pas exactement à notre style de codage préféré et ainsi
ne doit pas être utilisé sur les sources déjà dans Owl.

$Id: Owl/doc/fr/CONVENTIONS,v 1.1 2002/02/07 07:42:40 solar Exp $
