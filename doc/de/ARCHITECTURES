Im Folgenden eine Liste der von Owl unterstützten Architekturen, ihren
Versionen und verschiedenen architektur-spezifischen Details.


	Versionen verschiedener Architekturen.

Zum Beispiel sind i386 und i686 beides Versionen der x86 Architektur.
Es ist möglich (und in den meisten Fällen sogar zum empfehlen) Binär-
pakete von einer älteren Version der Architektur zu erstellen oder zu
verwenden.

Auf vielen Architekturen unterstützt Owl verschiedene Versionen.
Pakete, die für die neueste Version einer Architektur erstellt wurden,
erzielen normalerweise nur einen geringen Geschwindigkeitszuwachs
(zwischen einem und fünf Prozent bei normalen Aufgaben).  Der Preis dafür
jedoch ist: die Pakete können nicht auf eine ältere Maschine kopiert
und dort installiert werden.  Im schlechtesten Fall könnten nicht einmal
die Pakete (oder ausführbare Dateien) für die älteren Version erstellt
werden, da die Entwicklungs-Bibilotheken nur für die neueste Version
der Architektur erstellt worden sind.  Ok, die Pakete könnten eventuell
sogar erstellt werden, würden aber die neue Klasse der Architektur benötigen.

Es gibt zwei Lösungen für dieses Problem: Man könnte nur Pakete der
ältesten Version der Architektur verwenden oder man könnte die
Entwicklungs-Bibilotheken für die alte Architektur-Version installieren,
aber trotzdem Pakete benutzen, die für die aktuelle Hardware erstellt
worden sind.  Es ist klar, dass die erste Lösung praktischer ist, obwohl
sie nicht die bestmögliche Geschwindigkeit bietet.

Pakete, die für eine ältere Version der Architektur erstellt worden
sind, können zudem an aktuelle CPUs angepasst werden ohne die Zusätze
für die alte Version zu verlieren.  Das ist das System, wie die
Pakete in Owl erstellt werden.


	Einstellen der Architektur.

Die Architektur kann mittels der ARCHITECTURE= Zeile in der Datei
buildworld.conf eingestellt werden.  Diese Zeile ist optional und
standardmässig auskommentiert.  In diesem Fall wird die älteste
Architektur-Version des Rechners genommen.

Es ist nicht möglich Pakete für eine andere Architektur als die des
Rechners, auf dem alles kompiliert wird, zu erstellen.  Das Gleiche
gilt für eine neuere CPU-Version als die des Rechners.


	x86, auch bekannt als IA32.

Zwei Version sind standardmässig definert: i386 und i686.  Die für i386
erstellten Pakete laufen auch auf einem i686 und auf neueren CPUs.  Die
i386 Pakete als auch die für i686 sind für den i686 optimiert, allerdings
benutzen die i686 Pakete Instruktionen, die nur für diese neue
CPU-Version verfügbar sind.

Es ist empfehlenswert die i386 Pakete zu verwenden, da der Geschwindigkeits-
gewinn minimal ist (kleiner als 1%).


	SPARC.

Zwei Versionen der Architektur werden unterstützt: sparc und sparcv9.
Die sparc Version braucht mindestens eine SPARC V8 und die Pakete
sind für die UltraSPARC optimiert.  Die sparcv9 Pakete laufen momentan
nur auf einer Ultra oder höher.

Die Geschwindigkeitsgewinne mit sparcv9 sind minimal (zwischem einem
und zwei Prozent, ausser speziellen Funktionen in glibc und OpenSSL,
wo SPARC V9 optimierte Versionen bereit gestellt werden).

sparc64 wird im Moment noch nicht unterstützt (die glibc Version muss
zuerst geändert werden).  Es ist möglich die (32-Bit) Owl Benutzer-
software zu erstellen, obwohl man einen sparc64 Kernel benutzt.


	Alpha.

Zwei Architekturversionen sind standardmässig enthalten: alpha
und alphaev56.  Egal welche man nimmt, beide benutzen die BWX Er-
weiterungen und Instruktions-Scheduling.  Pakete, die für alpha
erstellt worden sind, sind für ältere EV4 Prozessoren (21064, 21066)
optimiert.  Die Pakete für alphaev56 sind für EV56/PCA56 Prozessoren
(21164A, 21164PC) optimiert.  Auf dem EV5 (21164) kann man auch die
alpha Pakete nutzen.  Auf einem EV6+ (21264, 21264A) sollten
die alphaev56 Pakete benutzt werden.

$Id: Owl/doc/de/ARCHITECTURES,v 1.5 2005/10/03 11:48:01 schmidt Exp $
