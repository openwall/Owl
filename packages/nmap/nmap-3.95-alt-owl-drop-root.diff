--- nmap-3.95/MACLookup.cc.orig 2006-01-11 22:50:04.000000000 +0000
+++ nmap-3.95/MACLookup.cc      2006-01-11 23:28:58.000000000 +0000
@@ -105,3 +105,4 @@
 #include "MACLookup.h"
 #include "nmap.h"
 #include "nmap_error.h"
+#include "droppriv.h"

 struct MAC_entry {
   int prefix; /* -1 means none set */
@@ -128,7 +129,7 @@
   return prefix % table_capacity;
 }

-static void mac_prefix_init() {
+void mac_prefix_init() {
   static int initialized = 0;
   if (initialized) return;
   initialized = 1;
--- nmap-3.95/Makefile.in.orig	2005-12-08 08:14:08.000000000 +0000
+++ nmap-3.95/Makefile.in	2006-01-09 23:43:59.000000000 +0000
@@ -46,11 +46,11 @@
 TARGETNMAPFE=@TARGETNMAPFE@
 INSTALLNMAPFE=@INSTALLNMAPFE@
 
-export SRCS = main.cc nmap.cc targets.cc tcpip.cc nmap_error.cc utils.cc idle_scan.cc osscan.cc output.cc scan_engine.cc timing.cc charpool.cc services.cc protocols.cc nmap_rpc.cc portlist.cc NmapOps.cc TargetGroup.cc Target.cc FingerPrintResults.cc service_scan.cc NmapOutputTable.cc MACLookup.cc @COMPAT_SRCS@
+export SRCS = main.cc nmap.cc targets.cc tcpip.cc nmap_error.cc utils.cc idle_scan.cc osscan.cc output.cc scan_engine.cc timing.cc charpool.cc services.cc protocols.cc nmap_rpc.cc portlist.cc droppriv.cc NmapOps.cc TargetGroup.cc Target.cc FingerPrintResults.cc service_scan.cc NmapOutputTable.cc MACLookup.cc @COMPAT_SRCS@
 
-OBJS = main.o nmap.o targets.o tcpip.o nmap_error.o utils.o idle_scan.o osscan.o output.o scan_engine.o timing.o charpool.o services.o protocols.o nmap_rpc.o portlist.o NmapOps.o TargetGroup.o Target.o FingerPrintResults.o service_scan.o NmapOutputTable.o MACLookup.o @COMPAT_OBJS@
+OBJS = main.o nmap.o targets.o tcpip.o nmap_error.o utils.o idle_scan.o osscan.o output.o scan_engine.o timing.o charpool.o services.o protocols.o nmap_rpc.o portlist.o droppriv.o NmapOps.o TargetGroup.o Target.o FingerPrintResults.o service_scan.o NmapOutputTable.o MACLookup.o @COMPAT_OBJS@
 
-export DEPS = nmap.h nmap_amigaos.h nmap_error.h targets.h idle_scan.h osscan.h output.h scan_engine.h timing.h tcpip.h utils.h global_structures.h charpool.h services.h protocols.h nmap_rpc.h portlist.h NmapOps.h TargetGroup.h Target.h FingerPrintResults.h service_scan.h NmapOutputTable.h MACLookup.h
+export DEPS = nmap.h nmap_amigaos.h nmap_error.h targets.h idle_scan.h osscan.h output.h scan_engine.h timing.h tcpip.h utils.h global_structures.h charpool.h services.h protocols.h nmap_rpc.h portlist.h droppriv.h NmapOps.h TargetGroup.h Target.h FingerPrintResults.h service_scan.h NmapOutputTable.h MACLookup.h
 
 
 # %.o : %.cc -- nope this is a GNU extension
--- nmap-3.95/configure.ac.orig	2005-12-06 21:16:14.000000000 +0000
+++ nmap-3.95/configure.ac	2006-01-09 23:41:57.000000000 +0000
@@ -652,6 +652,7 @@
         AC_DEFINE(HAVE_IP_IP_SUM)
 fi
 
+AC_CHECK_LIB(cap, cap_from_text)
 
 dnl Checks for library functions.
 dnl AC_TYPE_SIGNAL
--- nmap-3.95/droppriv.cc.orig	2006-01-11 22:50:25.000000000 +0000
+++ nmap-3.95/droppriv.cc	2006-01-11 23:26:39.000000000 +0000
@@ -0,0 +1,71 @@
+#include <stdlib.h>
+#include <errno.h>
+#include <unistd.h>
+#include <pwd.h>
+#include <grp.h>
+#include <sys/capability.h>
+#include <sys/prctl.h>
+
+#include "nmap.h"
+#include "droppriv.h"
+#include "NmapOps.h"
+
+#define NMAP_USER "nmap"
+#define NMAP_CHROOT_EMPTY "/var/empty"
+
+extern NmapOps o;  /* option structure */
+
+void
+drop_priv (void)
+{
+	const char *user = NMAP_USER;
+	const char *dir = NMAP_CHROOT_EMPTY;
+	struct passwd *pw;
+	cap_t   caps;
+
+	if (geteuid ())
+		return;
+
+	nmap_services_init ();
+	nmap_protocols_init ();
+	rpc_services_init ();
+	service_scan_init ();
+	routethrough_init ();
+	mac_prefix_init();
+
+	if (setgroups (0, 0) < 0)
+		fatal ("setgroups failed");
+
+	if (prctl (PR_SET_KEEPCAPS, 1))
+		fatal ("prctl (PR_SET_KEEPCAPS, 1) failed");
+
+	pw = getpwnam (user);
+	if (!pw)
+		fatal ("lookup of user \"%s\" failed", user);
+	endpwent ();
+
+	if (!pw->pw_uid)
+		fatal ("user \"%s\" shouldn't be root", user);
+
+	if (o.noresolve)
+	  if (dir && (chroot (dir) || chdir ("/")))
+	 	fatal ("chroot to \"%s\" failed", dir);
+
+	if (setgid (pw->pw_gid) < 0)
+		fatal ("setgid failed");
+
+	if (seteuid (pw->pw_uid) < 0)
+		fatal ("seteuid failed");
+
+	caps = cap_from_text ("cap_net_raw=ep");
+	if (!caps)
+		fatal ("cap_from_text failed");
+
+	if (cap_set_proc (caps) < 0)
+		fatal ("cap_set_proc failed");
+
+	cap_free (caps);
+
+	if (setreuid (pw->pw_uid, pw->pw_uid) < 0)
+		fatal ("setreuid failed");
+}
--- nmap-3.95/droppriv.h.orig	2006-01-11 22:50:25.000000000 +0000
+++ nmap-3.95/droppriv.h	2004-11-28 01:20:48.000000000 +0000
@@ -0,0 +1,15 @@
+#ifndef NMAP_DROPPRIV_H__
+#define NMAP_DROPPRIV_H__
+
+class AllProbes;
+
+extern void drop_priv(void);
+extern int nmap_services_init(void);
+extern int nmap_protocols_init(void);
+extern void rpc_services_init(void);
+extern AllProbes *service_scan_init(void);
+extern void routethrough_init(void);
+extern void mac_prefix_init(void);
+
+#endif /* NMAP_DROPPRIV_H__ */
+
--- nmap-3.95/nmap.cc.orig	2005-12-06 22:26:05.000000000 +0000
+++ nmap-3.95/nmap.cc	2006-01-09 23:41:57.000000000 +0000
@@ -105,6 +105,7 @@
 #include "scan_engine.h"
 #include "idle_scan.h"
 #include "timing.h"
+#include "droppriv.h"
 #include "NmapOps.h"
 #include "MACLookup.h"
 #ifdef WIN32
@@ -888,6 +889,8 @@
     }
   }
 
+  drop_priv();
+
   /* By now, we've got our port lists.  Give the user a warning if no 
    * ports are specified for the type of scan being requested.  Other things
    * (such as OS ident scan) might break cause no ports were specified,  but
--- nmap-3.95/nmap_rpc.cc.orig	2006-01-11 22:50:04.000000000 +0000
+++ nmap-3.95/nmap_rpc.cc	2006-01-11 22:50:25.000000000 +0000
@@ -103,6 +103,7 @@
 
 
 #include "nmap_rpc.h"
+#include "droppriv.h"
 #include "NmapOps.h"
 
 extern NmapOps o;
@@ -117,7 +118,7 @@
 static size_t tcp_readlen=0; /* used in get_rpc_results but can be reset in 
 			    send_rpc_query */
 
-static void rpc_services_init() {
+void rpc_services_init() {
   static int services_initialized = 0;
   char filename[512];
   FILE *fp;
--- nmap-3.95/protocols.cc.orig	2006-01-11 22:50:04.000000000 +0000
+++ nmap-3.95/protocols.cc	2006-01-11 22:50:25.000000000 +0000
@@ -100,13 +100,14 @@
 /* $Id: protocols.cc 2396 2004-08-29 09:12:05Z fyodor $ */
 
 #include "protocols.h"
+#include "droppriv.h"
 #include "NmapOps.h"
 
 extern NmapOps o;
 static int numipprots = 0;
 static struct protocol_list *protocol_table[PROTOCOL_TABLE_SIZE];
 
-static int nmap_protocols_init() {
+int nmap_protocols_init() {
   static int protocols_initialized = 0;
   char filename[512];
   FILE *fp;
--- nmap-3.95/service_scan.cc.orig	2006-01-11 22:50:04.000000000 +0000
+++ nmap-3.95/service_scan.cc	2006-01-11 22:50:25.000000000 +0000
@@ -105,6 +105,7 @@
 #include "timing.h"
 #include "NmapOps.h"
 #include "nsock.h"
+#include "droppriv.h"
 #if HAVE_OPENSSL
 #include <openssl/ssl.h>
 #endif
@@ -2288,7 +2289,7 @@
 }
 
 
-static AllProbes *service_scan_init(void)
+AllProbes *service_scan_init(void)
 {
   static AllProbes *AP;
 
--- nmap-3.95/services.cc.orig	2006-01-11 22:50:04.000000000 +0000
+++ nmap-3.95/services.cc	2006-01-11 22:50:25.000000000 +0000
@@ -100,6 +100,7 @@
 /* $Id: services.cc 2396 2004-08-29 09:12:05Z fyodor $ */
 
 #include "services.h"
+#include "droppriv.h"
 #include "NmapOps.h"
 
 extern NmapOps o;
@@ -107,7 +108,7 @@
 static int numudpports = 0;
 static struct service_list *service_table[SERVICE_TABLE_SIZE];
 
-static int nmap_services_init() {
+int nmap_services_init() {
   static int services_initialized = 0;
   char filename[512];
   FILE *fp;
--- nmap-3.95/tcpip.cc.orig	2005-11-28 01:34:09.000000000 +0000
+++ nmap-3.95/tcpip.cc	2006-01-10 00:05:16.000000000 +0000
@@ -102,6 +102,7 @@
 
 #include <dnet.h>
 #include "tcpip.h"
+#include "droppriv.h"
 #include "NmapOps.h"
 
 #if HAVE_SYS_TIME_H
@@ -2382,6 +2383,14 @@
   else return 1;
 }
 
+static FILE *routefp;
+
+void routethrough_init(void)
+{
+    if (!routefp)
+      routefp = fopen("/proc/net/route", "r");
+}
+
 /* Parse the system routing table, converting each route into a
    sys_route entry.  Returns an array of sys_routes.  numroutes is set
    to the number of routes in the array.  The routing table is only
@@ -2392,7 +2401,6 @@
   int route_capacity = 128;
   static struct sys_route *routes = NULL;
   static int numroutes = 0;
-  FILE *routefp;
   char buf[1024];
   char iface[16];
   char *p, *endptr;
@@ -2407,7 +2415,7 @@
     routes = (struct sys_route *) safe_zalloc(route_capacity * sizeof(struct sys_route));
     ifaces = getinterfaces(&numifaces);
     /* First let us try Linux-style /proc/net/route */
-    routefp = fopen("/proc/net/route", "r");
+    routethrough_init();
     if (routefp) {
       fgets(buf, sizeof(buf), routefp); /* Kill the first line (column headers) */
       while(fgets(buf,sizeof(buf), routefp)) {
@@ -2490,6 +2498,8 @@
 	  routes = (struct sys_route *) realloc(routes, route_capacity * sizeof(struct sys_route));
 	}
       }
+      fclose(routefp);
+      routefp = NULL;
     } else {
       struct dnet_collector_route_nfo dcrn;
       dcrn.routes = routes;
