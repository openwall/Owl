OpenSSL 0.9.7m declares ASN1_item_d2i() without "const" for the second
argument.  Unfortunately, this hunk of the patch is not acceptable upstream:
http://seclists.org/nmap-dev/2009/q3/268

diff -urp nmap-5.20.orig/ncat/ncat_ssl.c nmap-5.20/ncat/ncat_ssl.c
--- nmap-5.20.orig/ncat/ncat_ssl.c	2009-11-14 22:47:53 +0000
+++ nmap-5.20/ncat/ncat_ssl.c	2010-01-22 16:02:00 +0000
@@ -280,11 +280,11 @@ static int cert_match_dnsname(X509 *cert
 #if (OPENSSL_VERSION_NUMBER > 0x00907000L)
     if (method->it != NULL) {
         gen_names = (STACK_OF(GENERAL_NAME) *) ASN1_item_d2i(NULL,
-            (const unsigned char **) &data,
+            (unsigned char **) &data,
             ext->value->length, ASN1_ITEM_ptr(method->it));
     } else {
         gen_names = (STACK_OF(GENERAL_NAME) *) method->d2i(NULL,
-            (const unsigned char **) &data,
+            (unsigned char **) &data,
             ext->value->length);
     }
 #else

The following hunk fixes:
traceroute.cc: In member function `void TracerouteState::read_replies(long int)':
traceroute.cc:1031: warning: 'header_len' might be used uninitialized in this function
stable-5.2/nsock/src/error.h has a similar change (by upstream).

diff -urp nmap-5.20.orig/nmap_error.h nmap-5.20/nmap_error.h
--- nmap-5.20.orig/nmap_error.h	2010-01-15 03:55:23 +0000
+++ nmap-5.20/nmap_error.h	2010-01-24 20:47:28 +0000
@@ -122,10 +122,12 @@ extern "C" {
 #endif
 
 void fatal(const char *fmt, ...)
+     __attribute__ ((noreturn))
      __attribute__ ((format (printf, 1, 2)));
 void error(const char *fmt, ...)
      __attribute__ ((format (printf, 1, 2)));
 void pfatal(const char *err, ...)
+     __attribute__ ((noreturn))
      __attribute__ ((format (printf, 1, 2)));
 void gh_perror(const char *err, ...)
      __attribute__ ((format (printf, 1, 2)));
