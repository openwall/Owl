--- nmap-3.95/MACLookup.cc.orig	2005-07-26 06:26:10 +0000
+++ nmap-3.95/MACLookup.cc	2006-01-12 22:11:53 +0000
@@ -117,8 +117,6 @@ struct MAC_hash_table {
   struct MAC_entry **table;
 } MacTable;
 
-static int initialized = 0;
-
 static inline int MacCharPrefix2Key(const u8 *prefix) {
   return (prefix[0] << 16) + (prefix[1] << 8) + prefix[2];
 }
@@ -130,7 +128,8 @@ static inline int MACTableHash(int prefi
   return prefix % table_capacity;
 }
 
-void InitializeTable() {
+static void mac_prefix_init() {
+  static int initialized = 0;
   if (initialized) return;
   initialized = 1;
   char filename[256];
@@ -216,7 +215,7 @@ const char *MACPrefix2Corp(const u8 *pre
   struct MAC_entry *ent;
 
   if (!prefix) fatal("MACPrefix2Corp called with a NULL prefix");
-  if (!initialized) InitializeTable();
+  mac_prefix_init();
 
   ent = findMACEntry(MacCharPrefix2Key(prefix));
   return (ent)? ent->vendor : NULL;
@@ -231,7 +230,7 @@ const char *MACPrefix2Corp(const u8 *pre
 bool MACCorp2Prefix(const char *vendorstr, u8 *mac_data) {
   if (!vendorstr) fatal("%s: vendorstr is NULL", __FUNCTION__);
   if (!mac_data) fatal("%s: mac_data is NULL", __FUNCTION__);
-  if (!initialized) InitializeTable();
+  mac_prefix_init();
 
   for(int i = 0; i < MacTable.table_capacity; i++ ) {
     if (MacTable.table[i])
--- nmap-3.95/nmap_rpc.cc.orig	2005-10-01 23:50:38 +0000
+++ nmap-3.95/nmap_rpc.cc	2006-01-08 23:04:06 +0000
@@ -106,7 +106,6 @@
 #include "NmapOps.h"
 
 extern NmapOps o;
-static int services_initialized = 0;
 static struct rpc_info ri;
 static int udp_rpc_socket = -1;
 static int tcp_rpc_socket = -1;
@@ -119,12 +118,16 @@ static size_t tcp_readlen=0; /* used in 
 			    send_rpc_query */
 
 static void rpc_services_init() {
+  static int services_initialized = 0;
   char filename[512];
   FILE *fp;
   char *tmpptr, *p;
   char line[1024];
   int lineno = 0;
 
+  if (services_initialized)
+    return;
+
   services_initialized = 1;
   ri.num_alloc = 256;
   ri.num_used = 0;
@@ -182,9 +185,7 @@ static void rpc_services_init() {
 char *nmap_getrpcnamebynum(unsigned long num) {
   int i;
 
-  if (!services_initialized) {
-    rpc_services_init();
-  }
+  rpc_services_init();
 
   for(i=0; i < ri.num_used; i++) {
     if (ri.numbers[i] == num)
@@ -194,9 +195,7 @@ char *nmap_getrpcnamebynum(unsigned long
 }
 
 int get_rpc_procs(unsigned long **programs, unsigned long *num_programs) {
-  if (!services_initialized) {
-    rpc_services_init();
-  }
+  rpc_services_init();
   
   *programs = ri.numbers;
   *num_programs = ri.num_used;
--- nmap-3.95/protocols.cc.orig	2005-04-15 01:23:33 +0000
+++ nmap-3.95/protocols.cc	2006-01-08 23:04:06 +0000
@@ -103,11 +103,11 @@
 #include "NmapOps.h"
 
 extern NmapOps o;
-static int protocols_initialized = 0;
 static int numipprots = 0;
 static struct protocol_list *protocol_table[PROTOCOL_TABLE_SIZE];
 
 static int nmap_protocols_init() {
+  static int protocols_initialized = 0;
   char filename[512];
   FILE *fp;
   char protocolname[128];
@@ -118,6 +118,9 @@ static int nmap_protocols_init() {
   struct protocol_list *current, *previous;
   int res;
 
+  if (protocols_initialized)
+      return 0;
+
   if (nmap_fetchfile(filename, sizeof(filename), "nmap-protocols") == -1) {
     error("Unable to find nmap-protocols!  Resorting to /etc/protocol");
     strcpy(filename, "/etc/protocols");
@@ -179,9 +182,8 @@ static int nmap_protocols_init() {
 struct protoent *nmap_getprotbynum(int num) {
   struct protocol_list *current;
 
-  if (!protocols_initialized)
-    if (nmap_protocols_init() == -1)
-      return NULL;
+  if (nmap_protocols_init() == -1)
+    return NULL;
 
   for(current = protocol_table[num % PROTOCOL_TABLE_SIZE];
       current; current = current->next) {
@@ -202,9 +204,8 @@ struct scan_lists *getdefaultprots(void)
   int bucket;
   int protsneeded = 256;
 
-  if (!protocols_initialized)
-    if (nmap_protocols_init() == -1)
-      fatal("getdefaultprots(): Couldn't get protocol numbers");
+  if (nmap_protocols_init() == -1)
+    fatal("getdefaultprots(): Couldn't get protocol numbers");
   
   scanlist = (struct scan_lists *) safe_zalloc(sizeof(struct scan_lists));
   scanlist->prots = (unsigned short *) safe_zalloc((protsneeded) * sizeof(unsigned short));
@@ -224,9 +225,8 @@ struct scan_lists *getfastprots(void) {
   int bucket;
   int protsneeded = 0;
 
-  if (!protocols_initialized)
-    if (nmap_protocols_init() == -1)
-      fatal("Getfastprots: Couldn't get protocol numbers");
+  if (nmap_protocols_init() == -1)
+    fatal("Getfastprots: Couldn't get protocol numbers");
   
   memset(usedprots, 0, sizeof(usedprots));
 
--- nmap-3.95/service_scan.cc.orig	2005-11-22 23:22:00 +0000
+++ nmap-3.95/service_scan.cc	2006-01-08 23:04:06 +0000
@@ -1124,7 +1124,7 @@ void parse_nmap_service_probe_file(AllPr
 
 // Parses the nmap-service-probes file, and adds each probe to
 // the already-created 'probes' vector.
-void parse_nmap_service_probes(AllProbes *AP) {
+static void parse_nmap_service_probes(AllProbes *AP) {
   char filename[256];
 
   if (nmap_fetchfile(filename, sizeof(filename), "nmap-service-probes") == -1){
@@ -2288,11 +2288,23 @@ void remove_excluded_ports(AllProbes *AP
 }
 
 
+static AllProbes *service_scan_init(void)
+{
+  static AllProbes *AP;
+
+  if (!AP) {
+    AP = new AllProbes();
+    parse_nmap_service_probes(AP);
+  }
+
+  return AP;
+}
+
 /* Execute a service fingerprinting scan against all open ports of the
    Targets specified. */
 int service_scan(vector<Target *> &Targets) {
   // int service_scan(Target *targets[], int num_targets)
-  static AllProbes *AP;
+  AllProbes *AP;
   ServiceGroup *SG;
   nsock_pool nsp;
   struct timeval now;
@@ -2304,10 +2316,7 @@ int service_scan(vector<Target *> &Targe
   if (Targets.size() == 0)
     return 1;
 
-  if (!AP) {
-    AP = new AllProbes();
-    parse_nmap_service_probes(AP);
-  }
+  AP = service_scan_init();
 
 
   // Now I convert the targets into a new ServiceGroup
--- nmap-3.95/services.cc.orig	2005-04-15 01:23:33 +0000
+++ nmap-3.95/services.cc	2006-01-08 23:04:06 +0000
@@ -103,12 +103,12 @@
 #include "NmapOps.h"
 
 extern NmapOps o;
-static int services_initialized = 0;
 static int numtcpports = 0;
 static int numudpports = 0;
 static struct service_list *service_table[SERVICE_TABLE_SIZE];
 
 static int nmap_services_init() {
+  static int services_initialized = 0;
   char filename[512];
   FILE *fp;
   char servicename[128], proto[16];
@@ -119,6 +119,9 @@ static int nmap_services_init() {
   struct service_list *current, *previous;
   int res;
 
+  if (services_initialized)
+    return 0;
+
   if (nmap_fetchfile(filename, sizeof(filename), "nmap-services") == -1) {
 #ifndef WIN32
     error("Unable to find nmap-services!  Resorting to /etc/services");
@@ -216,9 +219,8 @@ static int nmap_services_init() {
 struct servent *nmap_getservbyport(int port, const char *proto) {
   struct service_list *current;
 
-  if (!services_initialized)
-    if (nmap_services_init() == -1)
-      return NULL;
+  if (nmap_services_init() == -1)
+    return NULL;
 
   for(current = service_table[port % SERVICE_TABLE_SIZE];
       current; current = current->next) {
@@ -244,9 +246,8 @@ struct scan_lists *getdefaultports(int t
   int tcpportsneeded = 0;
   int udpportsneeded = 0;
 
-  if (!services_initialized)
-    if (nmap_services_init() == -1)
-      fatal("Getfastports: Couldn't get port numbers");
+  if (nmap_services_init() == -1)
+    fatal("Getfastports: Couldn't get port numbers");
   
   usedports = (u8 *) safe_zalloc(sizeof(*usedports) * 65536);
 
@@ -308,9 +309,8 @@ struct scan_lists *getfastports(int tcps
   int tcpportsneeded = 0;
   int udpportsneeded = 0;
 
-  if (!services_initialized)
-    if (nmap_services_init() == -1)
-      fatal("Getfastports: Couldn't get port numbers");
+  if (nmap_services_init() == -1)
+    fatal("Getfastports: Couldn't get port numbers");
   
   usedports = (u8 *) safe_zalloc(sizeof(*usedports) * 65536);
 
