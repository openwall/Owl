diff -urp pam-0.75.orig/modules/pam_limits/pam_limits.c pam-0.75/modules/pam_limits/pam_limits.c
--- pam-0.75.orig/modules/pam_limits/pam_limits.c	Mon Apr 23 18:39:04 2001
+++ pam-0.75/modules/pam_limits/pam_limits.c	Sat Aug  9 23:00:09 2003
@@ -92,6 +92,50 @@ struct pam_limit_s {
 #include <grp.h>
 #endif
 
+/* A generic interface to sending messages, originally from pam_passwdqc */
+static int converse(pam_handle_t *pamh, int style, const char *text,
+    struct pam_response **resp)
+{
+	struct pam_conv *conv;
+	struct pam_message msg, *pmsg;
+	int status;
+
+	status = pam_get_item(pamh, PAM_CONV, (const void **)&conv);
+	if (status != PAM_SUCCESS)
+		return status;
+
+	pmsg = &msg;
+	msg.msg_style = style;
+	msg.msg = text;
+
+	*resp = NULL;
+	return conv->conv(1, (const struct pam_message **)&pmsg, resp,
+	    conv->appdata_ptr);
+}
+
+static int say(pam_handle_t *pamh, int style, const char *format, ...)
+{
+	va_list args;
+	char buffer[0x800];
+	int needed;
+	struct pam_response *resp;
+	int status;
+
+	va_start(args, format);
+	needed = vsnprintf(buffer, sizeof(buffer), format, args);
+	va_end(args);
+
+	if ((unsigned int)needed < sizeof(buffer)) {
+		status = converse(pamh, style, buffer, &resp);
+		_pam_overwrite(buffer);
+	} else {
+		status = PAM_ABORT;
+		memset(buffer, 0, sizeof(buffer));
+	}
+
+	return status;
+}
+
 /* logging */
 static void _pam_log(int err, const char *format, ...)
 {
@@ -454,8 +498,8 @@ static int parse_config_file(const char 
         _pam_log(LOG_DEBUG,"reading settings from '%s'", CONF_FILE);
     fil = fopen(CONF_FILE, "r");
     if (fil == NULL) {
-        _pam_log (LOG_WARNING, "can not read settings from %s", CONF_FILE);
-        return PAM_SERVICE_ERR;
+        _pam_log (LOG_WARNING, "cannot read settings from %s", CONF_FILE);
+        return PAM_ABORT;
     }
 #undef CONF_FILE
     
@@ -547,7 +591,9 @@ static int setup_limits(const char * una
     for (i=0; i<RLIM_NLIMITS; i++) {
         if (pl->limits[i].limit.rlim_cur > pl->limits[i].limit.rlim_max)
             pl->limits[i].limit.rlim_cur = pl->limits[i].limit.rlim_max;
-        retval |= setrlimit(i, &pl->limits[i].limit);
+	if (pl->limits[i].src_soft != LIMITS_DEF_NONE ||
+	    pl->limits[i].src_hard != LIMITS_DEF_NONE)
+		retval |= setrlimit(i, &pl->limits[i].limit);
     }
     
     if (retval != PAM_SUCCESS)
@@ -575,7 +621,6 @@ PAM_EXTERN int pam_sm_open_session(pam_h
     struct passwd *pwd;
     int ctrl;
     struct pam_limit_s pl;
-    char error_buf[BUFSIZ];
 
     D(("called."));
 
@@ -599,7 +644,7 @@ PAM_EXTERN int pam_sm_open_session(pam_h
     /* do not impose limits on UID 0 accounts */
     if (!pwd->pw_uid) {
         if (ctrl & PAM_DEBUG_ARG)
-            _pam_log(LOG_DEBUG, "user '%s' have UID 0 - no limits imposed",
+            _pam_log(LOG_DEBUG, "user '%s' has UID 0 - no limits imposed",
                                 user_name);
         return PAM_SUCCESS;
     }
@@ -607,7 +652,7 @@ PAM_EXTERN int pam_sm_open_session(pam_h
     retval = init_limits(&pl);
     if (retval != PAM_SUCCESS) {
         _pam_log(LOG_WARNING, "cannot initialize");
-        return PAM_IGNORE;
+        return PAM_ABORT;
     }
 
     retval = parse_config_file(pwd->pw_name, ctrl, &pl);
@@ -617,7 +662,7 @@ PAM_EXTERN int pam_sm_open_session(pam_h
     }
     if (retval != PAM_SUCCESS) {
         _pam_log(LOG_WARNING, "error parsing the configuration file");
-        return PAM_IGNORE;
+        return retval;
     }
 
     if (ctrl & PAM_DO_SETREUID)
@@ -625,15 +670,7 @@ PAM_EXTERN int pam_sm_open_session(pam_h
 
     retval = setup_limits(pwd->pw_name, ctrl, &pl);
     if (retval & LOGIN_ERR) {
-	snprintf(error_buf, sizeof(error_buf), "Too many logins for '%s'.\n",
-		 pwd->pw_name);
-#if 0
-	if (pam_get_item(pamh, PAM_CONV, (const void **)&conv) == PAM_SUCCESS)
-	    conv->conv(1, messages, &responses, conv->appdata_ptr);
-	else
-#endif
-            printf("%s", error_buf);
-        sleep(2);
+	say(pamh, PAM_ERROR_MSG, "Too many logins for '%s'.", pwd->pw_name);
         return PAM_PERM_DENIED;
     }
 
@@ -648,14 +685,24 @@ PAM_EXTERN int pam_sm_close_session(pam_
 }
 
 #ifdef PAM_STATIC
+#define pam_sm_acct_mgmt pam_sm_open_session
+#elif defined(__linux__) && defined(__ELF__)
+__asm__(".globl pam_sm_acct_mgmt; pam_sm_acct_mgmt = pam_sm_open_session");
+#else
+PAM_EXTERN int pam_sm_acct_mgmt(pam_handle_t *pamh, int flags,
+	int argc, const char **argv)
+{
+	return pam_sm_open_session(pamh, flags, argc, argv);
+}
+#endif
 
+#ifdef PAM_STATIC
 /* static module data */
-
 struct pam_module _pam_limits_modstruct = {
      "pam_limits",
      NULL,
      NULL,
-     NULL,
+     pam_sm_acct_mgmt,
      pam_sm_open_session,
      pam_sm_close_session,
      NULL
