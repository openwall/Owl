diff -ur pam-0.72.orig/modules/pam_pwdb/pwdb_chkpwd.c pam-0.72/modules/pam_pwdb/pwdb_chkpwd.c
--- pam-0.72.orig/modules/pam_pwdb/pwdb_chkpwd.c	Mon Jan  3 22:01:53 2000
+++ pam-0.72/modules/pam_pwdb/pwdb_chkpwd.c	Thu Mar  8 18:30:14 2001
@@ -113,7 +113,7 @@
 	fprintf(stderr,
 		"This program is not designed for running in this way\n"
 		"-- the system administrator has been informed\n");
-	exit(UNIX_FAILED);
+	exit(1);
     }
 
     /*
@@ -132,11 +132,11 @@
     if (retval != PWDB_SUCCESS) {
 	_log_err(LOG_ALERT, "could not identify user");
 	while (pwdb_end() != PWDB_SUCCESS);
-	exit(UNIX_FAILED);
+	exit(1);
     }
 
     /* read the password from stdin (a pipe from the pam_pwdb module) */
-
+    /* XXX: should loop */
     npass = read(STDIN_FILENO, pass, MAXPASS);
 
     if (npass < 0) {                             /* is it a valid password? */
@@ -166,7 +166,7 @@
 
     /* return pass or fail */
 
-    exit(retval);
+    exit(retval == 0 ? 0 : 1);
 }
 
 /*
diff -ur pam-0.72.orig/modules/pam_pwdb/support.-c pam-0.72/modules/pam_pwdb/support.-c
--- pam-0.72.orig/modules/pam_pwdb/support.-c	Mon Jan  3 21:08:45 2000
+++ pam-0.72/modules/pam_pwdb/support.-c	Thu Mar  8 18:55:22 2001
@@ -366,8 +366,8 @@
 	while (pwdb_end() == PWDB_SUCCESS);
 
 	/* reopen stdin as pipe */
-	close(fds[1]);
-	dup2(fds[0], STDIN_FILENO);
+	if (close(fds[1])) exit(1);
+	if (dup2(fds[0], STDIN_FILENO) != STDIN_FILENO) exit(1);
 
 	/* exec binary helper */
 	args[0] = x_strdup(CHKPWD_HELPER);
@@ -375,19 +375,30 @@
 
 	/* should not get here: exit with error */
 	D(("helper binary is not available"));
-	exit(PWDB_SUCCESS+1);
+	exit(1);
     } else if (child > 0) {
 	/* wait for child */
+	int fail = 0, status;
 	close(fds[0]);
 	if (passwd != NULL) {            /* send the password to the child */
-	    write(fds[1], passwd, strlen(passwd)+1);
+	    if (write(fds[1], passwd, strlen(passwd) + 1) != strlen(passwd) + 1)
+		fail = 1;
 	    passwd = NULL;
 	} else {
-	    write(fds[1], "", 1);                        /* blank password */
+	    /* blank password */
+	    if (write(fds[1], "", 1) != 1)
+		fail = 1;
 	}
 	close(fds[1]);
-	(void) waitpid(child, &retval, 0);  /* wait for helper to complete */
-	retval = (retval == PWDB_SUCCESS) ? PAM_SUCCESS:PAM_AUTH_ERR;
+	(void) waitpid(child, &status, 0); /* wait for helper to complete */
+	if (!WIFEXITED(status) || WEXITSTATUS(status) != 0)
+		fail = 1;
+	/*
+	 * XXX: this is still fail-open: a library function may cause the
+	 * process to exit zero.  The helper binary should be patched to
+	 * pass something back via a pipe.
+	 */
+	retval = fail ? PAM_AUTH_ERR : PAM_SUCCESS;
     } else {
 	D(("fork failed"));
 	retval = PAM_AUTH_ERR;
@@ -397,11 +408,14 @@
     return retval;
 }
 
+#include <pwd.h>
+
 static int _unix_verify_password(pam_handle_t *pamh, const char *name,
 				 const char *p, unsigned int ctrl)
 {
     const struct pwdb *pw=NULL;
     const struct pwdb_entry *pwe=NULL;
+    const struct passwd *libc_pw;
 
     const char *salt;
     char *pp = NULL;
@@ -461,7 +475,9 @@
 
     retval = pwdb_get_entry(pw, "passwd", &pwe);
     if (retval != PWDB_SUCCESS) {
-	if (geteuid()) {
+	if ((libc_pw = getpwnam(name)))
+		memset(libc_pw->pw_passwd, 0, strlen(libc_pw->pw_passwd));
+	if (libc_pw && geteuid() != 0 && getuid() == libc_pw->pw_uid) {
 	    /* we are not root perhaps this is the reason? Run helper */
 	    D(("running helper binary"));
 	    retval = pwdb_run_helper_binary(pamh, p);
Only in pam-0.72: pam-0.72-owl-pwdb_chkpwd.diff
