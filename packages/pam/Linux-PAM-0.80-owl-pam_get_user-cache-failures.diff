Cache pam_get_user() failures such that the conversation function isn't
called multiple times with the same prompt if pam_get_user() fails and is
used by more than one module in the stack.

diff -upk.orig Linux-PAM-0.80.orig/libpam/pam_item.c Linux-PAM-0.80/libpam/pam_item.c
--- Linux-PAM-0.80.orig/libpam/pam_item.c	2004-09-24 08:17:37 +0000
+++ Linux-PAM-0.80/libpam/pam_item.c	2005-08-03 15:11:32 +0000
@@ -54,10 +54,12 @@ int pam_set_item (pam_handle_t *pamh, in
 
     case PAM_USER:
 	RESET(pamh->user, item);
+	pamh->former.fail_user = PAM_SUCCESS;
 	break;
 
     case PAM_USER_PROMPT:
 	RESET(pamh->prompt, item);
+	pamh->former.fail_user = PAM_SUCCESS;
 	break;
 
     case PAM_TTY:
@@ -131,6 +133,7 @@ int pam_set_item (pam_handle_t *pamh, in
 		memcpy(tconv, item, sizeof(struct pam_conv));
 		_pam_drop(pamh->pam_conversation);
 		pamh->pam_conversation = tconv;
+		pamh->former.fail_user = PAM_SUCCESS;
 	    }
 	}
         break;
@@ -258,6 +261,9 @@ int pam_get_user(pam_handle_t *pamh, con
 	return PAM_SUCCESS;
     }
 
+    if (pamh->former.fail_user != PAM_SUCCESS)
+	return pamh->former.fail_user;
+
     /* will need a prompt */
     use_prompt = prompt;
     if (use_prompt == NULL) {
@@ -312,6 +318,7 @@ int pam_get_user(pam_handle_t *pamh, con
 	 */
 	D(("pam_get_user: no response provided"));
 	retval = PAM_CONV_ERR;
+	pamh->former.fail_user = retval;
     } else if (retval == PAM_SUCCESS) {            /* copy the username */
 	/*
 	 * now we set the PAM_USER item -- this was missing from pre.53
@@ -320,7 +327,8 @@ int pam_get_user(pam_handle_t *pamh, con
 	 */
 	RESET(pamh->user, resp->resp);
 	*user = pamh->user;
-    }
+    } else
+	pamh->former.fail_user = retval;
 
     if (resp) {
 	/*
diff -upk.orig Linux-PAM-0.80.orig/libpam/pam_private.h Linux-PAM-0.80/libpam/pam_private.h
--- Linux-PAM-0.80.orig/libpam/pam_private.h	2005-08-03 15:10:31 +0000
+++ Linux-PAM-0.80/libpam/pam_private.h	2005-08-03 15:11:32 +0000
@@ -122,6 +122,7 @@ struct _pam_former_state {
     int status;            /* the status before returning incomplete */
 
 /* state info used by pam_get_user() function */
+    int fail_user;
     int want_user;
     char *prompt;          /* saved prompt information */
 
