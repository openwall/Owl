diff -uprk.orig Linux-PAM-0.80.orig/modules/pam_pwdb/Makefile Linux-PAM-0.80/modules/pam_pwdb/Makefile
--- Linux-PAM-0.80.orig/modules/pam_pwdb/Makefile	2005-05-19 15:19:50 +0000
+++ Linux-PAM-0.80/modules/pam_pwdb/Makefile	2005-08-23 13:24:07 +0000
@@ -8,11 +8,13 @@
 #
 
 include ../../Make.Rules
+HEADER_DIRS += -I../pammodutil/include
+EXTRALS += -L../pammodutil -lpammodutil -L../../libpam -lpam
 
 ifeq ($(HAVE_LIBPWDB),yes)
 
 EXTRALS += -lpwdb
-EXTRAS += -DCHKPWD_HELPER=\"$(SUPLEMENTED)/$(CHKPWD)\"
+EXTRAS += -fno-strict-aliasing -DCHKPWD_HELPER=\"/usr/libexec/chkpwd/$(CHKPWD)\"
 
 ifeq ($(HAVE_LIBSELINUX),yes)
   EXTRALS += -lselinux
@@ -33,9 +35,8 @@ LIBOBJ = $(TITLE).o
 LIBOBJD = $(addprefix dynamic/,$(LIBOBJ))
 #LIBOBJS = $(addprefix static/,$(LIBOBJ))
 LIBDEPS = pam_unix_acct.-c pam_unix_auth.-c pam_unix_passwd.-c \
-	pam_unix_sess.-c pam_unix_pwupd.-c support.-c bigcrypt.-c
+	pam_unix_sess.-c pam_unix_pwupd.-c support.-c
 
-PLUS += md5_good.o md5_broken.o md5_crypt_good.o md5_crypt_broken.o
 CFLAGS += $(EXTRAS)
 
 ifdef DYNAMIC
@@ -58,11 +59,10 @@ info:
 	@echo "*** Building PAM_pwdb module..."
 	@echo
 
-$(CHKPWD): pwdb_chkpwd.o md5_good.o md5_broken.o \
-           md5_crypt_good.o md5_crypt_broken.o
+$(CHKPWD): pwdb_chkpwd.o
 	$(CC) $(CFLAGS) -o $(CHKPWD) $^ $(LDFLAGS) -lpwdb $(EXTRALS)
 
-pwdb_chkpwd.o: pwdb_chkpwd.c pam_unix_md.-c bigcrypt.-c
+pwdb_chkpwd.o: pwdb_chkpwd.c pam_unix_md.-c
 
 md5_good.o: md5.c
 	$(CC) $(CFLAGS) $(CPPFLAGS) -DHIGHFIRST -D'MD5Name(x)=Good##x' \
@@ -112,12 +112,12 @@ install: all
 ifdef DYNAMIC
 	$(INSTALL) -m $(SHLIBMODE) $(LIBSHARED) $(FAKEROOT)$(SECUREDIR)
 endif
-	$(MKDIR) $(FAKEROOT)$(SUPLEMENTED)
-	$(INSTALL) -m 4555 $(CHKPWD) $(FAKEROOT)$(SUPLEMENTED)
+	$(MKDIR) $(FAKEROOT)/usr/libexec/chkpwd
+	$(INSTALL) -m 700 $(CHKPWD) $(FAKEROOT)/usr/libexec/chkpwd/
 
 remove:
 	rm -f $(FAKEROOT)$(SECUREDIR)/$(TITLE).so
-	rm -f $(FAKEROOT)$(SUPLEMENTED)/$(CHKPWD)
+	rm -f $(FAKEROOT)/usr/libexec/chkpwd/$(CHKPWD)
 
 clean:
 	rm -f $(CHKPWD) $(LIBOBJD) $(LIBOBJS) $(MOREDELS) core *~ *.o *.so
diff -uprk.orig Linux-PAM-0.80.orig/modules/pam_pwdb/pam_pwdb.c Linux-PAM-0.80/modules/pam_pwdb/pam_pwdb.c
--- Linux-PAM-0.80.orig/modules/pam_pwdb/pam_pwdb.c	2005-08-23 10:18:58 +0000
+++ Linux-PAM-0.80/modules/pam_pwdb/pam_pwdb.c	2005-08-23 10:21:57 +0000
@@ -192,7 +192,7 @@ PAM_EXTERN int pam_sm_chauthtok(pam_hand
 
     pwdb_start();
     ctrl = set_ctrl(flags, argc, argv);
-    retval = _unix_chauthtok(pamh, ctrl);
+    retval = _unix_chauthtok(pamh, ctrl, argc, argv);
     pwdb_end();
 
     D(("done."));
diff -uprk.orig Linux-PAM-0.80.orig/modules/pam_pwdb/pam_unix_acct.-c Linux-PAM-0.80/modules/pam_pwdb/pam_unix_acct.-c
--- Linux-PAM-0.80.orig/modules/pam_pwdb/pam_unix_acct.-c	2000-12-04 19:02:34 +0000
+++ Linux-PAM-0.80/modules/pam_pwdb/pam_unix_acct.-c	2005-08-23 13:22:13 +0000
@@ -43,9 +43,9 @@ static int _shadow_acct_mgmt_exp(pam_han
 	    _log_err(LOG_NOTICE
 		     , "acct: account %s has expired (account expired)"
 		     , uname);
-	    make_remark(pamh, ctrl, PAM_ERROR_MSG
-			, "Your account has expired; "
-			"please contact your system administrator");
+	    if (off(UNIX__QUIET, ctrl))
+		_pammodutil_error(pamh, "%s", "Your account has expired; "
+				  "please contact your system administrator");
 
 	    D(("account expired"));
 	    return PAM_ACCT_EXPIRED;
@@ -86,9 +86,9 @@ static int _shadow_acct_mgmt_exp(pam_han
 		_log_err(LOG_NOTICE, "acct: account %s has expired "
 			 "(failed to change password)", uname);
 	    }
-	    make_remark(pamh, ctrl, PAM_ERROR_MSG
-			, "Your password has expired; "
-			"please see your system administrator");
+	    if (off(UNIX__QUIET, ctrl))
+		_pammodutil_error(pamh, "%s", "Your password has expired; "
+				  "please contact your system administrator");
 
 	    D(("account expired2"));
 	    return PAM_ACCT_EXPIRED;
@@ -109,9 +109,8 @@ static int _shadow_acct_mgmt_exp(pam_han
 		     , "acct: expired password for user %s (root enforced)"
 		     , uname);
 	}
-	make_remark(pamh, ctrl, PAM_ERROR_MSG
-		    , "You are required to change your password immediately"
-	    );
+	if (off(UNIX__QUIET, ctrl))
+	    _pammodutil_error(pamh, "%s", "You are required to change your password immediately");
 
 	D(("need a new password"));
 	return PAM_NEW_AUTHTOK_REQD;
@@ -125,8 +124,8 @@ static int _shadow_acct_mgmt_exp(pam_han
 		     , "acct: expired password for user %s (password aged)"
 		     , uname);
 	}
-	make_remark(pamh, ctrl, PAM_ERROR_MSG
-		    , "Your password has expired; please change it!");
+	if (off(UNIX__QUIET, ctrl))
+	    _pammodutil_error(pamh, "%s", "Your password has expired; please change it!");
 
 	D(("need a new password 2"));
 	return PAM_NEW_AUTHTOK_REQD;
@@ -145,27 +144,17 @@ static int _shadow_acct_mgmt_exp(pam_han
 	warn_days = *((const int *) pwe->value);
 	(void) pwdb_entry_delete(&pwe);
 
-	if ((daysleft <= warn_days) && (warn_days > 0)) {
-	    char *s;
-
+	if ((daysleft <= warn_days) && (warn_days > 0) && daysleft >= 0) {
 	    if ( on(UNIX_DEBUG, ctrl) ) {
 		_log_err(LOG_DEBUG
 			 , "acct: password for user %s will expire in %d days"
 			 , uname, daysleft);
 	    }
 
-#define LocalComment "Warning: your password will expire in %d day%s"
-	    if ((s = (char *) malloc(30+sizeof(LocalComment))) == NULL) {
-		_log_err(LOG_CRIT, "malloc failure in " __FILE__);
-		retval = PAM_BUF_ERR;
-	    } else {
-
-		sprintf(s, LocalComment, daysleft, daysleft == 1 ? "":"s");
-
-		make_remark(pamh, ctrl, PAM_TEXT_INFO, s);
-		free(s);
-	    }
-#undef LocalComment
+	    if (off(UNIX__QUIET, ctrl))
+		retval = _pammodutil_info(pamh,
+		    "Warning: your password will expire in %d day%s",
+		    daysleft, daysleft == 1 ? "":"s");
 	}
     } else {
 	retval = PAM_SUCCESS;
diff -uprk.orig Linux-PAM-0.80.orig/modules/pam_pwdb/pam_unix_md.-c Linux-PAM-0.80/modules/pam_pwdb/pam_unix_md.-c
--- Linux-PAM-0.80.orig/modules/pam_pwdb/pam_unix_md.-c	2001-11-12 05:04:52 +0000
+++ Linux-PAM-0.80/modules/pam_pwdb/pam_unix_md.-c	2005-08-23 10:21:57 +0000
@@ -9,6 +9,9 @@
  * software freely from the US, please do not send me any. (AGM)
  */
 
+#include <crypt.h>
+
+#if 0
 /* this should have been defined in a header file.. Why wasn't it? AGM */
 extern char *crypt(const char *key, const char *salt);
 
@@ -27,10 +30,12 @@ struct cfns {
 const static struct cfns cfn_list[N_MDS] = {
     { "$1$", 3, Goodcrypt_md5 },
 };
+#endif
 
 static char *_pam_md(const char *key, const char *salt)
 {
     char *x,*e=NULL;
+#if 0
     int i;
 
     D(("called with key='%s', salt='%s'", key, salt));
@@ -47,12 +52,16 @@ static char *_pam_md(const char *key, co
     if ( i >= N_MDS ) {
 	e = bigcrypt(key, salt);      /* (defaults to standard algorithm) */
     }
+#endif
+
+    e = crypt(key, salt);
 
     x = x_strdup(e);                        /* put e in malloc()ed memory */
     _pam_overwrite(e);                                        /* clean up */
     return x;                           /* this must be deleted elsewhere */
 }
 
+#if 0
 #ifndef PWDB_NO_MD_COMPAT
 static char *_pam_md_compat(const char *key, const char *salt)
 {
@@ -71,3 +80,4 @@ static char *_pam_md_compat(const char *
     return x;                           /* this must be deleted elsewhere */
 }
 #endif /* PWDB_NO_MD_COMPAT */
+#endif
diff -uprk.orig Linux-PAM-0.80.orig/modules/pam_pwdb/pam_unix_passwd.-c Linux-PAM-0.80/modules/pam_pwdb/pam_unix_passwd.-c
--- Linux-PAM-0.80.orig/modules/pam_pwdb/pam_unix_passwd.-c	2001-11-12 06:57:38 +0000
+++ Linux-PAM-0.80/modules/pam_pwdb/pam_unix_passwd.-c	2005-08-23 10:46:06 +0000
@@ -5,12 +5,20 @@ static const char rcsid_pass[] =
 " - PAM_PWDB password module <morgan@parc.power.net>"
 ;
 
+#include <string.h>
+#include <stdlib.h>
+#include <unistd.h>
+#define _OW_SOURCE
+#include <crypt.h>
+
 #include "pam_unix_pwupd.-c"
 
+#if 0
 /* passwd/salt conversion macros */
 
 #define ascii_to_bin(c) ((c)>='a'?(c-59):(c)>='A'?((c)-53):(c)-'.')
 #define bin_to_ascii(c) ((c)>=38?((c)-38+'a'):(c)>=12?((c)-12+'A'):(c)+'.')
+#endif
 
 /* data tokens */
 
@@ -19,6 +27,7 @@ static const char rcsid_pass[] =
 
 /* Implementation */
 
+#if 0
 /*
  * i64c - convert an integer to a radix 64 character
  */
@@ -40,6 +49,7 @@ static int i64c(int i)
         return ('a' - 38 + i);
     return ('\0');
 }
+#endif
 
 /*
  * FUNCTION: _pam_unix_chauthtok() 
@@ -61,18 +71,39 @@ static int i64c(int i)
  * in this release (.52) mostly for the purpose of discussion.
  */
 
-static int _unix_chauthtok(pam_handle_t *pamh, unsigned int ctrl)
+static int _unix_chauthtok(pam_handle_t *pamh, unsigned int ctrl,
+	int argc, const char **argv)
 {
     int retval;
     unsigned int lctrl;
+    const char *prefix;
+    unsigned long count;
 
     /* <DO NOT free() THESE> */
     const char *user;
-    const char *pass_old, *pass_new;
+    const char *pass_old;
+    char *pass_new;
     /* </DO NOT free() THESE> */
 
     D(("called"));
 
+    prefix = "";
+    count = 0;
+
+    while (argc-- > 0) {
+	if (!strncmp(*argv, "prefix=", 7)) {
+	    prefix = *argv + 7;
+	    unset(UNIX_MD5_PASS, ctrl);
+	} else
+	if (!strncmp(*argv, "count=", 6))
+	    count = strtoul(*argv + 6, NULL, 0);
+
+	++argv;
+    }
+
+    if (on(UNIX_MD5_PASS, ctrl))
+	prefix = "$1$";
+
     /*
      * First get the name of a user
      */
@@ -150,10 +181,12 @@ static int _unix_chauthtok(pam_handle_t 
 	}
 
     } else if ( on( UNIX__UPDATE, ctrl ) ) {
+#if 0
 	/* tpass is used below to store the _pam_md() return; it
 	 * should be _pam_delete()'d. */
 
 	char *tpass=NULL;     
+#endif
 
 	/*
 	 * obtain the proposed password
@@ -202,7 +235,7 @@ static int _unix_chauthtok(pam_handle_t 
 				      , "Enter new UNIX password: "
 				      , "Retype new UNIX password: "
 				      , _UNIX_NEW_AUTHTOK
-				      , &pass_new );
+				      , (const char **)&pass_new );
 
 	if ( retval != PAM_SUCCESS ) {
 	    if ( on(UNIX_DEBUG,ctrl) ) {
@@ -221,7 +254,8 @@ static int _unix_chauthtok(pam_handle_t 
 	 * password is acceptable.
 	 */
 
-	if (pass_new[0] == '\0') {     /* "\0" password = NULL */
+	/* "\0" password = NULL */
+	if (pass_new[0] == '\0' && on(UNIX__NONULL, ctrl)) {
 	    pass_new = NULL;
 	}
 
@@ -229,7 +263,7 @@ static int _unix_chauthtok(pam_handle_t 
 
 	if (retval != PAM_SUCCESS) {
 	    _log_err(LOG_NOTICE, "new password not acceptable");
-	    pass_new = pass_old = NULL;	              /* tidy up */
+	    pass_new = NULL; pass_old = NULL;	           /* tidy up */
 	    return retval;
 	}
 
@@ -247,6 +281,7 @@ static int _unix_chauthtok(pam_handle_t 
 	 *       of password handling... no encryption needed..
 	 */
 
+#if 0
 	if ( on(UNIX_MD5_PASS, ctrl) ) {
 
 	    /*
@@ -316,6 +351,39 @@ static int _unix_chauthtok(pam_handle_t 
 		/* no longer need cleartext */
 		pass_new = tpass = _pam_md( pass_new, salt );
 	    }
+#endif
+	if (pass_new[0] != '\0') {
+		int fd;
+		char pool[16];
+		char *pw, *salt;
+
+		if ((fd = open("/dev/urandom", O_RDONLY)) < 0 ||
+		    _pammodutil_read(fd, pool, sizeof(pool)) != sizeof(pool)) {
+			if (fd >= 0) close(fd);
+			_log_err(LOG_CRIT, "failed to read /dev/urandom");
+			return PAM_ABORT;
+		}
+		close(fd);
+
+		salt = crypt_gensalt(prefix, count, pool, sizeof(pool));
+		memset(pool, 0, sizeof(pool));
+		if (!salt) {
+			_log_err(LOG_CRIT, "failed to generate salt");
+			return PAM_ABORT;
+		}
+
+		pw = pass_new;
+		pass_new = _pam_md(pw, salt);
+		_pam_overwrite(pw);	/* XXX: this changes the PAM item */
+		_pam_overwrite(salt);
+
+		if (pass_new && strchr(pass_new, ':'))
+			pass_new = _pam_delete(pass_new);
+
+		if (!pass_new) {
+			_log_err(LOG_CRIT, "failed to hash password");
+			return PAM_ABORT;
+		}
 	}
 
 	D(("password processed"));
diff -uprk.orig Linux-PAM-0.80.orig/modules/pam_pwdb/pwdb_chkpwd.c Linux-PAM-0.80/modules/pam_pwdb/pwdb_chkpwd.c
--- Linux-PAM-0.80.orig/modules/pam_pwdb/pwdb_chkpwd.c	2005-08-23 10:18:58 +0000
+++ Linux-PAM-0.80/modules/pam_pwdb/pwdb_chkpwd.c	2005-08-23 10:21:57 +0000
@@ -113,7 +113,7 @@ int main(int argc, char **argv)
 	fprintf(stderr,
 		"This program is not designed for running in this way\n"
 		"-- the system administrator has been informed\n");
-	exit(UNIX_FAILED);
+	exit(1);
     }
 
     /*
@@ -132,7 +132,7 @@ int main(int argc, char **argv)
     if (retval != PWDB_SUCCESS) {
 	_log_err(LOG_ALERT, "could not identify user");
 	while (pwdb_end() != PWDB_SUCCESS);
-	exit(UNIX_FAILED);
+	exit(1);
     }
     if (argc == 2) {
 	if (pwdb_get_entry(pw, "user", &pwe) == PWDB_SUCCESS) {
@@ -148,7 +148,7 @@ int main(int argc, char **argv)
     }
 
     /* read the password from stdin (a pipe from the pam_pwdb module) */
-
+    /* XXX: should loop */
     npass = read(STDIN_FILENO, pass, MAXPASS);
 
     if (npass < 0) {                             /* is it a valid password? */
@@ -182,7 +182,7 @@ int main(int argc, char **argv)
     
     /* return pass or fail */
 
-    exit(retval);
+    exit(retval == 0 ? 0 : 1);
 }
 
 /*
diff -uprk.orig Linux-PAM-0.80.orig/modules/pam_pwdb/support.-c Linux-PAM-0.80/modules/pam_pwdb/support.-c
--- Linux-PAM-0.80.orig/modules/pam_pwdb/support.-c	2004-09-15 12:06:17 +0000
+++ Linux-PAM-0.80/modules/pam_pwdb/support.-c	2005-08-23 13:21:29 +0000
@@ -4,6 +4,8 @@
  * Copyright information at end of file.
  */
 
+#include <security/_pam_modutil.h>
+
 /*
  * here is the string to inform the user that the new passwords they
  * typed were not the same.
@@ -115,6 +117,10 @@ static const UNIX_Ctrls unix_args[UNIX_C
 
 #define UNIX_DEFAULTS  (unix_args[UNIX__NONULL].flag)
 
+DEFINE_PAM_LOG("pam_pwdb")
+#define _log_err _pam_log
+
+#if 0
 /* syslogging function for errors and other information */
 
 static void _log_err(int err, const char *format, ...)
@@ -127,6 +133,7 @@ static void _log_err(int err, const char
     va_end(args);
     closelog();
 }
+#endif
 
 /* this is a front-end for module-application conversations */
 
@@ -162,6 +169,7 @@ static int converse(pam_handle_t *pamh, 
     return retval;                  /* propagate error status */
 }
 
+#if 0
 static int make_remark(pam_handle_t *pamh, unsigned int ctrl
 		       , int type, const char *text)
 {
@@ -184,6 +192,7 @@ static int make_remark(pam_handle_t *pam
     }
     return retval;
 }
+#endif
 
 /*
  * set the control flags for the UNIX module.
@@ -230,7 +239,12 @@ static int set_ctrl(int flags, int argc,
 	}
 
 	if ( j >= UNIX_CTRLS_ ) {
-	    _log_err(LOG_ERR, "unrecognized option [%s]",*argv);
+	    if (strncmp(*argv, "prefix=", 7) && strncmp(*argv, "count=", 6))
+		_log_err(LOG_ERR, "unrecognized option [%s]",*argv);
+	} else
+	if (j == UNIX_BIGCRYPT) {
+	    _log_err(LOG_ERR,
+		"bigcrypt shouldn't be used for new passwords");
 	} else {
 	    ctrl &= unix_args[j].mask;    /* for turning things off */
 	    ctrl |= unix_args[j].flag;    /* for turning things on  */
@@ -383,8 +397,8 @@ static int pwdb_run_helper_binary(pam_ha
 	while (pwdb_end() == PWDB_SUCCESS);
 
 	/* reopen stdin as pipe */
-	close(fds[1]);
-	dup2(fds[0], STDIN_FILENO);
+	if (close(fds[1])) exit(1);
+	if (dup2(fds[0], STDIN_FILENO) != STDIN_FILENO) exit(1);
 
 	/* exec binary helper */
 	args[0] = x_strdup(CHKPWD_HELPER);
@@ -394,20 +408,26 @@ static int pwdb_run_helper_binary(pam_ha
 
 	/* should not get here: exit with error */
 	D(("helper binary is not available"));
-	exit(PWDB_SUCCESS+1);
+	exit(1);
     } else if (child > 0) {
 	/* wait for child */
+	int fail = 0, status;
 	if (passwd != NULL) {            /* send the password to the child */
-	    write(fds[1], passwd, strlen(passwd)+1);
+	    if (write(fds[1], passwd, strlen(passwd) + 1) != strlen(passwd) + 1)
+		fail = 1;
 	    passwd = NULL;
 	} else {
-	    write(fds[1], "", 1);                        /* blank password */
+	    /* blank password */
+	    if (write(fds[1], "", 1) != 1)
+		fail = 1;
 	}
 	close(fds[0]);   /* we close this after the write because we want
 			    to avoid a possible SIGPIPE. */
 	close(fds[1]);
-	(void) waitpid(child, &retval, 0);  /* wait for helper to complete */
-	retval = (retval == PWDB_SUCCESS) ? PAM_SUCCESS:PAM_AUTH_ERR;
+	(void) waitpid(child, &status, 0); /* wait for helper to complete */
+	if (!WIFEXITED(status) || WEXITSTATUS(status) != 0)
+	    fail = 1;
+	retval = fail ? PAM_AUTH_ERR : PAM_SUCCESS;
     } else {
 	D(("fork failed"));
 	retval = PAM_AUTH_ERR;
@@ -421,11 +441,14 @@ static int pwdb_run_helper_binary(pam_ha
     return retval;
 }
 
+#include <pwd.h>
+
 static int _unix_verify_password(pam_handle_t *pamh, const char *name,
 				 const char *p, unsigned int ctrl)
 {
     const struct pwdb *pw=NULL;
     const struct pwdb_entry *pwe=NULL;
+    const struct passwd *libc_pw;
 
     const char *salt;
     char *pp;
@@ -485,7 +508,9 @@ static int _unix_verify_password(pam_han
 
     retval = pwdb_get_entry(pw, "passwd", &pwe);
     if (retval != PWDB_SUCCESS) {
-	if (geteuid()) {
+	if ((libc_pw = getpwnam(name)))
+		memset(libc_pw->pw_passwd, 0, strlen(libc_pw->pw_passwd));
+	if (libc_pw && geteuid() != 0 && getuid() == libc_pw->pw_uid) {
 	    /* we are not root perhaps this is the reason? Run helper */
 	    D(("running helper binary"));
 	    retval = pwdb_run_helper_binary(pamh, p, ctrl, name);
@@ -542,13 +567,17 @@ static int _unix_verify_password(pam_han
 	if ( strcmp( pp, salt ) == 0 ) {
 	    verify_result = PAM_SUCCESS;
 	} else {
+#if 0
 	    _pam_delete(pp);
 	    pp = _pam_md_compat(p, salt);
 	    if ( strcmp( pp, salt ) == 0 ) {
 		verify_result = PAM_SUCCESS;
 	    } else {
+#endif
 		verify_result = PAM_AUTH_ERR;
+#if 0
 	    }
+#endif
 	}
 
         p = NULL;                                /* no longer needed here */
@@ -826,8 +855,8 @@ static int _unix_read_password( pam_hand
 			    || strcmp(token,resp[i-1].resp)) {
 			    token = _pam_delete(token); /* mistyped */
 			    retval = PAM_AUTHTOK_RECOVER_ERR;
-			    make_remark(pamh, ctrl
-					, PAM_ERROR_MSG, MISTYPED_PASS);
+			    if (off(UNIX__QUIET, ctrl))
+				_pammodutil_error(pamh, "%s", MISTYPED_PASS);
 			}
 		    }
 
@@ -911,8 +940,9 @@ static int _pam_unix_approve_pass(pam_ha
 	  if ( on(UNIX_DEBUG, ctrl) ) {
 	       _log_err(LOG_DEBUG, "bad authentication token");
 	  }
-	  make_remark(pamh, ctrl, PAM_ERROR_MSG, pass_new == NULL ?
-		       "No password supplied":"Password unchanged" );
+	  if (off(UNIX__QUIET, ctrl))
+	       _pammodutil_error(pamh, "%s", pass_new == NULL ?
+		    "No password supplied" : "Password unchanged" );
 	  return PAM_AUTHTOK_ERR;
      }
 
