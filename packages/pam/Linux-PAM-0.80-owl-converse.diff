Introduce _pammodutil_error, _pammodutil_info and _pammodutil_prompt.
Cleanup conversation wrappers.

diff -upk.orig Linux-PAM-0.80.orig/libpam/pam_item.c Linux-PAM-0.80/libpam/pam_item.c
--- Linux-PAM-0.80.orig/libpam/pam_item.c	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/libpam/pam_item.c	2005-08-17 16:21:32 +0000
@@ -330,7 +330,7 @@ int pam_get_user(pam_handle_t *pamh, con
     } else
 	pamh->former.fail_user = retval;
 
-    if (resp) {
+    if (retval == PAM_SUCCESS && resp) {
 	/*
 	 * note 'resp' is allocated by the application and is
          * correctly free()'d here
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_debug/pam_debug.c Linux-PAM-0.80/modules/pam_debug/pam_debug.c
--- Linux-PAM-0.80.orig/modules/pam_debug/pam_debug.c	2005-06-09 17:29:18 +0000
+++ Linux-PAM-0.80/modules/pam_debug/pam_debug.c	2005-08-17 16:21:11 +0000
@@ -28,41 +28,13 @@
 
 #include <security/pam_modules.h>
 #include <security/_pam_macros.h>
+#include <security/_pam_modutil.h>
 
 #define _PAM_ACTION_UNDEF (-10)
 #include "../../libpam/pam_tokens.h"
 
 /* --- authentication management functions --- */
 
-static int state(pam_handle_t *pamh, const char *text)
-{
-    int retval;
-    const void *void_conv;
-    const struct pam_conv *conv;
-    struct pam_message msg[1], *mesg[1];
-    struct pam_response *response;
-
-    retval = pam_get_item(pamh, PAM_CONV, &void_conv);
-    conv = (const struct pam_conv *) void_conv;
-
-    if ((retval != PAM_SUCCESS) || (conv == NULL)) {
-	D(("failed to obtain conversation function"));
-	return PAM_ABORT;
-    }
-
-    msg[0].msg_style = PAM_TEXT_INFO;
-    msg[0].msg = text;
-    mesg[0] = &msg[0];
-
-    retval = conv->conv(1, (const struct pam_message **) mesg,
-			&response, conv->appdata_ptr);
-    if (retval != PAM_SUCCESS) {
-	D(("conversation failed"));
-    }
-
-    return retval;
-}
-
 static int parse_args(int retval, const char *event,
 		      pam_handle_t *pamh, int argc, const char **argv)
 {
@@ -77,7 +49,7 @@ static int parse_args(int retval, const 
 	    for (j=0; j<_PAM_RETURN_VALUES; ++j) {
 		if (!strcmp(return_string, _pam_token_returns[j])) {
 		    retval = j;
-		    state(pamh, argv[i]);
+		    _pammodutil_info(pamh, "%s", argv[i]);
 		    break;
 		}
 	    }
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_ftp/pam_ftp.c Linux-PAM-0.80/modules/pam_ftp/pam_ftp.c
--- Linux-PAM-0.80.orig/modules/pam_ftp/pam_ftp.c	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/modules/pam_ftp/pam_ftp.c	2005-08-17 16:21:11 +0000
@@ -40,42 +40,6 @@
 
 DEFINE_PAM_LOG("pam_ftp")
 
-static int converse(pam_handle_t *pamh, int nargs
-		    , struct pam_message **message
-		    , struct pam_response **response)
-{
-    int retval;
-    const void *void_conv;
-    const struct pam_conv *conv;
-
-    D(("begin to converse\n"));
-
-    retval = pam_get_item(pamh, PAM_CONV, &void_conv);
-    conv = (const struct pam_conv *)void_conv;
-    if ( retval == PAM_SUCCESS && conv ) {
-
-	retval = conv->conv(nargs, ( const struct pam_message ** ) message
-			    , response, conv->appdata_ptr);
-
-	D(("returned from application's conversation function\n"));
-
-	if ((retval != PAM_SUCCESS) && (retval != PAM_CONV_AGAIN)) {
-	    _pam_log(LOG_DEBUG, "conversation failure [%s]"
-		     , pam_strerror(pamh, retval));
-	}
-
-    } else {
-	_pam_log(LOG_ERR, "couldn't obtain coversation function [%s]"
-		 , pam_strerror(pamh, retval));
-	if (retval == PAM_SUCCESS)
-	    retval = PAM_BAD_ITEM;  /* conv was NULL */
-    }
-
-    D(("ready to return from module conversation\n"));
-
-    return retval;                  /* propagate error status */
-}
-
 /* argument parsing */
 
 #define PAM_DEBUG_ARG       01
@@ -190,37 +154,19 @@ int pam_sm_authenticate(pam_handle_t *pa
      */
 
     {
-	struct pam_message msg[1], *mesg[1];
 	struct pam_response *resp=NULL;
 	const char *token;
-	char *prompt=NULL;
-	int i=0;
-
-	if (!anon) {
-	    prompt = malloc(strlen(PLEASE_ENTER_PASSWORD) + strlen(user));
-	    if (prompt == NULL) {
-		D(("out of memory!?"));
-		return PAM_BUF_ERR;
-	    } else {
-		sprintf(prompt, PLEASE_ENTER_PASSWORD, user);
-		msg[i].msg = prompt;
-	    }
-	} else {
-	    msg[i].msg = GUEST_LOGIN_PROMPT;
-	}
 
-	msg[i].msg_style = PAM_PROMPT_ECHO_OFF;
-	mesg[i] = &msg[i];
-
-	retval = converse(pamh, ++i, mesg, &resp);
-	if (prompt) {
-	    _pam_overwrite(prompt);
-	    _pam_drop(prompt);
-	}
+	if (anon)
+		retval = _pammodutil_prompt(pamh, PAM_PROMPT_ECHO_OFF, &resp,
+					    "%s", GUEST_LOGIN_PROMPT);
+	else
+		retval = _pammodutil_prompt(pamh, PAM_PROMPT_ECHO_OFF, &resp,
+					    PLEASE_ENTER_PASSWORD, user);
 
 	if (retval != PAM_SUCCESS) {
 	    if (resp != NULL)
-		_pam_drop_reply(resp,i);
+		_pam_drop_reply(resp, 1);
 	    return ((retval == PAM_CONV_AGAIN)
 		    ? PAM_INCOMPLETE:PAM_AUTHINFO_UNAVAIL);
 	}
@@ -257,7 +203,7 @@ int pam_sm_authenticate(pam_handle_t *pa
 	}
 
 	if (resp) {                                      /* clean up */
-	    _pam_drop_reply(resp, i);
+	    _pam_drop_reply(resp, 1);
 	}
 
 	/* success or failure */
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_lastlog/pam_lastlog.c Linux-PAM-0.80/modules/pam_lastlog/pam_lastlog.c
--- Linux-PAM-0.80.orig/modules/pam_lastlog/pam_lastlog.c	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/modules/pam_lastlog/pam_lastlog.c	2005-08-17 16:21:11 +0000
@@ -130,71 +130,6 @@ static int _pam_parse(int flags, int arg
     return ctrl;
 }
 
-/* a front end for conversations */
-
-static int converse(pam_handle_t *pamh, int ctrl, int nargs
-		    , struct pam_message **message
-		    , struct pam_response **response)
-{
-    int retval;
-    const void *void_conv;
-    const struct pam_conv *conv;
-
-    D(("begin to converse"));
-
-    retval = pam_get_item( pamh, PAM_CONV, &void_conv ) ;
-    conv = (const struct pam_conv *)void_conv;
-    if ( retval == PAM_SUCCESS && conv) {
-
-	retval = conv->conv(nargs, ( const struct pam_message ** ) message
-			    , response, conv->appdata_ptr);
-
-	D(("returned from application's conversation function"));
-
-	if (retval != PAM_SUCCESS && (ctrl & LASTLOG_DEBUG) ) {
-	    _pam_log(LOG_DEBUG, "conversation failure [%s]"
-		     , pam_strerror(pamh, retval));
-	}
-
-    } else {
-	_pam_log(LOG_ERR, "couldn't obtain coversation function [%s]"
-		 , pam_strerror(pamh, retval));
-	if (retval == PAM_SUCCESS)
-		retval = PAM_BAD_ITEM; /* conv was NULL */
-    }
-
-    D(("ready to return from module conversation"));
-
-    return retval;                  /* propagate error status */
-}
-
-static int make_remark(pam_handle_t *pamh, int ctrl, const char *remark)
-{
-    int retval;
-
-    if (!(ctrl & LASTLOG_QUIET)) {
-	struct pam_message msg[1], *mesg[1];
-	struct pam_response *resp=NULL;
-
-	mesg[0] = &msg[0];
-	msg[0].msg_style = PAM_TEXT_INFO;
-	msg[0].msg = remark;
-
-	retval = converse(pamh, ctrl, 1, mesg, &resp);
-
-	msg[0].msg = NULL;
-	if (resp) {
-	    _pam_drop_reply(resp, 1);
-	}
-    } else {
-	D(("keeping quiet"));
-	retval = PAM_SUCCESS;
-    }
-
-    D(("returning %s", pam_strerror(pamh, retval)));
-    return retval;
-}
-
 /*
  * Values for the announce flags..
  */
@@ -305,7 +240,7 @@ static int last_login_date(pam_handle_t 
 		    /* display requested combo */
 		    sprintf(remark+at, "%s", LASTLOG_TAIL);
 
-		    retval = make_remark(pamh, announce, remark);
+		    retval = _pammodutil_info(pamh, "%s", remark);
 
 		    /* free all the stuff malloced */
 		    _pam_overwrite(remark);
@@ -313,7 +248,7 @@ static int last_login_date(pam_handle_t 
 		}
 	    } else if ((!last_login.ll_time) && (announce & LASTLOG_NEVER)) {
 		D(("this is the first time this user has logged in"));
-		retval = make_remark(pamh, announce, LASTLOG_NEVER_WELCOME);
+		retval = _pammodutil_info(pamh, "%s", LASTLOG_NEVER_WELCOME);
 	    } else
 		retval = PAM_SUCCESS;
 	} else {
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_limits/pam_limits.c Linux-PAM-0.80/modules/pam_limits/pam_limits.c
--- Linux-PAM-0.80.orig/modules/pam_limits/pam_limits.c	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/modules/pam_limits/pam_limits.c	2005-08-17 16:21:11 +0000
@@ -94,53 +94,6 @@ struct pam_limit_s {
 #include <security/_pam_macros.h>
 #include <security/_pam_modutil.h>
 
-/* A generic interface to sending messages, originally from pam_passwdqc */
-static int converse(pam_handle_t *pamh, int style, const char *text,
-    struct pam_response **resp)
-{
-	const void *void_conv = NULL;
-	const struct pam_conv *conv;
-	struct pam_message msg, *pmsg;
-	int status;
-
-	status = pam_get_item(pamh, PAM_CONV, &void_conv);
-	conv = void_conv;
-	if (status != PAM_SUCCESS)
-		return status;
-
-	pmsg = &msg;
-	msg.msg_style = style;
-	msg.msg = text;
-
-	*resp = NULL;
-	return conv->conv(1, (const struct pam_message **)&pmsg, resp,
-	    conv->appdata_ptr);
-}
-
-static int PAM_MODUTIL_FORMAT((printf, 3, 4)) PAM_MODUTIL_NONNULL((3))
-say(pam_handle_t *pamh, int style, const char *format, ...)
-{
-	va_list args;
-	char buffer[0x800];
-	int needed;
-	struct pam_response *resp;
-	int status;
-
-	va_start(args, format);
-	needed = vsnprintf(buffer, sizeof(buffer), format, args);
-	va_end(args);
-
-	if ((unsigned int)needed < sizeof(buffer)) {
-		status = converse(pamh, style, buffer, &resp);
-		_pam_overwrite(buffer);
-	} else {
-		status = PAM_ABORT;
-		memset(buffer, 0, sizeof(buffer));
-	}
-
-	return status;
-}
-
 DEFINE_PAM_LOG("pam_limits")
 
 /* argument parsing */
@@ -695,7 +648,7 @@ PAM_EXTERN int pam_sm_open_session(pam_h
     }
     retval = setup_limits(pamh, pwd->pw_name, pwd->pw_uid, ctrl, &pl);
     if (retval & LOGIN_ERR)
-	say(pamh, PAM_ERROR_MSG, "Too many logins for '%s'.", pwd->pw_name);
+	_pammodutil_error(pamh, "Too many logins for '%s'.", pwd->pw_name);
     if (retval != LIMITED_OK) {
         return PAM_PERM_DENIED;
     }
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_mail/pam_mail.c Linux-PAM-0.80/modules/pam_mail/pam_mail.c
--- Linux-PAM-0.80.orig/modules/pam_mail/pam_mail.c	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/modules/pam_mail/pam_mail.c	2005-08-17 16:21:11 +0000
@@ -121,44 +121,6 @@ static int _pam_parse(int flags, int arg
     return ctrl;
 }
 
-/* a front end for conversations */
-
-static int converse(pam_handle_t *pamh, int ctrl, int nargs
-		    , struct pam_message **message
-		    , struct pam_response **response)
-{
-    int retval;
-    const void *void_conv;
-    const struct pam_conv *conv;
-
-    D(("begin to converse"));
-
-    retval = pam_get_item( pamh, PAM_CONV, &void_conv ) ;
-    conv = (const struct pam_conv *) void_conv;
-    if ( retval == PAM_SUCCESS && conv ) {
-
-	retval = conv->conv(nargs, ( const struct pam_message ** ) message
-			    , response, conv->appdata_ptr);
-
-	D(("returned from application's conversation function"));
-
-	if (retval != PAM_SUCCESS && (PAM_DEBUG_ARG & ctrl) ) {
-	    _pam_log(LOG_DEBUG, "conversation failure [%s]"
-		     , pam_strerror(pamh, retval));
-	}
-
-    } else {
-	_pam_log(LOG_ERR, "couldn't obtain coversation function [%s]"
-		 , pam_strerror(pamh, retval));
-	if (retval == PAM_SUCCESS)
-	  retval = PAM_BAD_ITEM; /* conv was NULL */
-    }
-
-    D(("ready to return from module conversation"));
-
-    return retval;                  /* propagate error status */
-}
-
 static int get_folder(pam_handle_t *pamh, int ctrl,
 		      char **path_mail, char **folder_p, int hashcount)
 {
@@ -314,40 +276,13 @@ static int report_mail(pam_handle_t *pam
     int retval;
 
     if (!(ctrl & PAM_MAIL_SILENT) || ((ctrl & PAM_QUIET_MAIL) && strcmp(type, "new"))) {
-	char *remark;
-
-	if (ctrl & PAM_STANDARD_MAIL)
-	    if (!strcmp(type, "no"))
-		remark = malloc(strlen(NO_MAIL_STANDARD_FORMAT)+1);
-	    else
-		remark = malloc(strlen(YOUR_MAIL_STANDARD_FORMAT)+strlen(type)+1);
-	else
-	    remark = malloc(strlen(YOUR_MAIL_VERBOSE_FORMAT)+strlen(type)+strlen(folder)+1);
-	if (remark == NULL) {
-	    retval = PAM_BUF_ERR;
-	} else {
-	    struct pam_message msg[1], *mesg[1];
-	    struct pam_response *resp=NULL;
-
 	    if (ctrl & PAM_STANDARD_MAIL)
 		if (!strcmp(type, "no"))
-		    sprintf(remark, NO_MAIL_STANDARD_FORMAT);
+		    retval = _pammodutil_info(pamh, NO_MAIL_STANDARD_FORMAT);
 		else
-		    sprintf(remark, YOUR_MAIL_STANDARD_FORMAT, type);
+		    retval = _pammodutil_info(pamh, YOUR_MAIL_STANDARD_FORMAT, type);
 	    else
-		sprintf(remark, YOUR_MAIL_VERBOSE_FORMAT, type, folder);
-
-	    mesg[0] = &msg[0];
-	    msg[0].msg_style = PAM_TEXT_INFO;
-	    msg[0].msg = remark;
-
-	    retval = converse(pamh, ctrl, 1, mesg, &resp);
-
-	    _pam_overwrite(remark);
-	    _pam_drop(remark);
-	    if (resp)
-		_pam_drop_reply(resp, 1);
-	}
+		retval = _pammodutil_info(pamh, YOUR_MAIL_VERBOSE_FORMAT, type, folder);
     } else {
 	D(("keeping quiet"));
 	retval = PAM_SUCCESS;
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_mkhomedir/pam_mkhomedir.c Linux-PAM-0.80/modules/pam_mkhomedir/pam_mkhomedir.c
--- Linux-PAM-0.80.orig/modules/pam_mkhomedir/pam_mkhomedir.c	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/modules/pam_mkhomedir/pam_mkhomedir.c	2005-08-17 16:21:11 +0000
@@ -92,82 +92,6 @@ _pam_parse (int flags, int argc, const c
    return ctrl;
 }
 
-/* This common function is used to send a message to the applications
-   conversion function. Our only use is to ask the application to print
-   an informative message that we are creating a home directory */
-static int converse(pam_handle_t * pamh, int ctrl, int nargs
-		    ,struct pam_message **message
-		    ,struct pam_response **response)
-{
-   int retval;
-   const void *void_conv;
-   const struct pam_conv *conv;
-
-   D(("begin to converse"));
-
-   retval = pam_get_item(pamh, PAM_CONV, &void_conv);
-   conv = (const struct pam_conv *)void_conv;
-   if (retval == PAM_SUCCESS && conv)
-   {
-
-      retval = conv->conv(nargs, (const struct pam_message **) message
-			  ,response, conv->appdata_ptr);
-
-      D(("returned from application's conversation function"));
-
-      if (retval != PAM_SUCCESS && (ctrl & MKHOMEDIR_DEBUG))
-      {
-	 _pam_log(LOG_DEBUG, "conversation failure [%s]"
-		  ,pam_strerror(pamh, retval));
-      }
-
-   }
-   else
-   {
-      _pam_log(LOG_ERR, "couldn't obtain coversation function [%s]"
-	       ,pam_strerror(pamh, retval));
-     if (retval == PAM_SUCCESS)
-         retval = PAM_BAD_ITEM; /* conv was NULL */
-   }
-
-   D(("ready to return from module conversation"));
-
-   return retval;		/* propagate error status */
-}
-
-/* Ask the application to display a short text string for us. */
-static int
-make_remark (pam_handle_t *pamh, int ctrl, const char *remark)
-{
-   int retval;
-
-   if ((ctrl & MKHOMEDIR_QUIET) != MKHOMEDIR_QUIET)
-   {
-      struct pam_message msg[1], *mesg[1];
-      struct pam_response *resp = NULL;
-
-      mesg[0] = &msg[0];
-      msg[0].msg_style = PAM_TEXT_INFO;
-      msg[0].msg = remark;
-
-      retval = converse(pamh, ctrl, 1, mesg, &resp);
-
-      msg[0].msg = NULL;
-      if (resp)
-      {
-	 _pam_drop_reply(resp, 1);
-      }
-   }
-   else
-   {
-      D(("keeping quiet"));
-      retval = PAM_SUCCESS;
-   }
-
-   D(("returning %s", pam_strerror(pamh, retval)));
-   return retval;
-}
-
 static int
 rec_mkdir (const char *dir, mode_t mode)
 {
@@ -212,10 +136,8 @@ create_homedir (pam_handle_t * pamh, int
    int retval = PAM_AUTH_ERR;
 
    /* Mention what is happening, if the notification fails that is OK */
-   if (snprintf(remark,sizeof(remark),"Creating directory '%s'.", dest) == -1)
-      return PAM_PERM_DENIED;
-
-   make_remark(pamh, ctrl, remark);
+   if ((ctrl & MKHOMEDIR_QUIET) != MKHOMEDIR_QUIET)
+      (void) _pammodutil_info(pamh, "Creating directory '%s'.", dest);
 
    /* Create the new directory */
    if (rec_mkdir (dest,0755) != 0)
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_motd/pam_motd.c Linux-PAM-0.80/modules/pam_motd/pam_motd.c
--- Linux-PAM-0.80.orig/modules/pam_motd/pam_motd.c	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/modules/pam_motd/pam_motd.c	2005-08-17 16:21:11 +0000
@@ -74,17 +74,13 @@ int pam_sm_open_session(pam_handle_t *pa
 	motd_path = default_motd;
 
     while ((fd = open(motd_path, O_RDONLY, 0)) >= 0) {
-	const void *void_conv = NULL;
-	struct pam_message message;
-	struct pam_message *pmessage = &message;
-	struct pam_response *resp = NULL;
 	struct stat st;
 
 	/* fill in message buffer with contents of motd */
 	if ((fstat(fd, &st) < 0) || !st.st_size || st.st_size > 0x10000)
 	    break;
 
-	if (!(message.msg = mtmp = malloc(st.st_size+1)))
+	if (!(mtmp = malloc(st.st_size+1)))
 	    break;
 
 	if (_pammodutil_read(fd, mtmp, st.st_size) != st.st_size)
@@ -95,17 +91,7 @@ int pam_sm_open_session(pam_handle_t *pa
 	else
 	    mtmp[st.st_size] = '\0';
 
-	message.msg_style = PAM_TEXT_INFO;
-
-	/* Use conversation function to give user contents of motd */
-	if (pam_get_item(pamh, PAM_CONV, &void_conv) == PAM_SUCCESS
-	    && void_conv) {
-	    const struct pam_conv *conversation = void_conv;
-	    conversation->conv(1, (const struct pam_message **)&pmessage,
-			       &resp, conversation->appdata_ptr);
-	    if (resp)
-		_pam_drop_reply(resp, 1);
-	}
+	retval = _pammodutil_info(pamh, "%s", mtmp);
 
 	break;
     }
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_nologin/pam_nologin.c Linux-PAM-0.80/modules/pam_nologin/pam_nologin.c
--- Linux-PAM-0.80.orig/modules/pam_nologin/pam_nologin.c	2005-06-09 17:29:19 +0000
+++ Linux-PAM-0.80/modules/pam_nologin/pam_nologin.c	2005-08-17 16:21:11 +0000
@@ -78,12 +78,9 @@ static int perform_check(pam_handle_t *p
 
     if ((fd = open(opts->nologin_file, O_RDONLY, 0)) >= 0) {
 
+	int msg_style;
 	char *mtmp=NULL;
 	struct passwd *user_pwd;
-	const void *void_conv;
-	const struct pam_conv *conversation;
-	struct pam_message message;
-	struct pam_message *pmessage = &message;
 	struct pam_response *resp = NULL;
 	struct stat st;
 
@@ -91,18 +88,16 @@ static int perform_check(pam_handle_t *p
 	if (user_pwd == NULL) {
 
 	    retval = PAM_USER_UNKNOWN;
-	    message.msg_style = PAM_ERROR_MSG;
+	    msg_style = PAM_ERROR_MSG;
 
 	} else if (user_pwd->pw_uid) {
 
 	    retval = PAM_AUTH_ERR;
-	    message.msg_style = PAM_ERROR_MSG;
+	    msg_style = PAM_ERROR_MSG;
 
 	} else {
-
 	    /* root can still log in; lusers cannot */
-	    message.msg_style = PAM_TEXT_INFO;
-
+	    msg_style = PAM_TEXT_INFO;
 	}
 
 	/* fill in message buffer with contents of /etc/nologin */
@@ -111,8 +106,8 @@ static int perform_check(pam_handle_t *p
 	    goto clean_up_fd;
 	}
 
-	message.msg = mtmp = malloc(st.st_size+1);
-	if (!message.msg) {
+	mtmp = malloc(st.st_size+1);
+	if (!mtmp) {
 	    /* if malloc failed... */
 	    retval = PAM_BUF_ERR;
 	    goto clean_up_fd;
@@ -121,22 +116,9 @@ static int perform_check(pam_handle_t *p
 	if (_pammodutil_read(fd, mtmp, st.st_size) == st.st_size) {
 		mtmp[st.st_size] = '\000';
 
-		/*
-		 * Use conversation function to give user contents
-		 * of /etc/nologin
-		 */
-
-		if (pam_get_item(pamh, PAM_CONV, &void_conv)
-		    == PAM_SUCCESS && void_conv &&
-		    ((const struct pam_conv *)void_conv)->conv) {
-		        conversation = void_conv;
-			(void) conversation->conv(1,
-				(const struct pam_message **)&pmessage,
-				&resp, conversation->appdata_ptr);
-
-			if (resp) {
-			    _pam_drop_reply(resp, 1);
-			}
+		if ((_pammodutil_prompt(pamh, msg_style, &resp, "%s", mtmp)
+		     == PAM_SUCCESS) && resp) {
+			_pam_drop_reply(resp, 1);
 		}
 	}
 	else
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_userdb/conv.c Linux-PAM-0.80/modules/pam_userdb/conv.c
--- Linux-PAM-0.80.orig/modules/pam_userdb/conv.c	2005-06-09 08:22:25 +0000
+++ Linux-PAM-0.80/modules/pam_userdb/conv.c	2005-08-17 16:21:11 +0000
@@ -10,31 +10,10 @@
 
 #include <security/pam_modules.h>
 #include <security/_pam_macros.h>
+#include <security/_pam_modutil.h>
 
 #include "pam_userdb.h"
 
-/*
- * dummy conversation function sending exactly one prompt
- * and expecting exactly one response from the other party
- */
-static int converse(pam_handle_t *pamh,
-		    struct pam_message **message,
-		    struct pam_response **response)
-{
-    int retval;
-    const void* void_conv;
-    const struct pam_conv *conv;
-
-    retval = pam_get_item(pamh, PAM_CONV,  &void_conv ) ;
-    conv = void_conv;
-    if (retval == PAM_SUCCESS)
-	retval = conv->conv(1, (const struct pam_message **)message,
-			    response, conv->appdata_ptr);
-
-    return retval; /* propagate error status */
-}
-
-
 static char *_pam_delete(register char *xx)
 {
     _pam_overwrite(xx);
@@ -47,27 +26,22 @@ static char *_pam_delete(register char *
  */
 int conversation(pam_handle_t *pamh)
 {
-    struct pam_message msg[2],*pmsg[2];
-    struct pam_response *resp;
+    struct pam_response *resp = NULL;
     int retval;
-    char * token = NULL;
 
-    pmsg[0] = &msg[0];
-    msg[0].msg_style = PAM_PROMPT_ECHO_OFF;
-    msg[0].msg = "Password: ";
-
-    /* so call the conversation expecting i responses */
-    resp = NULL;
-    retval = converse(pamh, pmsg, &resp);
+    retval = _pammodutil_prompt(pamh, PAM_PROMPT_ECHO_OFF, &resp, "Password: ");
+
+    if (retval != PAM_SUCCESS)
+	return retval;
 
     if (resp != NULL) {
-	const void *item;
 	/* interpret the response */
-	if (retval == PAM_SUCCESS) {     /* a good conversation */
-	    token = x_strdup(resp[0].resp);
-	    if (token == NULL) {
-		return PAM_AUTHTOK_RECOVER_ERR;
-	    }
+	const void *item;
+	char *token = x_strdup(resp[0].resp);
+
+	_pam_drop_reply(resp, 1);
+	if (token == NULL) {
+	    return PAM_AUTHTOK_RECOVER_ERR;
 	}
 
 	/* set the auth token */
@@ -78,11 +52,8 @@ int conversation(pam_handle_t *pamh)
 	     != PAM_SUCCESS ) {
 	    return retval;
 	}
-
-	_pam_drop_reply(resp, 1);
     } else {
-	retval = (retval == PAM_SUCCESS)
-	    ? PAM_AUTHTOK_RECOVER_ERR:retval ;
+	retval = PAM_AUTHTOK_RECOVER_ERR;
     }
 
     return retval;
diff -upk.orig Linux-PAM-0.80.orig/modules/pammodutil/Makefile Linux-PAM-0.80/modules/pammodutil/Makefile
--- Linux-PAM-0.80.orig/modules/pammodutil/Makefile	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/modules/pammodutil/Makefile	2005-08-17 16:21:11 +0000
@@ -18,7 +18,7 @@ CFLAGS += $(PIC) $(STATIC) $(MOREFLAGS) 
   -DLIBPAM_VERSION_MINOR=$(MINOR_REL)
 
 # all the object files we care about
-LIBOBJECTS = modutil_cleanup.o modutil_getpwnam.o modutil_getpwuid.o \
+LIBOBJECTS = modutil_cleanup.o modutil_conv.o modutil_getpwnam.o modutil_getpwuid.o \
 	modutil_getspnam.o modutil_getgrnam.o modutil_getgrgid.o \
 	modutil_ingroup.o modutil_getlogin.o modutil_ioloop.o modutil_log.o
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pammodutil/include/security/_pam_modutil.h Linux-PAM-0.80/modules/pammodutil/include/security/_pam_modutil.h
--- Linux-PAM-0.80.orig/modules/pammodutil/include/security/_pam_modutil.h	2005-08-17 14:23:29 +0000
+++ Linux-PAM-0.80/modules/pammodutil/include/security/_pam_modutil.h	2005-08-17 16:21:11 +0000
@@ -83,6 +83,16 @@ extern int _pammodutil_read(int fd, char
 
 extern int _pammodutil_write(int fd, const char *buffer, int count);
 
+extern int _pammodutil_error(pam_handle_t *pamh, const char *fmt, ...)
+	PAM_MODUTIL_FORMAT((printf, 2, 3)) PAM_MODUTIL_NONNULL((2));
+
+extern int _pammodutil_info(pam_handle_t *pamh, const char *fmt, ...)
+	PAM_MODUTIL_FORMAT((printf, 2, 3)) PAM_MODUTIL_NONNULL((2));
+
+extern int _pammodutil_prompt(pam_handle_t *pamh, int style,
+		      struct pam_response **response, const char *fmt, ...)
+	PAM_MODUTIL_FORMAT((printf, 4, 5)) PAM_MODUTIL_NONNULL((4));
+
 extern void _pammodutil_vlog(const char *module_name, int priority,
 			     const char *format, va_list args)
 	PAM_MODUTIL_FORMAT((printf, 3, 0)) PAM_MODUTIL_NONNULL((3));
diff -upk.orig Linux-PAM-0.80.orig/modules/pammodutil/modutil_conv.c Linux-PAM-0.80/modules/pammodutil/modutil_conv.c
--- Linux-PAM-0.80.orig/modules/pammodutil/modutil_conv.c	1970-01-01 00:00:00 +0000
+++ Linux-PAM-0.80/modules/pammodutil/modutil_conv.c	2005-08-17 16:21:11 +0000
@@ -0,0 +1,102 @@
+/*
+ * $Id$
+ *
+ * This function provide common method for system logging.
+ */
+
+#include "config.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <stdarg.h>
+#include <errno.h>
+
+#include <security/pam_modules.h>
+#include <security/_pam_macros.h>
+#include "include/security/_pam_modutil.h"
+
+DEFINE_PAM_LOG("converse")
+
+static int PAM_MODUTIL_FORMAT((printf, 4, 0)) PAM_MODUTIL_NONNULL((4))
+converse(pam_handle_t *pamh, int style, struct pam_response **response,
+	 const char *fmt, va_list args)
+{
+	struct pam_message msg;
+	const struct pam_message *pmsg;
+	const struct pam_conv *conv;
+	const void *convp;
+	char *msgbuf;
+	int retval;
+
+	*response = NULL;
+
+	retval = pam_get_item(pamh, PAM_CONV, &convp);
+	if (retval != PAM_SUCCESS)
+		return retval;
+	conv = convp;
+	if (conv == NULL || conv->conv == NULL) {
+		_pam_log(LOG_ERR, "no conversation function");
+		return PAM_SYSTEM_ERR;
+	}
+
+	if (vasprintf(&msgbuf, fmt, args) < 0) {
+		_pam_log(LOG_ERR, "vasprintf: %m");
+		return PAM_BUF_ERR;
+	}
+
+	msg.msg_style = style;
+	msg.msg = msgbuf;
+	pmsg = &msg;
+
+	retval = conv->conv(1, &pmsg, response, conv->appdata_ptr);
+	_pam_overwrite(msgbuf);
+	_pam_drop(msgbuf);
+	if (retval != PAM_SUCCESS)
+		_pam_log(LOG_ERR, "conversation failed");
+
+	return retval;
+}
+
+int _pammodutil_error(pam_handle_t *pamh, const char *fmt, ...)
+{
+	va_list args;
+	struct pam_response *resp;
+	int retval;
+
+	va_start(args, fmt);
+	retval = converse(pamh, PAM_ERROR_MSG, &resp, fmt, args);
+	va_end(args);
+	if (retval == PAM_SUCCESS && resp)
+		_pam_drop_reply(resp, 1);
+
+	return retval;
+}
+
+int _pammodutil_info(pam_handle_t *pamh, const char *fmt, ...)
+{
+	va_list args;
+	struct pam_response *resp;
+	int retval;
+
+	va_start(args, fmt);
+	retval = converse(pamh, PAM_TEXT_INFO, &resp, fmt, args);
+	va_end(args);
+	if (retval == PAM_SUCCESS && resp)
+		_pam_drop_reply(resp, 1);
+
+	return retval;
+}
+
+int _pammodutil_prompt(pam_handle_t *pamh, int style,
+		      struct pam_response **response, const char *fmt, ...)
+{
+	va_list args;
+	int retval;
+
+	va_start(args, fmt);
+	retval = converse(pamh, style, response, fmt, args);
+	va_end(args);
+
+	return retval;
+}
