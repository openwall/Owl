Deal with logging issue mentioned in CHANGELOG's TODO.
Modules shoudln't do openlog/closelog job.

diff -upk.orig Linux-PAM-0.80.orig/modules/pam_access/pam_access.c Linux-PAM-0.80/modules/pam_access/pam_access.c
--- Linux-PAM-0.80.orig/modules/pam_access/pam_access.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_access/pam_access.c	2005-08-09 12:30:49 +0000
@@ -61,6 +61,8 @@
 #include <security/pam_modules.h>
 #include <security/_pam_modutil.h>
 
+DEFINE_PAM_LOG("pam_access")
+
 /* login_access.c from logdaemon-5.6 with several changes by A.Nogin: */
 
  /*
@@ -106,17 +108,6 @@ struct login_info {
 
 /* --- static functions for checking whether the user should be let in --- */
 
-static void _log_err(const char *format, ... )
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("pam_access", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(LOG_ERR, format, args);
-    va_end(args);
-    closelog();
-}
-
 /* Parse module config arguments */
 
 static int parse_args(struct login_info *loginfo, int argc, const char **argv)
@@ -141,13 +132,14 @@ static int parse_args(struct login_info 
 		loginfo->config_file = 11 + argv[i];
 		fclose(fp);
 	    } else {
-		_log_err("for service [%s] failed to open accessfile=[%s]"
-			 , loginfo->service, 11 + argv[i]);
+		_pam_log(LOG_ERR,
+			 "for service [%s] failed to open accessfile=[%s]",
+			 loginfo->service, 11 + argv[i]);
 		return 0;
 	    }
 
 	} else {
-	    _log_err("unrecognized option [%s]", argv[i]);
+	    _pam_log(LOG_ERR, "unrecognized option [%s]", argv[i]);
 	}
     }
 
@@ -188,8 +180,9 @@ login_access (pam_handle_t *pamh, struct
 	while (!match && fgets(line, sizeof(line), fp)) {
 	    lineno++;
 	    if (line[end = strlen(line) - 1] != '\n') {
-		_log_err("%s: line %d: missing newline or line too long",
-		       item->config_file, lineno);
+		_pam_log(LOG_ERR,
+			 "%s: line %d: missing newline or line too long",
+			 item->config_file, lineno);
 		continue;
 	    }
 	    if (line[0] == '#')
@@ -204,12 +197,12 @@ login_access (pam_handle_t *pamh, struct
 	    if (!(perm = strtok(line, fs))
 		|| !(users = strtok((char *) 0, fs))
   	        || !(froms = strtok((char *) 0, fs))) {
-		_log_err("%s: line %d: bad field count",
+		_pam_log(LOG_ERR, "%s: line %d: bad field count",
 			 item->config_file, lineno);
 		continue;
 	    }
 	    if (perm[0] != '+' && perm[0] != '-') {
-		_log_err("%s: line %d: bad first field",
+		_pam_log(LOG_ERR, "%s: line %d: bad first field",
 			 item->config_file, lineno);
 		continue;
 	    }
@@ -218,7 +211,7 @@ login_access (pam_handle_t *pamh, struct
 	}
 	(void) fclose(fp);
     } else if (errno != ENOENT) {
-	_log_err("cannot open %s: %m", item->config_file);
+	_pam_log(LOG_ERR, "cannot open %s: %m", item->config_file);
 	return NO;
     }
     return (match == 0 || (line[0] == '+'));
@@ -410,7 +403,7 @@ PAM_EXTERN int pam_sm_acct_mgmt(pam_hand
     if ((pam_get_item(pamh, PAM_SERVICE, &service)
 	 != PAM_SUCCESS) || (service == NULL) ||
 	 (*(const char *)service == ' ')) {
-	_log_err("cannot find the service name");
+	_pam_log(LOG_ERR, "cannot find the service name");
 	return PAM_ABORT;
     }
 
@@ -418,7 +411,7 @@ PAM_EXTERN int pam_sm_acct_mgmt(pam_hand
 
     if (pam_get_user(pamh, &user, NULL) != PAM_SUCCESS || user == NULL
 	|| *user == '\0') {
-	_log_err("cannot determine the user's name");
+	_pam_log(LOG_ERR, "cannot determine the user's name");
 	return PAM_USER_UNKNOWN;
     }
 
@@ -426,7 +419,7 @@ PAM_EXTERN int pam_sm_acct_mgmt(pam_hand
 
     if (pam_get_item(pamh, PAM_RHOST, &void_from)
 	!= PAM_SUCCESS) {
-	_log_err("cannot find the remote host name");
+	_pam_log(LOG_ERR, "cannot find the remote host name");
 	return PAM_ABORT;
     }
     from = void_from;
@@ -440,11 +433,11 @@ PAM_EXTERN int pam_sm_acct_mgmt(pam_hand
             D(("PAM_TTY not set, probing stdin"));
 	    from = ttyname(STDIN_FILENO);
 	    if (from == NULL) {
-	        _log_err("couldn't get the tty name");
+	        _pam_log(LOG_ERR, "couldn't get the tty name");
 	        return PAM_ABORT;
 	     }
 	    if (pam_set_item(pamh, PAM_TTY, from) != PAM_SUCCESS) {
-	        _log_err("couldn't set tty name");
+	        _pam_log(LOG_ERR, "couldn't set tty name");
 	        return PAM_ABORT;
 	     }
         }
@@ -471,14 +464,14 @@ PAM_EXTERN int pam_sm_acct_mgmt(pam_hand
     /* parse the argument list */
 
     if (!parse_args(&loginfo, argc, argv)) {
-	_log_err("failed to parse the module arguments");
+	_pam_log(LOG_ERR, "failed to parse the module arguments");
 	return PAM_ABORT;
     }
 
     if (login_access(pamh, &loginfo)) {
 	return (PAM_SUCCESS);
     } else {
-	_log_err("access denied for user `%s' from `%s'",user,from);
+	_pam_log(LOG_ERR, "access denied for user `%s' from `%s'", user, from);
 	return (PAM_PERM_DENIED);
     }
 }
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_env/pam_env.c Linux-PAM-0.80/modules/pam_env/pam_env.c
--- Linux-PAM-0.80.orig/modules/pam_env/pam_env.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_env/pam_env.c	2005-08-09 12:30:49 +0000
@@ -43,6 +43,9 @@
 
 #include <security/pam_modules.h>
 #include <security/_pam_macros.h>
+#include <security/_pam_modutil.h>
+
+DEFINE_PAM_LOG("pam_env")
 
 /* This little structure makes it easier to keep variables together */
 
@@ -75,19 +78,6 @@ static int  _undefine_var(pam_handle_t *
 /* This is a flag used to designate an empty string */
 static char quote='Z';
 
-/* some syslogging */
-
-static void _log_err(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-env", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
-
 /* argument parsing */
 
 #define PAM_DEBUG_ARG       0x01
@@ -114,7 +104,7 @@ static int _pam_parse(int flags, int arg
 		D(("new Configuration File: %s", *conffile));
 		ctrl |= PAM_NEW_CONF_FILE;
 	    } else {
-		_log_err(LOG_CRIT,
+		_pam_log(LOG_CRIT,
 			 "Configuration file specification missing argument - ignored");
 	    }
 	} else if (!strncmp(*argv,"envfile=",8)) {
@@ -123,13 +113,13 @@ static int _pam_parse(int flags, int arg
 		D(("new Env File: %s", *envfile));
 		ctrl |= PAM_NEW_ENV_FILE;
 	    } else {
-		_log_err(LOG_CRIT,
+		_pam_log(LOG_CRIT,
 			 "Env file specification missing argument - ignored");
 	    }
 	} else if (!strncmp(*argv,"readenv=",8))
 	    *readenv = atoi(8+*argv);
 	else
-	    _log_err(LOG_ERR,"pam_parse: unknown option; %s",*argv);
+	    _pam_log(LOG_ERR, "unknown option; %s", *argv);
     }
 
     return ctrl;
@@ -160,8 +150,7 @@ static int _parse_config_file(pam_handle
      */
 
     if ((conf = fopen(file,"r")) == NULL) {
-      _log_err(LOG_ERR, "Unable to open config file: %s",
-	       strerror(errno));
+      _pam_log(LOG_ERR, "Unable to open config file: %s: %m", file);
       return PAM_IGNORE;
     }
 
@@ -216,7 +205,7 @@ static int _parse_env_file(pam_handle_t 
     D(("Env file name is: %s", file));
 
     if ((conf = fopen(file,"r")) == NULL) {
-      D(("Unable to open env file: %s", strerror(errno)));
+      _pam_log(LOG_ERR, "Unable to open env file: %s: %m", file);
       return PAM_ABORT;
     }
 
@@ -383,7 +372,7 @@ static int _parse_line(char *buffer, VAR
   length = strcspn(buffer," \t\n");
 
   if ((var->name = malloc(length + 1)) == NULL) {
-    _log_err(LOG_ERR, "Couldn't malloc %d bytes", length+1);
+    _pam_log(LOG_ERR, "Couldn't malloc %d bytes", length+1);
     return PAM_BUF_ERR;
   }
 
@@ -414,7 +403,7 @@ static int _parse_line(char *buffer, VAR
       valptr=&(var->override);
     } else {
       D(("Unrecognized options: <%s> - ignoring line", ptr));
-      _log_err(LOG_ERR, "Unrecognized Option: %s - ignoring line", ptr);
+      _pam_log(LOG_ERR, "Unrecognized Option: %s - ignoring line", ptr);
       return BAD_LINE;
     }
 
@@ -425,13 +414,13 @@ static int _parse_line(char *buffer, VAR
       tmpptr = strchr(++ptr, '"');
       if (!tmpptr) {
 	D(("Unterminated quoted string: %s", ptr-1));
-	_log_err(LOG_ERR, "Unterminated quoted string: %s", ptr-1);
+	_pam_log(LOG_ERR, "Unterminated quoted string: %s", ptr-1);
 	return BAD_LINE;
       }
       length = tmpptr - ptr;
       if (*++tmpptr && ' ' != *tmpptr && '\t' != *tmpptr && '\n' != *tmpptr) {
 	D(("Quotes must cover the entire string: <%s>", ptr));
-	_log_err(LOG_ERR, "Quotes must cover the entire string: <%s>", ptr);
+	_pam_log(LOG_ERR, "Quotes must cover the entire string: <%s>", ptr);
 	return BAD_LINE;
       }
       quoteflg++;
@@ -439,7 +428,7 @@ static int _parse_line(char *buffer, VAR
     if (length) {
       if ((*valptr = malloc(length + 1)) == NULL) {
 	D(("Couldn't malloc %d bytes", length+1));
-	_log_err(LOG_ERR, "Couldn't malloc %d bytes", length+1);
+	_pam_log(LOG_ERR, "Couldn't malloc %d bytes", length+1);
 	return PAM_BUF_ERR;
       }
       (void)strncpy(*valptr,ptr,length);
@@ -559,14 +548,14 @@ static int _expand_arg(pam_handle_t *pam
       ++orig;
       if ('$' != *orig && '@' != *orig) {
 	D(("Unrecognized escaped character: <%c> - ignoring", *orig));
-	_log_err(LOG_ERR, "Unrecognized escaped character: <%c> - ignoring",
+	_pam_log(LOG_ERR, "Unrecognized escaped character: <%c> - ignoring",
 		 *orig);
       } else if ((strlen(tmp) + 1) < MAX_ENV) {
 	tmp[strlen(tmp)] = *orig++;        /* Note the increment */
       } else {
 	/* is it really a good idea to try to log this? */
 	D(("Variable buffer overflow: <%s> + <%s>", tmp, tmpptr));
-	_log_err(LOG_ERR, "Variable buffer overflow: <%s> + <%s>",
+	_pam_log(LOG_ERR, "Variable buffer overflow: <%s> + <%s>",
 		 tmp, tmpptr);
       }
       continue;
@@ -575,7 +564,7 @@ static int _expand_arg(pam_handle_t *pam
       if ('{' != *(orig+1)) {
 	D(("Expandable variables must be wrapped in {}"
 	   " <%s> - ignoring", orig));
-	_log_err(LOG_ERR, "Expandable variables must be wrapped in {}"
+	_pam_log(LOG_ERR, "Expandable variables must be wrapped in {}"
 		 " <%s> - ignoring", orig);
 	if ((strlen(tmp) + 1) < MAX_ENV) {
 	  tmp[strlen(tmp)] = *orig++;        /* Note the increment */
@@ -590,7 +579,7 @@ static int _expand_arg(pam_handle_t *pam
 	  *ptr++ = '\0';
 	} else {
 	  D(("Unterminated expandable variable: <%s>", orig-2));
-	  _log_err(LOG_ERR, "Unterminated expandable variable: <%s>", orig-2);
+	  _pam_log(LOG_ERR, "Unterminated expandable variable: <%s>", orig-2);
 	  return PAM_ABORT;
 	}
 	strncpy(tmpval, orig, sizeof(tmpval));
@@ -616,7 +605,7 @@ static int _expand_arg(pam_handle_t *pam
 
 	default:
 	  D(("Impossible error, type == <%c>", type));
-	  _log_err(LOG_CRIT, "Impossible error, type == <%c>", type);
+	  _pam_log(LOG_CRIT, "Impossible error, type == <%c>", type);
 	  return PAM_ABORT;
 	}         /* switch */
 
@@ -626,7 +615,7 @@ static int _expand_arg(pam_handle_t *pam
 	  } else {
 	    /* is it really a good idea to try to log this? */
 	    D(("Variable buffer overflow: <%s> + <%s>", tmp, tmpptr));
-	    _log_err(LOG_ERR, "Variable buffer overflow: <%s> + <%s>", tmp, tmpptr);
+	    _pam_log(LOG_ERR, "Variable buffer overflow: <%s> + <%s>", tmp, tmpptr);
 	  }
 	}
       }           /* if ('{' != *orig++) */
@@ -636,7 +625,7 @@ static int _expand_arg(pam_handle_t *pam
       } else {
 	/* is it really a good idea to try to log this? */
 	D(("Variable buffer overflow: <%s> + <%s>", tmp, tmpptr));
-	_log_err(LOG_ERR, "Variable buffer overflow: <%s> + <%s>", tmp, tmpptr);
+	_pam_log(LOG_ERR, "Variable buffer overflow: <%s> + <%s>", tmp, tmpptr);
       }
     }
   }              /* for (;*orig;) */
@@ -645,7 +634,7 @@ static int _expand_arg(pam_handle_t *pam
     free(*value);
     if ((*value = malloc(strlen(tmp) +1)) == NULL) {
       D(("Couldn't malloc %d bytes for expanded var", strlen(tmp)+1));
-      _log_err(LOG_ERR,"Couldn't malloc %d bytes for expanded var",
+      _pam_log(LOG_ERR,"Couldn't malloc %d bytes for expanded var",
 	       strlen(tmp)+1);
       return PAM_BUF_ERR;
     }
@@ -680,7 +669,7 @@ static const char * _pam_get_item_byname
     item = PAM_RHOST;
   } else {
     D(("Unknown PAM_ITEM: <%s>", name));
-    _log_err(LOG_ERR, "Unknown PAM_ITEM: <%s>", name);
+    _pam_log(LOG_ERR, "Unknown PAM_ITEM: <%s>", name);
     return NULL;
   }
 
@@ -703,7 +692,7 @@ static int _define_var(pam_handle_t *pam
   size = strlen(var->name)+strlen(var->value)+2;
   if ((envvar = malloc(size)) == NULL) {
     D(("Malloc fail, size = %d", size));
-    _log_err(LOG_ERR, "Malloc fail, size = %d", size);
+    _pam_log(LOG_ERR, "Malloc fail, size = %d", size);
     return PAM_BUF_ERR;
   }
   (void) sprintf(envvar,"%s=%s",var->name,var->value);
@@ -779,7 +768,7 @@ PAM_EXTERN
 int pam_sm_acct_mgmt(pam_handle_t *pamh, int flags, int argc,
 		     const char **argv)
 {
-  _log_err(LOG_NOTICE, "pam_sm_acct_mgmt called inappropriatly");
+  _pam_log(LOG_NOTICE, "pam_sm_acct_mgmt called inappropriatly");
   return PAM_SERVICE_ERR;
 }
 
@@ -820,7 +809,7 @@ PAM_EXTERN
 int pam_sm_chauthtok(pam_handle_t *pamh, int flags, int argc,
 		     const char **argv)
 {
-  _log_err(LOG_NOTICE, "pam_sm_chauthtok called inappropriatly");
+  _pam_log(LOG_NOTICE, "pam_sm_chauthtok called inappropriatly");
   return PAM_SERVICE_ERR;
 }
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_filter/pam_filter.c Linux-PAM-0.80/modules/pam_filter/pam_filter.c
--- Linux-PAM-0.80.orig/modules/pam_filter/pam_filter.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_filter/pam_filter.c	2005-08-09 12:30:49 +0000
@@ -31,6 +31,7 @@
 #define PAM_SM_PASSWORD
 
 #include <security/pam_modules.h>
+#include <security/_pam_modutil.h>
 #include <security/pam_filter.h>
 
 /* ------ some tokens used for convenience throughout this file ------- */
@@ -47,16 +48,7 @@
 
 #include <stdarg.h>
 
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("pam_filter", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_filter")
 
 #define TERMINAL_LEN 12
 
@@ -531,10 +523,8 @@ static int set_filter(pam_handle_t *pamh
 		    child2 = 0;
 	    } else {
 
-		_pam_log(LOG_ALERT
-			 ,"programming error <chid=%d,lstatus=%x>: "
-			 __FILE__ " line %d"
-			 , lstatus, __LINE__ );
+		_pam_log(LOG_ALERT, "programming error <chid=%d,lstatus=%x> "
+			 "in %s line %d", chid, lstatus, __FILE__, __LINE__);
 		child = child2 = 0;
 		status = -1;
 
@@ -569,10 +559,8 @@ static int set_filter(pam_handle_t *pamh
 
 	} else {
 
-	    _pam_log(LOG_ALERT
-		     ,"programming error <chid=%d,lstatus=%x>: "
-		     __FILE__ " line %d"
-		     , lstatus, __LINE__ );
+	    _pam_log(LOG_ALERT, "programming error <chid=%d,lstatus=%x> "
+		     "in %s line %d", chid, lstatus, __FILE__, __LINE__);
 	    child = child2 = 0;
 	    status = -1;
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_filter/upperLOWER/upperLOWER.c Linux-PAM-0.80/modules/pam_filter/upperLOWER/upperLOWER.c
--- Linux-PAM-0.80.orig/modules/pam_filter/upperLOWER/upperLOWER.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_filter/upperLOWER/upperLOWER.c	2005-08-09 12:30:49 +0000
@@ -27,21 +27,7 @@
 
 /* ---------------------------------------------------------------- */
 
-#include <stdarg.h>
-#ifdef hpux
-# define log_this syslog
-#else
-static void log_this(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("upperLOWER", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
-#endif
+#define log_this syslog
 
 #include <ctype.h>
 
@@ -66,6 +52,8 @@ int main(int argc, char **argv) 
      void (*before_user)(char *,int);
      void (*before_app)(char *,int);
 
+     openlog("upperLOWER", LOG_CONS|LOG_PID, LOG_AUTH);
+
 #ifdef DEBUG
      {
 	  int i;
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_ftp/pam_ftp.c Linux-PAM-0.80/modules/pam_ftp/pam_ftp.c
--- Linux-PAM-0.80.orig/modules/pam_ftp/pam_ftp.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_ftp/pam_ftp.c	2005-08-09 12:30:49 +0000
@@ -34,19 +34,11 @@
 
 #include <security/pam_modules.h>
 #include <security/_pam_macros.h>
+#include <security/_pam_modutil.h>
 
 /* some syslogging */
 
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-ftp", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_ftp")
 
 static int converse(pam_handle_t *pamh, int nargs
 		    , struct pam_message **message
@@ -110,7 +102,7 @@ static int _pam_parse(int argc, const ch
 	} else if (!strcmp(*argv,"ignore")) {
 	    ctrl |= PAM_IGNORE_EMAIL;
 	} else {
-	    _pam_log(LOG_ERR,"pam_parse: unknown option; %s",*argv);
+	    _pam_log(LOG_ERR, "unknown option; %s", *argv);
 	}
     }
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_group/pam_group.c Linux-PAM-0.80/modules/pam_group/pam_group.c
--- Linux-PAM-0.80.orig/modules/pam_group/pam_group.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_group/pam_group.c	2005-08-09 12:30:49 +0000
@@ -59,18 +59,9 @@ typedef enum { AND, OR } operator;
 #include <security/_pam_macros.h>
 #include <security/_pam_modutil.h>
 
-/* --- static functions for checking whether the user should be let in --- */
-
-static void _log_err(const char *format, ... )
-{
-    va_list args;
+DEFINE_PAM_LOG("pam_group")
 
-    va_start(args, format);
-    openlog("pam_group", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(LOG_CRIT, format, args);
-    va_end(args);
-    closelog();
-}
+/* --- static functions for checking whether the user should be let in --- */
 
 static void shift_bytes(char *mem, int from, int by)
 {
@@ -93,7 +84,7 @@ static int read_field(int fd, char **buf
     if (! *buf) {
 	*buf = (char *) malloc(PAM_GROUP_BUFLEN);
 	if (! *buf) {
-	    _log_err("out of memory");
+	    _pam_log(LOG_ERR, "out of memory");
 	    return -1;
 	}
 	*from = *to = 0;
@@ -103,7 +94,7 @@ static int read_field(int fd, char **buf
     /* do we have a file open ? return error */
 
     if (fd < 0 && *to <= 0) {
-	_log_err( PAM_GROUP_CONF " not opened");
+	_pam_log(LOG_ERR, "error opening " PAM_GROUP_CONF);
 	memset(*buf, 0, PAM_GROUP_BUFLEN);
 	_pam_drop(*buf);
 	return -1;
@@ -132,7 +123,7 @@ static int read_field(int fd, char **buf
 
 	i = read(fd, *to + *buf, PAM_GROUP_BUFLEN - *to);
 	if (i < 0) {
-	    _log_err("error reading " PAM_GROUP_CONF);
+	    _pam_log(LOG_ERR, "error reading " PAM_GROUP_CONF);
 	    close(fd);
 	    return -1;
 	} else if (!i) {
@@ -171,8 +162,8 @@ static int read_field(int fd, char **buf
 		    *to -= j-i;
 		    ++i;
 		} else {
-		    _log_err("internal error in " __FILE__
-			     " at line %d", __LINE__ );
+		    _pam_log(LOG_CRIT, "internal error in %s at line %d",
+			     __FILE__, __LINE__);
 	            close(fd);
 		    return -1;
 		}
@@ -302,7 +293,8 @@ static boolean logic_field(const void *m
 			 left |= right;
 		    next = OP;
 	       } else {
-		    _log_err("garbled syntax; expected name (rule #%d)", rule);
+		    _pam_log(LOG_ERR,
+			     "garbled syntax; expected name (rule #%d)", rule);
 		    return FALSE;
 	       }
 	  } else {   /* OP */
@@ -314,8 +306,9 @@ static boolean logic_field(const void *m
 		    oper = OR;
 		    break;
 	       default:
-		    _log_err("garbled syntax; expected & or | (rule #%d)"
-			     , rule);
+		    _pam_log(LOG_ERR,
+			     "garbled syntax; expected & or | (rule #%d)",
+			     rule);
 		    D(("%c at %d",c,at));
 		    return FALSE;
 	       }
@@ -394,7 +387,8 @@ static boolean check_time(const void *AT
 
      if (times == NULL) {
 	  /* this should not happen */
-	  _log_err("internal error: " __FILE__ " line %d", __LINE__);
+	  _pam_log(LOG_CRIT, "internal error in %s at line %d",
+		   __FILE__, __LINE__);
 	  return FALSE;
      }
 
@@ -418,13 +412,13 @@ static boolean check_time(const void *AT
 	  }
 	  j += 2;
 	  if (this_day == -1) {
-	       _log_err("bad day specified (rule #%d)", rule);
+	       _pam_log(LOG_ERR, "bad day specified (rule #%d)", rule);
 	       return FALSE;
 	  }
 	  marked_day ^= this_day;
      }
      if (marked_day == 0) {
-	  _log_err("no day specified");
+	  _pam_log(LOG_ERR, "no day specified");
 	  return FALSE;
      }
      D(("day range = 0%o", marked_day));
@@ -448,7 +442,7 @@ static boolean check_time(const void *AT
 
      D(("i=%d, time_end=%d, times[j]='%c'", i, time_end, times[j]));
      if (i != 5 || time_end == -1) {
-	  _log_err("no/bad times specified (rule #%d)", rule);
+	  _pam_log(LOG_ERR, "no/bad times specified (rule #%d)", rule);
 	  return TRUE;
      }
      D(("times(%d to %d)", time_start,time_end));
@@ -547,7 +541,7 @@ static int mkgrplist(pam_handle_t *pamh,
 	       if (tmp != NULL) {
 		    (*list) = tmp;
 	       } else {
-		    _log_err("out of memory for group list");
+		    _pam_log(LOG_ERR, "out of memory for group list");
 		    free(*list);
 		    (*list) = NULL;
 		    return -1;
@@ -569,7 +563,8 @@ static int mkgrplist(pam_handle_t *pamh,
 	      retval = pwdb_locate("group", PWDB_DEFAULT, buf+at
 				   , PWDB_ID_UNKNOWN, &pw);
 	      if (retval != PWDB_SUCCESS) {
-		  _log_err("bad group: %s; %s", buf+at, pwdb_strerror(retval));
+		  _pam_log(LOG_ERR, "bad group: %s; %s",
+			   buf+at, pwdb_strerror(retval));
 	      } else {
 		  const struct pwdb_entry *pwe=NULL;
 
@@ -580,7 +575,7 @@ static int mkgrplist(pam_handle_t *pamh,
 		      (*list)[len++] = * (const gid_t *) pwe->value;
 		      pwdb_entry_delete(&pwe);                  /* tidy up */
 		  } else {
-		      _log_err("%s group entry is bad; %s"
+		      _pam_log(LOG_ERR, "%s group entry is bad; %s"
 			       , pwdb_strerror(retval));
 		  }
 		  pw = NULL;          /* break link - cached for later use */
@@ -592,7 +587,7 @@ static int mkgrplist(pam_handle_t *pamh,
 
 	      grp = _pammodutil_getgrnam(pamh, buf+at);
 	      if (grp == NULL) {
-		  _log_err("bad group: %s", buf+at);
+		  _pam_log(LOG_ERR, "bad group: %s", buf+at);
 	      } else {
 		  D(("group %s exists", buf+at));
 		  (*list)[len++] = grp->gr_gid;
@@ -672,7 +667,7 @@ static int check_account(pam_handle_t *p
 
 	fd = read_field(fd,&buffer,&from,&to);
 	if (!buffer || !buffer[0]) {
-	    _log_err(PAM_GROUP_CONF "; no tty entry #%d", count);
+	    _pam_log(LOG_ERR, PAM_GROUP_CONF "; no tty entry #%d", count);
 	    continue;
 	}
 	good &= logic_field(tty, buffer, count, is_same);
@@ -682,7 +677,7 @@ static int check_account(pam_handle_t *p
 
 	fd = read_field(fd,&buffer,&from,&to);
 	if (!buffer || !buffer[0]) {
-	    _log_err(PAM_GROUP_CONF "; no user entry #%d", count);
+	    _pam_log(LOG_ERR, PAM_GROUP_CONF "; no user entry #%d", count);
 	    continue;
 	}
 	good &= logic_field(user, buffer, count, is_same);
@@ -692,7 +687,7 @@ static int check_account(pam_handle_t *p
 
 	fd = read_field(fd,&buffer,&from,&to);
 	if (!buffer || !buffer[0]) {
-	    _log_err(PAM_GROUP_CONF "; no time entry #%d", count);
+	    _pam_log(LOG_ERR, PAM_GROUP_CONF "; no time entry #%d", count);
 	    continue;
 	}
 
@@ -701,7 +696,7 @@ static int check_account(pam_handle_t *p
 
 	fd = read_field(fd,&buffer,&from,&to);
 	if (!buffer || !buffer[0]) {
-	    _log_err(PAM_GROUP_CONF "; no listed groups for rule #%d"
+	    _pam_log(LOG_ERR, PAM_GROUP_CONF "; no listed groups for rule #%d"
 		     , count);
 	    continue;
 	}
@@ -725,7 +720,8 @@ static int check_account(pam_handle_t *p
 
 	fd = read_field(fd,&buffer,&from,&to);
 	if (buffer && buffer[0]) {
-	    _log_err(PAM_GROUP_CONF "; poorly terminated rule #%d", count);
+	    _pam_log(LOG_ERR, PAM_GROUP_CONF "; poorly terminated rule #%d",
+		     count);
 	}
 
 	if (good > 0) {
@@ -750,8 +746,9 @@ static int check_account(pam_handle_t *p
 #endif
 	if ((err = setgroups(no_grps, grps))) {
 	    D(("but couldn't set groups %d", err));
-	    _log_err("unable to set the group membership for user (err=%d)"
-		     , err);
+	    _pam_log(LOG_ERR,
+		     "unable to set the group membership for user (err=%d)",
+		     err);
 	    retval = PAM_CRED_ERR;
 	}
     }
@@ -794,7 +791,7 @@ PAM_EXTERN int pam_sm_setcred(pam_handle
 
     if (pam_get_item(pamh, PAM_SERVICE, &service)
 	!= PAM_SUCCESS || service == NULL) {
-	_log_err("cannot find the current service name");
+	_pam_log(LOG_ERR, "cannot find the current service name");
 	return PAM_ABORT;
     }
 
@@ -802,7 +799,7 @@ PAM_EXTERN int pam_sm_setcred(pam_handle
 
     if (pam_get_user(pamh, &user, NULL) != PAM_SUCCESS || user == NULL
 	|| *user == '\0') {
-	_log_err("cannot determine the user's name");
+	_pam_log(LOG_ERR, "cannot determine the user's name");
 	return PAM_USER_UNKNOWN;
     }
 
@@ -813,11 +810,11 @@ PAM_EXTERN int pam_sm_setcred(pam_handle
 	D(("PAM_TTY not set, probing stdin"));
 	tty = ttyname(STDIN_FILENO);
 	if (tty == NULL) {
-	    _log_err("couldn't get the tty name");
+	    _pam_log(LOG_ERR, "couldn't get the tty name");
 	    return PAM_ABORT;
 	}
 	if (pam_set_item(pamh, PAM_TTY, tty) != PAM_SUCCESS) {
-	    _log_err("couldn't set tty name");
+	    _pam_log(LOG_ERR, "couldn't set tty name");
 	    return PAM_ABORT;
 	}
     }
@@ -843,7 +840,7 @@ PAM_EXTERN int pam_sm_setcred(pam_handle
 	(void) pwdb_end();                                /* tidy up */
     } else {
 	D(("failed to initialize pwdb; %s", pwdb_strerror(retval)));
-	_log_err("unable to initialize libpwdb");
+	_pam_log(LOG_ERR, "unable to initialize libpwdb");
 	retval = PAM_ABORT;
     }
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_lastlog/pam_lastlog.c Linux-PAM-0.80/modules/pam_lastlog/pam_lastlog.c
--- Linux-PAM-0.80.orig/modules/pam_lastlog/pam_lastlog.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_lastlog/pam_lastlog.c	2005-08-09 12:30:49 +0000
@@ -81,18 +81,7 @@ struct lastlog {
 #include <security/_pam_macros.h>
 #include <security/_pam_modutil.h>
 
-/* some syslogging */
-
-static void _log_err(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-lastlog", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_lastlog")
 
 /* argument parsing */
 
@@ -133,7 +122,7 @@ static int _pam_parse(int flags, int arg
 	} else if (!strcmp(*argv,"nowtmp")) {
 	    ctrl &= ~LASTLOG_WTMP;
 	} else {
-	    _log_err(LOG_ERR,"unknown option; %s",*argv);
+	    _pam_log(LOG_ERR, "unknown option; %s", *argv);
 	}
     }
 
@@ -163,12 +152,12 @@ static int converse(pam_handle_t *pamh, 
 	D(("returned from application's conversation function"));
 
 	if (retval != PAM_SUCCESS && (ctrl & LASTLOG_DEBUG) ) {
-	    _log_err(LOG_DEBUG, "conversation failure [%s]"
+	    _pam_log(LOG_DEBUG, "conversation failure [%s]"
 		     , pam_strerror(pamh, retval));
 	}
 
     } else {
-	_log_err(LOG_ERR, "couldn't obtain coversation function [%s]"
+	_pam_log(LOG_ERR, "couldn't obtain coversation function [%s]"
 		 , pam_strerror(pamh, retval));
 	if (retval == PAM_SUCCESS)
 		retval = PAM_BAD_ITEM; /* conv was NULL */
@@ -223,7 +212,7 @@ static int last_login_date(pam_handle_t 
     if (last_fd < 0) {
 	D(("unable to open the %s file", _PATH_LASTLOG));
 	if (announce & LASTLOG_DEBUG) {
-	    _log_err(LOG_DEBUG, "unable to open %s file", _PATH_LASTLOG);
+	    _pam_log(LOG_DEBUG, "unable to open %s file", _PATH_LASTLOG);
 	}
 	retval = PAM_SYSTEM_ERR;
     } else {
@@ -240,7 +229,7 @@ static int last_login_date(pam_handle_t 
 
 	if ( fcntl(last_fd, F_SETLK, &last_lock) < 0 ) {
 	    D(("locking %s failed..(waiting a little)", _PATH_LASTLOG));
-	    _log_err(LOG_ALERT, "%s file is locked/read", _PATH_LASTLOG);
+	    _pam_log(LOG_ALERT, "%s file is locked/read", _PATH_LASTLOG);
 	    sleep(LASTLOG_IGNORE_LOCK_TIME);
 	}
 
@@ -253,7 +242,7 @@ static int last_login_date(pam_handle_t 
 	if (!err && !win) {
 	    D(("First login for user uid=%d", _PATH_LASTLOG, uid));
 	    if (announce & LASTLOG_DEBUG) {
-		_log_err(LOG_DEBUG, "creating lastlog for uid %d", uid);
+		_pam_log(LOG_DEBUG, "creating lastlog for uid %d", uid);
 	    }
 	    memset(&last_login, 0, sizeof(last_login));
 	}
@@ -387,7 +376,7 @@ static int last_login_date(pam_handle_t 
 
 	    if ( fcntl(last_fd, F_SETLK, &last_lock) < 0 ) {
 		D(("locking %s failed..(waiting a little)", _PATH_LASTLOG));
-		_log_err(LOG_ALERT, "%s file is locked/write", _PATH_LASTLOG);
+		_pam_log(LOG_ALERT, "%s file is locked/write", _PATH_LASTLOG);
 		sleep(LASTLOG_IGNORE_LOCK_TIME);
 	    }
 
@@ -443,7 +432,7 @@ int pam_sm_open_session(pam_handle_t *pa
 
     retval = pam_get_item(pamh, PAM_USER, &user);
     if (retval != PAM_SUCCESS || user == NULL || *(const char *)user == '\0') {
-	_log_err(LOG_NOTICE, "user unknown");
+	_pam_log(LOG_NOTICE, "user unknown");
 	return PAM_USER_UNKNOWN;
     }
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_limits/pam_limits.c Linux-PAM-0.80/modules/pam_limits/pam_limits.c
--- Linux-PAM-0.80.orig/modules/pam_limits/pam_limits.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_limits/pam_limits.c	2005-08-09 12:30:49 +0000
@@ -117,7 +117,8 @@ static int converse(pam_handle_t *pamh, 
 	    conv->appdata_ptr);
 }
 
-static int say(pam_handle_t *pamh, int style, const char *format, ...)
+static int PAM_MODUTIL_FORMAT((printf, 3, 4)) PAM_MODUTIL_NONNULL((3))
+say(pam_handle_t *pamh, int style, const char *format, ...)
 {
 	va_list args;
 	char buffer[0x800];
@@ -140,17 +141,7 @@ static int say(pam_handle_t *pamh, int s
 	return status;
 }
 
-/* logging */
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("pam_limits", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_limits")
 
 /* argument parsing */
 
@@ -176,7 +167,7 @@ static int _pam_parse(int argc, const ch
 	} else if (!strcmp(*argv,"utmp_early")) {
 	    ctrl |= PAM_UTMP_EARLY;
 	} else {
-	    _pam_log(LOG_ERR,"pam_parse: unknown option; %s",*argv);
+	    _pam_log(LOG_ERR, "unknown option; %s", *argv);
 	}
     }
     pl->conf_file[sizeof(pl->conf_file) - 1] = '\0';
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_localuser/pam_localuser.c Linux-PAM-0.80/modules/pam_localuser/pam_localuser.c
--- Linux-PAM-0.80.orig/modules/pam_localuser/pam_localuser.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_localuser/pam_localuser.c	2005-08-09 12:30:49 +0000
@@ -49,10 +49,11 @@
 
 #define PAM_SM_AUTH
 #define PAM_SM_ACCOUNT
-#include "../../libpam/include/security/pam_modules.h"
-#include "../../libpam/include/security/_pam_macros.h"
+#include <security/pam_modules.h>
+#include <security/_pam_macros.h>
+#include <security/_pam_modutil.h>
 
-#define MODULE_NAME "pam_localuser"
+DEFINE_PAM_LOG("pam_localuser")
 
 PAM_EXTERN
 int pam_sm_authenticate(pam_handle_t *pamh, int flags, int argc, const char **argv)
@@ -74,10 +75,8 @@ int pam_sm_authenticate(pam_handle_t *pa
 		if(strncmp("file=", argv[i], 5) == 0) {
 			filename = argv[i] + 5;
 			if(debug) {
-				openlog(MODULE_NAME, LOG_PID, LOG_AUTHPRIV);
-				syslog(LOG_DEBUG, "set filename to \"%s\"",
-				       filename);
-				closelog();
+				_pam_log(LOG_DEBUG, "set filename to \"%s\"",
+					 filename);
 			}
 		}
 	}
@@ -85,25 +84,18 @@ int pam_sm_authenticate(pam_handle_t *pa
 	/* open the file */
 	fp = fopen(filename, "r");
 	if(fp == NULL) {
-		openlog(MODULE_NAME, LOG_PID, LOG_AUTHPRIV);
-		syslog(LOG_ERR, "error opening \"%s\": %s", filename,
-		       strerror(errno));
-		closelog();
+		_pam_log(LOG_ERR, "error opening \"%s\": %m", filename);
 		return PAM_SYSTEM_ERR;
 	}
 
 	if(pam_get_user(pamh, &user, NULL) != PAM_SUCCESS) {
-		openlog(MODULE_NAME, LOG_PID, LOG_AUTHPRIV);
-		syslog(LOG_ERR, "user name not specified yet");
-		closelog();
+		_pam_log(LOG_ERR, "user name not specified yet");
 		fclose(fp);
 		return PAM_SYSTEM_ERR;
 	}
 
 	if ((user == NULL) || (strlen(user) == 0)) {
-		openlog(MODULE_NAME, LOG_PID, LOG_AUTHPRIV);
-		syslog(LOG_ERR, "user name not valid");
-		closelog();
+		_pam_log(LOG_ERR, "user name not valid");
 		fclose(fp);
 		return PAM_SYSTEM_ERR;
 	}
@@ -115,9 +107,7 @@ int pam_sm_authenticate(pam_handle_t *pa
 	i = strlen(name);
 	while(fgets(line, sizeof(line), fp) != NULL) {
 		if(debug) {
-			openlog(MODULE_NAME, LOG_PID, LOG_AUTHPRIV);
-			syslog(LOG_DEBUG, "checking \"%s\"", line);
-			closelog();
+			_pam_log(LOG_DEBUG, "checking \"%s\"", line);
 		}
 		if(strncmp(name, line, i) == 0) {
 			ret = PAM_SUCCESS;
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_mail/pam_mail.c Linux-PAM-0.80/modules/pam_mail/pam_mail.c
--- Linux-PAM-0.80.orig/modules/pam_mail/pam_mail.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_mail/pam_mail.c	2005-08-09 12:30:49 +0000
@@ -48,18 +48,7 @@
 #include <security/_pam_macros.h>
 #include <security/_pam_modutil.h>
 
-/* some syslogging */
-
-static void _log_err(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-mail", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_mail")
 
 /* argument parsing */
 
@@ -102,7 +91,7 @@ static int _pam_parse(int flags, int arg
 		D(("new mail directory: %s", *maildir));
 		ctrl |= PAM_NEW_MAIL_DIR;
 	    } else {
-		_log_err(LOG_CRIT,
+		_pam_log(LOG_CRIT,
 			 "failed to duplicate mail directory - ignored");
 	    }
 	} else if (!strncmp(*argv,"hash=",5)) {
@@ -120,7 +109,7 @@ static int _pam_parse(int flags, int arg
 	} else if (!strcmp(*argv,"empty")) {
 	    ctrl |= PAM_EMPTY_TOO;
 	} else {
-	    _log_err(LOG_ERR,"pam_parse: unknown option; %s",*argv);
+	    _pam_log(LOG_ERR, "unknown option; %s", *argv);
 	}
     }
 
@@ -154,12 +143,12 @@ static int converse(pam_handle_t *pamh, 
 	D(("returned from application's conversation function"));
 
 	if (retval != PAM_SUCCESS && (PAM_DEBUG_ARG & ctrl) ) {
-	    _log_err(LOG_DEBUG, "conversation failure [%s]"
+	    _pam_log(LOG_DEBUG, "conversation failure [%s]"
 		     , pam_strerror(pamh, retval));
 	}
 
     } else {
-	_log_err(LOG_ERR, "couldn't obtain coversation function [%s]"
+	_pam_log(LOG_ERR, "couldn't obtain coversation function [%s]"
 		 , pam_strerror(pamh, retval));
 	if (retval == PAM_SUCCESS)
 	  retval = PAM_BAD_ITEM; /* conv was NULL */
@@ -180,7 +169,7 @@ static int get_folder(pam_handle_t *pamh
 
     retval = pam_get_user(pamh, &user, NULL);
     if (retval != PAM_SUCCESS || user == NULL) {
-	_log_err(LOG_ERR, "no user specified");
+	_pam_log(LOG_ERR, "no user specified");
 	return PAM_USER_UNKNOWN;
     }
 
@@ -189,7 +178,7 @@ static int get_folder(pam_handle_t *pamh
 	if (*path == '~') {       /* support for $HOME delivery */
 	    pwd = _pammodutil_getpwnam(pamh, user);
 	    if (pwd == NULL) {
-		_log_err(LOG_ERR, "user [%s] unknown", user);
+		_pam_log(LOG_ERR, "user [%s] unknown", user);
 		_pam_overwrite(*path_mail);
 		_pam_drop(*path_mail);
 		return PAM_USER_UNKNOWN;
@@ -198,14 +187,14 @@ static int get_folder(pam_handle_t *pamh
 	     * "~/xxx" and "~xxx" are treated as same
 	     */
 	    if (!*++path || (*path == '/' && !*++path)) {
-		_log_err(LOG_ALERT, "badly formed mail path [%s]", *path_mail);
+		_pam_log(LOG_ALERT, "badly formed mail path [%s]", *path_mail);
 		_pam_overwrite(*path_mail);
 		_pam_drop(*path_mail);
 		return PAM_ABORT;
 	    }
 	    ctrl |= PAM_HOME_MAIL;
 	    if (hashcount != 0) {
-		_log_err(LOG_ALERT, "can't do hash= and home directory mail");
+		_pam_log(LOG_ALERT, "can't do hash= and home directory mail");
 	    }
 	}
     } else {
@@ -242,7 +231,7 @@ static int get_folder(pam_handle_t *pamh
 		_pam_drop(hash);
 	    } else {
 	      _pam_drop(folder);
-	      _log_err(LOG_CRIT, "out of memory for mail folder");
+	      _pam_log(LOG_CRIT, "out of memory for mail folder");
 	      return PAM_BUF_ERR;
 	    }
 	}
@@ -256,7 +245,7 @@ static int get_folder(pam_handle_t *pamh
     user = NULL;
 
     if (folder == NULL) {
-	_log_err(LOG_CRIT, "out of memory for mail folder");
+	_pam_log(LOG_CRIT, "out of memory for mail folder");
 	return PAM_BUF_ERR;
     }
 
@@ -451,11 +440,11 @@ static int _do_mail(pam_handle_t *pamh, 
 	    if (retval != PAM_SUCCESS) {
 		_pam_overwrite(folder);
 		_pam_drop(folder);
-		_log_err(LOG_CRIT, "unable to set " MAIL_ENV_NAME " variable");
+		_pam_log(LOG_CRIT, "unable to set " MAIL_ENV_NAME " variable");
 		return retval;
 	    }
 	} else {
-	    _log_err(LOG_CRIT, "no memory for " MAIL_ENV_NAME " variable");
+	    _pam_log(LOG_CRIT, "no memory for " MAIL_ENV_NAME " variable");
 	    _pam_overwrite(folder);
 	    _pam_drop(folder);
 	    return retval;
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_mkhomedir/pam_mkhomedir.c Linux-PAM-0.80/modules/pam_mkhomedir/pam_mkhomedir.c
--- Linux-PAM-0.80.orig/modules/pam_mkhomedir/pam_mkhomedir.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_mkhomedir/pam_mkhomedir.c	2005-08-09 12:30:49 +0000
@@ -62,18 +62,7 @@
 static unsigned int UMask = 0022;
 static char SkelDir[BUFSIZ] = "/etc/skel"; /* THIS MODULE IS NOT THREAD SAFE */
 
-/* some syslogging */
-static void
-_log_err (int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-mkhomedir", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_mkhomedir")
 
 static int
 _pam_parse (int flags, int argc, const char **argv)
@@ -95,7 +84,7 @@ _pam_parse (int flags, int argc, const c
 	 strncpy(SkelDir,*argv+5,sizeof(SkelDir));
 	 SkelDir[sizeof(SkelDir)-1] = '\0';
       } else {
-	 _log_err(LOG_ERR, "unknown option; %s", *argv);
+	 _pam_log(LOG_ERR, "unknown option; %s", *argv);
       }
    }
 
@@ -128,14 +117,14 @@ static int converse(pam_handle_t * pamh,
 
       if (retval != PAM_SUCCESS && (ctrl & MKHOMEDIR_DEBUG))
       {
-	 _log_err(LOG_DEBUG, "conversation failure [%s]"
+	 _pam_log(LOG_DEBUG, "conversation failure [%s]"
 		  ,pam_strerror(pamh, retval));
       }
 
    }
    else
    {
-      _log_err(LOG_ERR, "couldn't obtain coversation function [%s]"
+      _pam_log(LOG_ERR, "couldn't obtain coversation function [%s]"
 	       ,pam_strerror(pamh, retval));
      if (retval == PAM_SUCCESS)
          retval = PAM_BAD_ITEM; /* conv was NULL */
@@ -231,7 +220,7 @@ create_homedir (pam_handle_t * pamh, int
    /* Create the new directory */
    if (rec_mkdir (dest,0755) != 0)
    {
-      _log_err(LOG_DEBUG, "unable to create directory %s",dest);
+      _pam_log(LOG_DEBUG, "unable to create directory %s", dest);
       return PAM_PERM_DENIED;
    }
 
@@ -246,7 +235,7 @@ create_homedir (pam_handle_t * pamh, int
    D = opendir (source);
    if (D == 0)
    {
-      _log_err(LOG_DEBUG, "unable to read directory %s",source);
+      _pam_log(LOG_DEBUG, "unable to read directory %s", source);
       retval = PAM_PERM_DENIED;
       goto go_out;
    }
@@ -384,7 +373,7 @@ create_homedir (pam_handle_t * pamh, int
                if (lchown(newdest,pwd->pw_uid,pwd->pw_gid) != 0)
                {
                    closedir(D);
-                   _log_err(LOG_DEBUG, "unable to change perms on link %s",
+                   _pam_log(LOG_DEBUG, "unable to change perms on link %s",
                             newdest);
 #ifndef PATH_MAX
 		   free(pointed);
@@ -420,7 +409,7 @@ create_homedir (pam_handle_t * pamh, int
       if ((SrcFd = open(newsource,O_RDONLY)) < 0 || fstat(SrcFd,&St) != 0)
       {
          closedir(D);
-         _log_err(LOG_DEBUG, "unable to open src file %s",newsource);
+         _pam_log(LOG_DEBUG, "unable to open src file %s", newsource);
 
 #ifndef PATH_MAX
 	 free(newsource); newsource = NULL;
@@ -436,7 +425,7 @@ create_homedir (pam_handle_t * pamh, int
       {
 	 close(SrcFd);
 	 closedir(D);
-         _log_err(LOG_DEBUG, "unable to open dest file %s",newdest);
+         _pam_log(LOG_DEBUG, "unable to open dest file %s", newdest);
 
 #ifndef PATH_MAX
 	 free(newsource); newsource = NULL;
@@ -454,7 +443,7 @@ create_homedir (pam_handle_t * pamh, int
          close(SrcFd);
          close(DestFd);
          closedir(D);
-         _log_err(LOG_DEBUG, "unable to chang perms on copy %s",newdest);
+         _pam_log(LOG_DEBUG, "unable to chang perms on copy %s", newdest);
 
 #ifndef PATH_MAX
 	 free(newsource); newsource = NULL;
@@ -482,7 +471,7 @@ create_homedir (pam_handle_t * pamh, int
 	 close(SrcFd);
 	 close(DestFd);
 	 closedir(D);
-	 _log_err(LOG_DEBUG, "unable to perform IO");
+	 _pam_log(LOG_DEBUG, "unable to perform IO");
 
 #ifndef PATH_MAX
 	 free(newsource); newsource = NULL;
@@ -510,7 +499,7 @@ create_homedir (pam_handle_t * pamh, int
    if (chmod(dest,0777 & (~UMask)) != 0 ||
        chown(dest,pwd->pw_uid,pwd->pw_gid) != 0)
    {
-      _log_err(LOG_DEBUG, "unable to change perms on directory %s",dest);
+      _pam_log(LOG_DEBUG, "unable to change perms on directory %s", dest);
       return PAM_PERM_DENIED;
    }
 
@@ -535,7 +524,7 @@ int pam_sm_open_session(pam_handle_t * p
    retval = pam_get_item(pamh, PAM_USER, &user);
    if (retval != PAM_SUCCESS || user == NULL || *(const char *)user == '\0')
    {
-      _log_err(LOG_NOTICE, "user unknown");
+      _pam_log(LOG_NOTICE, "user unknown");
       return PAM_USER_UNKNOWN;
    }
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_rhosts/pam_rhosts_auth.c Linux-PAM-0.80/modules/pam_rhosts/pam_rhosts_auth.c
--- Linux-PAM-0.80.orig/modules/pam_rhosts/pam_rhosts_auth.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_rhosts/pam_rhosts_auth.c	2005-08-09 12:30:49 +0000
@@ -124,17 +124,7 @@ struct _options {
     const char *last_error;
 };
 
-/* logging */
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("pam_rhosts_auth", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_rhosts_auth")
 
 static void set_option (struct _options *opts, const char *arg)
 {
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_rootok/pam_rootok.c Linux-PAM-0.80/modules/pam_rootok/pam_rootok.c
--- Linux-PAM-0.80.orig/modules/pam_rootok/pam_rootok.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_rootok/pam_rootok.c	2005-08-09 12:30:49 +0000
@@ -24,19 +24,9 @@
 #define PAM_SM_AUTH
 
 #include <security/pam_modules.h>
+#include <security/_pam_modutil.h>
 
-/* some syslogging */
-
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-rootok", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_rootok")
 
 
 #ifdef WITH_SELINUX
@@ -60,7 +50,7 @@ static int _pam_parse(int argc, const ch
 	if (!strcmp(*argv,"debug"))
 	    ctrl |= PAM_DEBUG_ARG;
 	else {
-	    _pam_log(LOG_ERR,"pam_parse: unknown option; %s",*argv);
+	    _pam_log(LOG_ERR, "unknown option; %s", *argv);
 	}
     }
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_securetty/pam_securetty.c Linux-PAM-0.80/modules/pam_securetty/pam_securetty.c
--- Linux-PAM-0.80.orig/modules/pam_securetty/pam_securetty.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_securetty/pam_securetty.c	2005-08-09 12:30:49 +0000
@@ -36,18 +36,7 @@
 #include <security/pam_modules.h>
 #include <security/_pam_modutil.h>
 
-/* some syslogging */
-
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-securetty", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_securetty")
 
 /* argument parsing */
 
@@ -65,7 +54,7 @@ static int _pam_parse(int argc, const ch
 	if (!strcmp(*argv,"debug"))
 	    ctrl |= PAM_DEBUG_ARG;
 	else {
-	    _pam_log(LOG_ERR,"pam_parse: unknown option; %s",*argv);
+	    _pam_log(LOG_ERR, "unknown option; %s", *argv);
 	}
     }
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_shells/pam_shells.c Linux-PAM-0.80/modules/pam_shells/pam_shells.c
--- Linux-PAM-0.80.orig/modules/pam_shells/pam_shells.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_shells/pam_shells.c	2005-08-09 12:30:49 +0000
@@ -33,18 +33,7 @@
 #include <security/pam_modules.h>
 #include <security/_pam_modutil.h>
 
-/* some syslogging */
-
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-shells", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_shells")
 
 static int perform_check(pam_handle_t *pamh, int flags)
 {
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_stress/pam_stress.c Linux-PAM-0.80/modules/pam_stress/pam_stress.c
--- Linux-PAM-0.80.orig/modules/pam_stress/pam_stress.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_stress/pam_stress.c	2005-08-09 12:30:49 +0000
@@ -30,20 +30,9 @@
 
 #include <security/pam_modules.h>
 #include <security/_pam_macros.h>
+#include <security/_pam_modutil.h>
 
-
-/* log errors */
-
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-stress", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_stress")
 
 /* ---------- */
 
@@ -120,7 +109,7 @@ static int _pam_parse(int argc, const ch
 	       ctrl |= PAM_ST_REQUIRE_PWD;
 
 	  else {
-	       _pam_log(LOG_ERR,"pam_parse: unknown option; %s",*argv);
+	       _pam_log(LOG_ERR, "unknown option; %s", *argv);
 	  }
      }
 
@@ -132,7 +121,7 @@ static int converse(pam_handle_t *pamh, 
 		    , struct pam_response **response)
 {
      int retval;
-     const void *void_conv;
+     const void *void_conv = NULL;
      const struct pam_conv *conv;
 
      retval = pam_get_item(pamh,PAM_CONV,&void_conv);
@@ -141,11 +130,11 @@ static int converse(pam_handle_t *pamh, 
 	  retval = conv->conv(nargs, (const struct pam_message **) message
 			      , response, conv->appdata_ptr);
 	  if (retval != PAM_SUCCESS) {
-	       _pam_log(LOG_ERR,"(pam_stress) converse returned %d",retval);
-	       _pam_log(LOG_ERR,"that is: %s",pam_strerror(pamh, retval));
+	       _pam_log(LOG_ERR, "converse returned %d: %s",
+			retval, pam_strerror(pamh, retval));
 	  }
      } else {
-	  _pam_log(LOG_ERR,"(pam_stress) converse failed to get pam_conv");
+	  _pam_log(LOG_ERR,"converse failed to get pam_conv");
          if (retval == PAM_SUCCESS)
              retval = PAM_BAD_ITEM; /* conv was null */
      }
@@ -168,7 +157,7 @@ static int stress_get_password(pam_handl
 	  if ((pass = strdup(pam_pass)) == NULL)
 	       return PAM_BUF_ERR;
      } else if ((ctrl & PAM_ST_USE_PASS1)) {
-	  _pam_log(LOG_WARNING, "pam_stress: no forwarded password");
+	  _pam_log(LOG_WARNING, "no forwarded password");
 	  return PAM_PERM_DENIED;
      } else {                                /* we will have to get one */
 	  struct pam_message msg[1],*pmsg[1];
@@ -277,7 +266,8 @@ int pam_sm_authenticate(pam_handle_t *pa
           const void *pam_pass;
 	  (void) pam_get_item(pamh,PAM_AUTHTOK,&pam_pass);
 	  _pam_log(LOG_DEBUG,
-		   "pam_st_authenticate: password entered is: [%s]\n",pam_pass);
+		   "pam_st_authenticate: password entered is: [%s]",
+		   (const char *)pam_pass);
      }
 
      /* if we signal a fail for this function then fail */
@@ -359,8 +349,8 @@ int pam_sm_open_session(pam_handle_t *pa
 	  return PAM_SESSION_ERR;
      }
 
-     _pam_log(LOG_NOTICE,"pam_stress: opened [%s] session for user [%s]"
-	      , service, username);
+     _pam_log(LOG_NOTICE,"opened [%s] session for user [%s]",
+	      (const char *)service, (const char *)username);
 
      if (ctrl & PAM_ST_FAIL_1)
 	  return PAM_SESSION_ERR;
@@ -387,8 +377,8 @@ int pam_sm_close_session(pam_handle_t *p
 	  return PAM_SESSION_ERR;
      }
 
-     _pam_log(LOG_NOTICE,"pam_stress: closed [%s] session for user [%s]"
-	      , service, username);
+     _pam_log(LOG_NOTICE, "closed [%s] session for user [%s]",
+	      (const char *)service, (const char *)username);
 
      if (ctrl & PAM_ST_FAIL_2)
 	  return PAM_SESSION_ERR;
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_succeed_if/pam_succeed_if.c Linux-PAM-0.80/modules/pam_succeed_if/pam_succeed_if.c
--- Linux-PAM-0.80.orig/modules/pam_succeed_if/pam_succeed_if.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_succeed_if/pam_succeed_if.c	2005-08-09 12:30:49 +0000
@@ -55,25 +55,7 @@
 #include <security/pam_modules.h>
 #include <security/_pam_modutil.h>
 
-#define MODULE "pam_succeed_if"
-
-static void
-log_error(int priority, const char *fmt, ...)
-{
-	va_list va;
-	char *fmt2;
-	fmt2 = malloc(strlen(fmt) + strlen(MODULE) + 3);
-	va_start(va, fmt);
-	if (fmt2 == NULL) {
-		vsyslog(LOG_AUTHPRIV | priority, fmt, va);
-	} else {
-		snprintf(fmt2, strlen(fmt) + strlen(MODULE) + 3,
-			 "%s: %s", MODULE, fmt);
-		vsyslog(LOG_AUTHPRIV | priority, fmt2, va);
-		free(fmt2);
-	}
-	va_end(va);
-}
+DEFINE_PAM_LOG("pam_succeed_if")
 
 /* Basically, run cmp(atol(left), atol(right)), returning PAM_SUCCESS if
  * the function returns non-zero, PAM_AUTH_ERR if it returns zero, and
@@ -88,13 +70,13 @@ evaluate_num(const char *left, const cha
 	errno = 0;
 	l = strtol(left, &p, 0);
 	if ((p == NULL) || (*p != '\0') || errno) {
-		log_error(LOG_INFO, "\"%s\" is not a number", left);
+		_pam_log(LOG_INFO, "not a number: \"%s\"", left);
 		ret = PAM_SERVICE_ERR;
 	}
 
 	r = strtol(right, &p, 0);
 	if ((p == NULL) || (*p != '\0') || errno) {
-		log_error(LOG_INFO, "\"%s\" is not a number", right);
+		_pam_log(LOG_INFO, "not a number: \"%s\"", right);
 		ret = PAM_SERVICE_ERR;
 	}
 
@@ -263,11 +245,11 @@ evaluate(pam_handle_t *pamh, int debug,
 	}
 	/* If we have no idea what's going on, return an error. */
 	if (left != buf) {
-		log_error(LOG_CRIT, "unknown attribute \"%s\"", left);
+		_pam_log(LOG_CRIT, "unknown attribute: \"%s\"", left);
 		return PAM_SERVICE_ERR;
 	}
 	if (debug) {
-		log_error(LOG_DEBUG, "'%s' resolves to '%s'", attribute, left);
+		_pam_log(LOG_DEBUG, "'%s' resolves to '%s'", attribute, left);
 	}
 
 	/* Attribute value < some threshold. */
@@ -368,7 +350,7 @@ pam_sm_authenticate(pam_handle_t *pamh, 
 		/* Get information about the user. */
 		pwd = _pammodutil_getpwuid(pamh, getuid());
 		if (pwd == NULL) {
-			log_error(LOG_CRIT,
+			_pam_log(LOG_CRIT,
 				  "error retrieving information about user %ld",
 				  (long)getuid());
 			return PAM_SERVICE_ERR;
@@ -378,7 +360,7 @@ pam_sm_authenticate(pam_handle_t *pamh, 
 		/* Get the user's name. */
 		ret = pam_get_user(pamh, &user, prompt);
 		if ((ret != PAM_SUCCESS) || (user == NULL)) {
-			log_error(LOG_CRIT, "error retrieving user name: %s",
+			_pam_log(LOG_CRIT, "error retrieving user name: %s",
 				  pam_strerror(pamh, ret));
 			return ret;
 		}
@@ -386,7 +368,7 @@ pam_sm_authenticate(pam_handle_t *pamh, 
 		/* Get information about the user. */
 		pwd = _pammodutil_getpwnam(pamh, user);
 		if (pwd == NULL) {
-			log_error(LOG_CRIT,
+			_pam_log(LOG_CRIT,
 				  "error retrieving information about user %s",
 				  user);
 			return PAM_SERVICE_ERR;
@@ -403,7 +385,7 @@ pam_sm_authenticate(pam_handle_t *pamh, 
 				       pwd);
 			if (ret != PAM_SUCCESS) {
 				if(!quiet_fail)
-					log_error(LOG_INFO,
+					_pam_log(LOG_INFO,
 						  "requirement \"%s %s %s\" "
 						  "not met by user \"%s\"",
 						  left, qual, right, user);
@@ -411,7 +393,7 @@ pam_sm_authenticate(pam_handle_t *pamh, 
 			}
 			else
 				if(!quiet_succ)
-					log_error(LOG_INFO,
+					_pam_log(LOG_INFO,
 						  "requirement \"%s %s %s\" "
 						  "was met by user \"%s\"",
 						  left, qual, right, user);
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_tally/pam_tally.c Linux-PAM-0.80/modules/pam_tally/pam_tally.c
--- Linux-PAM-0.80.orig/modules/pam_tally/pam_tally.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_tally/pam_tally.c	2005-08-09 12:30:49 +0000
@@ -97,26 +97,21 @@ struct tally_options {
 #define OPT_NO_RESET			 040
 #define OPT_AUDIT                        100
 
-
-/*---------------------------------------------------------------------*/
-
-/* some syslogging */
-
-static void _pam_log(int err, const char *format, ...)
+#ifdef MAIN
+static void PAM_MODUTIL_FORMAT((printf, 2, 3)) PAM_MODUTIL_NONNULL((2))
+_pam_log(int err, const char *format, ...)
 {
-    va_list args;
-    va_start(args, format);
+	va_list args;
 
-#ifdef MAIN
-    vfprintf(stderr,format,args);
-    fprintf(stderr,"\n");
+	va_start(args, format);
+	fprintf(stderr, "%s: ", MODULE_NAME);
+	vfprintf(stderr, format, args);
+	fprintf(stderr,"\n");
+	va_end(args);
+}
 #else
-    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    closelog();
+DEFINE_PAM_LOG(MODULE_NAME)
 #endif
-    va_end(args);
-}
 
 /*---------------------------------------------------------------------*/
 
@@ -128,7 +123,7 @@ static void log_phase_no_auth( int phase
 {
     if ( phase != PHASE_AUTH ) {
     	_pam_log(LOG_ERR,
-    	         MODULE_NAME ": option %s allowed in auth phase only", argv);
+    	         "option %s allowed in auth phase only", argv);
     }
 }
 
@@ -143,9 +138,7 @@ static int tally_parse_args( struct tall
       if ( ! strncmp( *argv, "file=", 5 ) ) {
 	const char *from = *argv + 5;
         if ( *from!='/' || strlen(from)>FILENAME_MAX-1 ) {
-          _pam_log(LOG_ERR,
-                   MODULE_NAME ": filename not /rooted or too long; ",
-                   *argv);
+          _pam_log(LOG_ERR, "filename not /rooted or too long; %s", *argv);
           return PAM_AUTH_ERR;
         }
         opts->filename = from;
@@ -201,7 +194,7 @@ static int tally_parse_args( struct tall
 	opts->ctrl |= OPT_AUDIT;
       }
       else {
-        _pam_log(LOG_ERR, MODULE_NAME ": unknown option; %s",*argv);
+        _pam_log(LOG_ERR, "unknown option; %s",*argv);
       }
     }
 
@@ -231,14 +224,14 @@ static int pam_get_uid( pam_handle_t *pa
 #endif
 
     if ( !user || !*user ) {
-      _pam_log(LOG_ERR, MODULE_NAME ": pam_get_uid; user?");
+      _pam_log(LOG_ERR, "pam_get_uid; user?");
       return PAM_AUTH_ERR;
     }
 
     if ( ! ( pw = _pammodutil_getpwnam( pamh, user ) ) ) {
       opts->ctrl & OPT_AUDIT ?
-	      _pam_log(LOG_ERR,MODULE_NAME ": pam_get_uid; no such user %s",user) :
-	      _pam_log(LOG_ERR,MODULE_NAME ": pam_get_uid; no such user");
+	      _pam_log(LOG_ERR, "pam_get_uid; no such user %s",user) :
+	      _pam_log(LOG_ERR, "pam_get_uid; no such user");
       return PAM_USER_UNKNOWN;
     }
 
@@ -380,19 +373,19 @@ static int set_tally( tally_t tally,
     if ( tally!=TALLY_HI )
       {
         if ( fseek( *TALLY, uid * sizeof(struct faillog), SEEK_SET ) ) {
-                  _pam_log(LOG_ALERT, "fseek failed %s", filename);
+                  _pam_log(LOG_ALERT, "fseek failed for %s: %m", filename);
                             return PAM_AUTH_ERR;
         }
         fsp->fs_faillog.fail_cnt = tally;
         if (fwrite((char *) &fsp->fs_faillog,
 		   sizeof(struct faillog), 1, *TALLY)==0 ) {
-	    _pam_log(LOG_ALERT, "tally update (fwrite) failed.", filename);
+	    _pam_log(LOG_ALERT, "update (fwrite) failed for %s: %m", filename);
 	    return PAM_AUTH_ERR;
         }
       }
 
     if ( fclose(*TALLY) ) {
-      _pam_log(LOG_ALERT, "tally update (fclose) failed.", filename);
+      _pam_log(LOG_ALERT, "update (fclose) failed for %s: %m", filename);
       return PAM_AUTH_ERR;
     }
     *TALLY=NULL;
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_time/pam_time.c Linux-PAM-0.80/modules/pam_time/pam_time.c
--- Linux-PAM-0.80.orig/modules/pam_time/pam_time.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_time/pam_time.c	2005-08-09 12:30:49 +0000
@@ -57,19 +57,11 @@ typedef enum { AND, OR } operator;
 
 #include <security/_pam_macros.h>
 #include <security/pam_modules.h>
+#include <security/_pam_modutil.h>
 
-/* --- static functions for checking whether the user should be let in --- */
-
-static void _log_err(const char *format, ... )
-{
-    va_list args;
+DEFINE_PAM_LOG("pam_time")
 
-    va_start(args, format);
-    openlog("pam_time", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(LOG_CRIT, format, args);
-    va_end(args);
-    closelog();
-}
+/* --- static functions for checking whether the user should be let in --- */
 
 static void shift_bytes(char *mem, int from, int by)
 {
@@ -86,7 +78,7 @@ static int read_field(int fd, char **buf
     if (! *buf) {
 	*buf = (char *) malloc(PAM_TIME_BUFLEN);
 	if (! *buf) {
-	    _log_err("out of memory");
+	    _pam_log(LOG_ERR, "out of memory");
 	    D(("no memory"));
 	    return -1;
 	}
@@ -97,7 +89,7 @@ static int read_field(int fd, char **buf
     /* do we have a file open ? return error */
 
     if (fd < 0 && *to <= 0) {
-	_log_err( PAM_TIME_CONF " not opened");
+	_pam_log(LOG_ERR, "error opening" PAM_TIME_CONF);
 	memset(*buf, 0, PAM_TIME_BUFLEN);
 	_pam_drop(*buf);
 	return -1;
@@ -126,7 +118,7 @@ static int read_field(int fd, char **buf
 
 	i = read(fd, *to + *buf, PAM_TIME_BUFLEN - *to);
 	if (i < 0) {
-	    _log_err("error reading " PAM_TIME_CONF);
+	    _pam_log(LOG_ERR, "error reading " PAM_TIME_CONF);
 	    close(fd);
 	    return -1;
 	} else if (!i) {
@@ -165,8 +157,8 @@ static int read_field(int fd, char **buf
 		    *to -= j-i;
 		    ++i;
 		} else {
-		    _log_err("internal error in " __FILE__
-			     " at line %d", __LINE__ );
+		    _pam_log(LOG_CRIT, "internal error in %s at line %d",
+			      __FILE__, __LINE__);
 		    close(fd);
 		    return -1;
 		}
@@ -297,7 +289,9 @@ static boolean logic_field(const void *m
 			 left |= right;
 		    next = OP;
 	       } else {
-		    _log_err("garbled syntax; expected name (rule #%d)", rule);
+		    _pam_log(LOG_ERR,
+			      "garbled syntax; expected name (rule #%d)",
+			      rule);
 		    return FALSE;
 	       }
 	  } else {   /* OP */
@@ -309,8 +303,9 @@ static boolean logic_field(const void *m
 		    oper = OR;
 		    break;
 	       default:
-		    _log_err("garbled syntax; expected & or | (rule #%d)"
-			     , rule);
+		    _pam_log(LOG_ERR,
+			      "garbled syntax; expected & or | (rule #%d)",
+			      rule);
 		    D(("%c at %d",c,at));
 		    return FALSE;
 	       }
@@ -389,7 +384,8 @@ static boolean check_time(const void *AT
 
      if (times == NULL) {
 	  /* this should not happen */
-	  _log_err("internal error: " __FILE__ " line %d", __LINE__);
+	  _pam_log(LOG_CRIT, "internal error in %s line %d",
+		    __FILE__, __LINE__);
 	  return FALSE;
      }
 
@@ -413,13 +409,13 @@ static boolean check_time(const void *AT
 	  }
 	  j += 2;
 	  if (this_day == -1) {
-	       _log_err("bad day specified (rule #%d)", rule);
+	       _pam_log(LOG_ERR, "bad day specified (rule #%d)", rule);
 	       return FALSE;
 	  }
 	  marked_day ^= this_day;
      }
      if (marked_day == 0) {
-	  _log_err("no day specified");
+	  _pam_log(LOG_ERR, "no day specified");
 	  return FALSE;
      }
      D(("day range = 0%o", marked_day));
@@ -443,7 +439,7 @@ static boolean check_time(const void *AT
 
      D(("i=%d, time_end=%d, times[j]='%c'", i, time_end, times[j]));
      if (i != 5 || time_end == -1) {
-	  _log_err("no/bad times specified (rule #%d)", rule);
+	  _pam_log(LOG_ERR, "no/bad times specified (rule #%d)", rule);
 	  return TRUE;
      }
      D(("times(%d to %d)", time_start,time_end));
@@ -506,7 +502,7 @@ static int check_account(const char *ser
 
 	  fd = read_field(fd,&buffer,&from,&to);
 	  if (!buffer || !buffer[0]) {
-	       _log_err(PAM_TIME_CONF "; no tty entry #%d", count);
+	       _pam_log(LOG_ERR, PAM_TIME_CONF "; no tty entry #%d", count);
 	       continue;
 	  }
 	  good &= logic_field(tty, buffer, count, is_same);
@@ -516,7 +512,7 @@ static int check_account(const char *ser
 
 	  fd = read_field(fd,&buffer,&from,&to);
 	  if (!buffer || !buffer[0]) {
-	       _log_err(PAM_TIME_CONF "; no user entry #%d", count);
+	       _pam_log(LOG_ERR, PAM_TIME_CONF "; no user entry #%d", count);
 	       continue;
 	  }
 	  good &= logic_field(user, buffer, count, is_same);
@@ -526,7 +522,7 @@ static int check_account(const char *ser
 
 	  fd = read_field(fd,&buffer,&from,&to);
 	  if (!buffer || !buffer[0]) {
-	       _log_err(PAM_TIME_CONF "; no time entry #%d", count);
+	       _pam_log(LOG_ERR, PAM_TIME_CONF "; no time entry #%d", count);
 	       continue;
 	  }
 
@@ -535,7 +531,8 @@ static int check_account(const char *ser
 
 	  fd = read_field(fd,&buffer,&from,&to);
 	  if (buffer && buffer[0]) {
-	       _log_err(PAM_TIME_CONF "; poorly terminated rule #%d", count);
+	       _pam_log(LOG_ERR, PAM_TIME_CONF "; poorly terminated rule #%d",
+			 count);
 	       continue;
 	  }
 
@@ -566,7 +563,7 @@ PAM_EXTERN int pam_sm_acct_mgmt(pam_hand
 
     if (pam_get_item(pamh, PAM_SERVICE, &service)
 	!= PAM_SUCCESS || service == NULL) {
-	_log_err("cannot find the current service name");
+	_pam_log(LOG_ERR, "cannot find the current service name");
 	return PAM_ABORT;
     }
 
@@ -574,7 +571,7 @@ PAM_EXTERN int pam_sm_acct_mgmt(pam_hand
 
     if (pam_get_user(pamh, &user, NULL) != PAM_SUCCESS || user == NULL
 	|| *user == '\0') {
-	_log_err("cannot determine the user's name");
+	_pam_log(LOG_ERR, "cannot determine the user's name");
 	return PAM_USER_UNKNOWN;
     }
 
@@ -585,11 +582,11 @@ PAM_EXTERN int pam_sm_acct_mgmt(pam_hand
 	D(("PAM_TTY not set, probing stdin"));
 	tty = ttyname(STDIN_FILENO);
 	if (tty == NULL) {
-	    _log_err("couldn't get the tty name");
+	    _pam_log(LOG_ERR, "couldn't get the tty name");
 	    return PAM_ABORT;
 	}
 	if (pam_set_item(pamh, PAM_TTY, tty) != PAM_SUCCESS) {
-	    _log_err("couldn't set tty name");
+	    _pam_log(LOG_ERR, "couldn't set tty name");
 	    return PAM_ABORT;
 	}
     }
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_userdb/pam_userdb.c Linux-PAM-0.80/modules/pam_userdb/pam_userdb.c
--- Linux-PAM-0.80.orig/modules/pam_userdb/pam_userdb.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_userdb/pam_userdb.c	2005-08-09 12:30:49 +0000
@@ -46,19 +46,9 @@
 #define PAM_SM_ACCOUNT
 
 #include <security/pam_modules.h>
+#include <security/_pam_modutil.h>
 
-/* some syslogging */
-
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG(MODULE_NAME)
 
 static int
 _pam_parse (int argc, const char **argv,
@@ -237,8 +227,7 @@ user_lookup (const char *database, const
         int saw_user = 0;
 
 	if (ctrl & PAM_DEBUG_ARG) {
-	    _pam_log(LOG_INFO, "error returned by dbm_fetch: %s",
-		     strerror(errno));
+	    _pam_log(LOG_INFO, "error returned by dbm_fetch: %m");
 	}
 
 	/* probably we should check dbm_error() here */
@@ -352,7 +341,7 @@ int pam_sm_authenticate(pam_handle_t *pa
 
      if (ctrl & PAM_DEBUG_ARG)
 	 _pam_log(LOG_INFO, "Verify user `%s' with password `%s'",
-		  username, password);
+		  username, (const char *)password);
 
      /* Now use the username to look up password in the database file */
      retval = user_lookup(database, cryptmode, username, password, ctrl);
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_warn/pam_warn.c Linux-PAM-0.80/modules/pam_warn/pam_warn.c
--- Linux-PAM-0.80.orig/modules/pam_warn/pam_warn.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_warn/pam_warn.c	2005-08-09 12:30:49 +0000
@@ -24,39 +24,35 @@
 #define PAM_SM_PASSWORD
 
 #include <security/pam_modules.h>
+#include <security/_pam_modutil.h>
 
 /* some syslogging */
 
+DEFINE_PAM_LOG("pam_warn")
+
 #define OBTAIN(item, value, default_value)  do {                \
      (void) pam_get_item(pamh, item, &value);                   \
      value = value ? value : default_value ;                    \
 } while (0)
 
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-warn", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
-
-static void log_items(pam_handle_t *pamh, const char *function)
+static void
+log_items(pam_handle_t * pamh, const char *function)
 {
-     const void *service=NULL, *user=NULL, *terminal=NULL,
-	 *rhost=NULL, *ruser=NULL;
-
-     OBTAIN(PAM_SERVICE, service, "<unknown>");
-     OBTAIN(PAM_TTY, terminal, "<unknown>");
-     OBTAIN(PAM_USER, user, "<unknown>");
-     OBTAIN(PAM_RUSER, ruser, "<unknown>");
-     OBTAIN(PAM_RHOST, rhost, "<unknown>");
+    const void *service = NULL, *user = NULL, *terminal = NULL,
+	       *rhost = NULL, *ruser = NULL;
 
-     _pam_log(LOG_NOTICE, "function=[%s] service=[%s] terminal=[%s] user=[%s]"
-	      " ruser=[%s] rhost=[%s]\n",
-	      function, service, terminal, user, ruser, rhost);
+    OBTAIN(PAM_SERVICE, service, "<unknown>");
+    OBTAIN(PAM_TTY, terminal, "<unknown>");
+    OBTAIN(PAM_USER, user, "<unknown>");
+    OBTAIN(PAM_RUSER, ruser, "<unknown>");
+    OBTAIN(PAM_RHOST, rhost, "<unknown>");
+
+    _pam_log(LOG_NOTICE, "function=[%s] service=[%s] "
+	     "terminal=[%s] user=[%s] "
+	     "ruser=[%s] rhost=[%s]",
+	     (const char *)function, (const char *)service,
+	     (const char *)terminal, (const char *)user,
+	     (const char *)ruser, (const char *)rhost);
 }
 
 /* --- authentication management functions (only) --- */
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_wheel/pam_wheel.c Linux-PAM-0.80/modules/pam_wheel/pam_wheel.c
--- Linux-PAM-0.80.orig/modules/pam_wheel/pam_wheel.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_wheel/pam_wheel.c	2005-08-09 12:30:49 +0000
@@ -45,18 +45,7 @@
 #include <security/pam_modules.h>
 #include <security/_pam_modutil.h>
 
-/* some syslogging */
-
-static void _pam_log(int err, const char *format, ...)
-{
-    va_list args;
-
-    va_start(args, format);
-    openlog("PAM-Wheel", LOG_CONS|LOG_PID, LOG_AUTH);
-    vsyslog(err, format, args);
-    va_end(args);
-    closelog();
-}
+DEFINE_PAM_LOG("pam_wheel")
 
 /* checks if a user is on a list of members of the GID 0 group */
 
@@ -103,7 +92,7 @@ static int _pam_parse(int argc, const ch
           else if (!strncmp(*argv,"group=",6))
 	       strncpy(use_group,*argv+6,group_length-1);
           else {
-               _pam_log(LOG_ERR,"pam_parse: unknown option; %s",*argv);
+               _pam_log(LOG_ERR, "unknown option; %s", *argv);
           }
      }
 
diff -upk.orig Linux-PAM-0.80.orig/modules/pam_xauth/pam_xauth.c Linux-PAM-0.80/modules/pam_xauth/pam_xauth.c
--- Linux-PAM-0.80.orig/modules/pam_xauth/pam_xauth.c	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pam_xauth/pam_xauth.c	2005-08-09 12:30:49 +0000
@@ -63,6 +63,8 @@
 #define XAUTHDEF ".Xauthority"
 #define XAUTHTMP ".xauthXXXXXX"
 
+DEFINE_PAM_LOG("pam_xauth")
+
 /* Run a given command (with a NULL-terminated argument list), feeding it the
  * given input on stdin, and storing any output it generates. */
 static int
@@ -197,15 +199,14 @@ check_acl(pam_handle_t *pamh,
 	/* Check this user's <sense> file. */
 	pwd = _pammodutil_getpwnam(pamh, this_user);
 	if (pwd == NULL) {
-		syslog(LOG_ERR, "pam_xauth: error determining "
-		       "home directory for '%s'", this_user);
+		_pam_log(LOG_ERR, "error determining home directory for '%s'",
+			 this_user);
 		return PAM_SESSION_ERR;
 	}
 	/* Figure out what that file is really named. */
 	i = snprintf(path, sizeof(path), "%s/.xauth/%s", pwd->pw_dir, sense);
 	if ((i >= sizeof(path)) || (i < 0)) {
-		syslog(LOG_ERR, "pam_xauth: name of user's home directory "
-		       "is too long");
+		_pam_log(LOG_ERR, "name of user's home directory is too long");
 		return PAM_SESSION_ERR;
 	}
 	euid = geteuid();
@@ -226,9 +227,9 @@ check_acl(pam_handle_t *pamh,
 			}
 			if (fnmatch(buf, other_user, 0) == 0) {
 				if (debug) {
-					syslog(LOG_DEBUG, "pam_xauth: %s %s "
-					       "allowed by %s",
-					       other_user, sense, path);
+					_pam_log(LOG_DEBUG,
+						 "%s %s allowed by %s",
+						 other_user, sense, path);
 				}
 				fclose(fp);
 				return PAM_SUCCESS;
@@ -236,8 +237,8 @@ check_acl(pam_handle_t *pamh,
 		}
 		/* If there's no match in the file, we fail. */
 		if (debug) {
-			syslog(LOG_DEBUG, "pam_xauth: %s not listed in %s",
-			       other_user, path);
+			_pam_log(LOG_DEBUG, "%s not listed in %s",
+				 other_user, path);
 		}
 		fclose(fp);
 		return PAM_PERM_DENIED;
@@ -247,20 +248,19 @@ check_acl(pam_handle_t *pamh,
 		case ENOENT:
 			if (noent_code == PAM_SUCCESS) {
 				if (debug) {
-					syslog(LOG_DEBUG, "%s does not exist, "
-					       "ignoring", path);
+					_pam_log(LOG_DEBUG, "%s does not exist, "
+						 "ignoring", path);
 				}
 			} else {
 				if (debug) {
-					syslog(LOG_DEBUG, "%s does not exist, "
-					       "failing", path);
+					_pam_log(LOG_DEBUG, "%s does not exist, "
+						 "failing", path);
 				}
 			}
 			return noent_code;
 		default:
 			if (debug) {
-				syslog(LOG_ERR, "%s opening %s",
-				       strerror(errno), path);
+				_pam_log(LOG_ERR, "error opening %s: %m", path);
 			}
 			return PAM_PERM_DENIED;
 		}
@@ -295,8 +295,8 @@ pam_sm_open_session(pam_handle_t *pamh, 
 			if ((strlen(argv[i] + 11) > 0) && (*tmp == '\0')) {
 				targetuser = l;
 			} else {
-				syslog(LOG_WARNING, "pam_xauth: invalid value "
-				       "for targetuser (`%s')", argv[i] + 11);
+				_pam_log(LOG_WARNING, "invalid value for "
+					 "targetuser (`%s')", argv[i] + 11);
 			}
 			continue;
 		}
@@ -305,35 +305,32 @@ pam_sm_open_session(pam_handle_t *pamh, 
 			if ((strlen(argv[i] + 11) > 0) && (*tmp == '\0')) {
 				systemuser = l;
 			} else {
-				syslog(LOG_WARNING, "pam_xauth: invalid value "
-				       "for systemuser (`%s')", argv[i] + 11);
+				_pam_log(LOG_WARNING, "invalid value for "
+					 "systemuser (`%s')", argv[i] + 11);
 			}
 			continue;
 		}
-		syslog(LOG_WARNING, "pam_xauth: unrecognized option `%s'",
-		       argv[i]);
+		_pam_log(LOG_WARNING, "unrecognized option `%s'", argv[i]);
 	}
 
 	/* If DISPLAY isn't set, we don't really care, now do we? */
 	if ((display = getenv("DISPLAY")) == NULL) {
 		if (debug) {
-			syslog(LOG_DEBUG, "pam_xauth: user has no DISPLAY,"
-			       " doing nothing");
+			_pam_log(LOG_DEBUG,
+				 "user has no DISPLAY, doing nothing");
 		}
 		return PAM_SUCCESS;
 	}
 
 	/* Read the target user's name. */
 	if (pam_get_user(pamh, &user, NULL) != PAM_SUCCESS) {
-		syslog(LOG_ERR, "pam_xauth: error determining target "
-		       "user's name");
+		_pam_log(LOG_ERR, "error determining target user's name");
 		retval = PAM_SESSION_ERR;
 		goto cleanup;
 	}
 	rpwd = _pammodutil_getpwuid(pamh, getuid());
 	if (rpwd == NULL) {
-		syslog(LOG_ERR, "pam_xauth: error determining invoking "
-		       "user's name");
+		_pam_log(LOG_ERR, "error determining invoking user's name");
 		retval = PAM_SESSION_ERR;
 		goto cleanup;
 	}
@@ -342,19 +339,18 @@ pam_sm_open_session(pam_handle_t *pamh, 
 	 * on the xauthority file we create later on. */
 	tpwd = _pammodutil_getpwnam(pamh, user);
 	if (tpwd == NULL) {
-		syslog(LOG_ERR, "pam_xauth: error determining target "
-		       "user's UID");
+		_pam_log(LOG_ERR, "error determining target user's UID");
 		retval = PAM_SESSION_ERR;
 		goto cleanup;
 	}
 
 	if (debug) {
-		syslog(LOG_DEBUG, "pam_xauth: requesting user %lu/%lu, "
-		       "target user %lu/%lu",
-		       (unsigned long) rpwd->pw_uid,
-		       (unsigned long) rpwd->pw_gid,
-		       (unsigned long) tpwd->pw_uid,
-		       (unsigned long) tpwd->pw_gid);
+		_pam_log(LOG_DEBUG, "requesting user %lu/%lu, "
+			 "target user %lu/%lu",
+			 (unsigned long) rpwd->pw_uid,
+			 (unsigned long) rpwd->pw_gid,
+			 (unsigned long) tpwd->pw_uid,
+			 (unsigned long) tpwd->pw_gid);
 	}
 
 	/* If the UID is a system account (and not the superuser), forget
@@ -363,8 +359,8 @@ pam_sm_open_session(pam_handle_t *pamh, 
 	    (tpwd->pw_uid != targetuser) &&
 	    (tpwd->pw_uid <= systemuser)) {
 		if (debug) {
-			syslog(LOG_DEBUG, "pam_xauth: not forwarding cookies "
-			       "to user ID %ld", (long) tpwd->pw_uid);
+			_pam_log(LOG_DEBUG, "not forwarding cookies "
+				 "to user ID %ld", (long) tpwd->pw_uid);
 		}
 		retval = PAM_SESSION_ERR;
 		goto cleanup;
@@ -405,23 +401,16 @@ pam_sm_open_session(pam_handle_t *pamh, 
 		strcat(cookiefile, XAUTHDEF);
 	}
 	if (debug) {
-		syslog(LOG_DEBUG, "pam_xauth: reading keys from `%s'",
-		       cookiefile);
+		_pam_log(LOG_DEBUG, "reading keys from `%s'", cookiefile);
 	}
 
 	/* Read the user's .Xauthority file.  Because the current UID is
 	 * the original user's UID, this will only fail if something has
 	 * gone wrong, or we have no cookies. */
 	if (debug) {
-		syslog(LOG_DEBUG, "pam_xauth: running \"%s %s %s %s %s\" as "
-		       "%lu/%lu",
-		       xauth,
-		       "-f",
-		       cookiefile,
-		       "nlist",
-		       display,
-		       (unsigned long) getuid(),
-		       (unsigned long) getgid());
+		_pam_log(LOG_DEBUG, "running \"%s %s %s %s %s\" as %lu/%lu",
+			 xauth, "-f", cookiefile, "nlist", display,
+			 (unsigned long) getuid(), (unsigned long) getgid());
 	}
 	if (run_coprocess(NULL, &cookie,
 			  getuid(), getgid(),
@@ -458,23 +447,22 @@ pam_sm_open_session(pam_handle_t *pamh, 
 						}
 					}
 					if (debug) {
-						syslog(LOG_DEBUG, "pam_xauth: "
-						       "no key for `%s', trying"
-						       " `%s'", display, t);
+						_pam_log(LOG_DEBUG, "no key "
+							 "for `%s', trying"
+							 " `%s'", display, t);
 					}
 					/* Read the cookie for this display. */
 					if (debug) {
-						syslog(LOG_DEBUG,
-						       "pam_xauth: running "
-						       "\"%s %s %s %s %s\" as "
-						       "%lu/%lu",
-						       xauth,
-						       "-f",
-						       cookiefile,
-						       "nlist",
-						       t,
-						       (unsigned long) getuid(),
-						       (unsigned long) getgid());
+						_pam_log(LOG_DEBUG, "running "
+							 "\"%s %s %s %s %s\" "
+							 "as %lu/%lu",
+							 xauth,
+							 "-f",
+							 cookiefile,
+							 "nlist",
+							 t,
+							 (unsigned long) getuid(),
+							 (unsigned long) getgid());
 					}
 					run_coprocess(NULL, &cookie,
 						      getuid(), getgid(),
@@ -489,7 +477,7 @@ pam_sm_open_session(pam_handle_t *pamh, 
 		/* Check that we got a cookie, this time for real. */
 		if ((cookie == NULL) || (strlen(cookie) == 0)) {
 			if (debug) {
-				syslog(LOG_DEBUG, "pam_xauth: no key");
+				_pam_log(LOG_DEBUG, "no key");
 			}
 			retval = PAM_SESSION_ERR;
 			goto cleanup;
@@ -502,7 +490,7 @@ pam_sm_open_session(pam_handle_t *pamh, 
 				    strlen(XAUTHTMP) + 1);
 		if (xauthority == NULL) {
 			if (debug) {
-				syslog(LOG_DEBUG, "pam_xauth: no free memory");
+				_pam_log(LOG_DEBUG, "no free memory");
 			}
 			retval = PAM_SESSION_ERR;
 			goto cleanup;
@@ -519,17 +507,16 @@ pam_sm_open_session(pam_handle_t *pamh, 
 		fd = mkstemp(xauthority + strlen(XAUTHENV) + 1);
 		setfsuid(euid);
 		if (fd == -1) {
-			syslog(LOG_ERR, "pam_xauth: error creating "
-			       "temporary file `%s': %s",
-			       xauthority + strlen(XAUTHENV) + 1,
-			       strerror(errno));
+			_pam_log(LOG_ERR, "error creating "
+				 "temporary file `%s': %m",
+				 xauthority + strlen(XAUTHENV) + 1);
 			retval = PAM_SESSION_ERR;
 			goto cleanup;
 		}
 		/* Set permissions on the new file and dispose of the
 		 * descriptor. */
 		if (fchown(fd, tpwd->pw_uid, tpwd->pw_gid) < 0)
-		  syslog (LOG_ERR, "pam_xauth: fchown failed: %m");
+			_pam_log(LOG_ERR, "fchown failed: %m");
 		close(fd);
 
 		/* Get a copy of the filename to save as a data item for
@@ -539,8 +526,8 @@ pam_sm_open_session(pam_handle_t *pamh, 
 
 		/* Save the filename. */
 		if (pam_set_data(pamh, DATANAME, cookiefile, cleanup) != PAM_SUCCESS) {
-			syslog(LOG_ERR, "pam_xauth: error saving name of "
-			       "temporary file `%s'", cookiefile);
+			_pam_log(LOG_ERR, "error saving name of "
+				 "temporary file `%s'", cookiefile);
 			unlink(cookiefile);
 			retval = PAM_SESSION_ERR;
 			goto cleanup;
@@ -548,8 +535,8 @@ pam_sm_open_session(pam_handle_t *pamh, 
 
 		/* Set the new variable in the environment. */
 		if (pam_putenv (pamh, xauthority) != PAM_SUCCESS)
-		  syslog (LOG_DEBUG, "pam_xauth: can't set environment variable '%s'",
-			  xauthority);
+			_pam_log(LOG_DEBUG, "can't set environment variable '%s'",
+				 xauthority);
 		putenv (xauthority); /* The environment owns this string now. */
 
 		/* set $DISPLAY in pam handle to make su - work */
@@ -558,7 +545,7 @@ pam_sm_open_session(pam_handle_t *pamh, 
 					     strlen (display) + 1);
 		  if (d == NULL)
 		    {
-		      syslog (LOG_DEBUG, "pam_xauth: memory exhausted");
+		      _pam_log(LOG_DEBUG, "memory exhausted");
 		      cookiefile = NULL;
 		      retval = PAM_SESSION_ERR;
 		      goto cleanup;
@@ -567,28 +554,22 @@ pam_sm_open_session(pam_handle_t *pamh, 
 		  strcat (d, display);
 
 		  if (pam_putenv (pamh, d) != PAM_SUCCESS)
-		    syslog (LOG_DEBUG,
-			    "pam_xauth: can't set environment variable '%s'",
-			    d);
+			_pam_log(LOG_DEBUG,
+				 "can't set environment variable '%s'", d);
 		  free (d);
 		}
 
 		/* Merge the cookie we read before into the new file. */
 		if (debug) {
-			syslog(LOG_DEBUG, "pam_xauth: writing key `%s' to "
-			       "temporary file `%s'", cookie, cookiefile);
+			_pam_log(LOG_DEBUG, "writing key `%s' to "
+				 "temporary file `%s'", cookie, cookiefile);
 		}
 		if (debug) {
-			syslog(LOG_DEBUG,
-			       "pam_xauth: running \"%s %s %s %s %s\" as "
-			       "%lu/%lu",
-			       xauth,
-			       "-f",
-			       cookiefile,
-			       "nmerge",
-			       "-",
-			       (unsigned long) tpwd->pw_uid,
-			       (unsigned long) tpwd->pw_gid);
+			_pam_log(LOG_DEBUG,
+				 "running \"%s %s %s %s %s\" as %lu/%lu",
+				 xauth, "-f", cookiefile, "nmerge", "-",
+				 (unsigned long) tpwd->pw_uid,
+				 (unsigned long) tpwd->pw_gid);
 		}
 		run_coprocess(cookie, &tmp,
 			      tpwd->pw_uid, tpwd->pw_gid,
@@ -630,8 +611,7 @@ pam_sm_close_session(pam_handle_t *pamh,
 		if (strncmp(argv[i], "targetuser=", 11) == 0) {
 			continue;
 		}
-		syslog(LOG_WARNING, "pam_xauth: unrecognized option `%s'",
-		       argv[i]);
+		_pam_log(LOG_WARNING, "unrecognized option `%s'", argv[i]);
 	}
 
 	/* Try to retrieve the name of a file we created when the session was
@@ -640,8 +620,8 @@ pam_sm_close_session(pam_handle_t *pamh,
 		/* We'll only try to remove the file once. */
 		if (strlen((char*)cookiefile) > 0) {
 			if (debug) {
-				syslog(LOG_DEBUG, "pam_xauth: removing `%s'",
-				       (char*)cookiefile);
+				_pam_log(LOG_DEBUG, "removing `%s'",
+					 (char*)cookiefile);
 			}
 			unlink((char*)cookiefile);
 			*((char*)cookiefile) = '\0';
diff -upk.orig Linux-PAM-0.80.orig/modules/pammodutil/Makefile Linux-PAM-0.80/modules/pammodutil/Makefile
--- Linux-PAM-0.80.orig/modules/pammodutil/Makefile	2004-09-24 13:13:22 +0000
+++ Linux-PAM-0.80/modules/pammodutil/Makefile	2005-08-09 12:30:49 +0000
@@ -20,7 +20,7 @@ CFLAGS += $(PIC) $(STATIC) $(MOREFLAGS) 
 # all the object files we care about
 LIBOBJECTS = modutil_cleanup.o modutil_getpwnam.o modutil_getpwuid.o \
 	modutil_getspnam.o modutil_getgrnam.o modutil_getgrgid.o \
-	modutil_ingroup.o modutil_getlogin.o modutil_ioloop.o
+	modutil_ingroup.o modutil_getlogin.o modutil_ioloop.o modutil_log.o
 
 # static library name
 LIBSTATIC = $(LIBNAME).a
diff -upk.orig Linux-PAM-0.80.orig/modules/pammodutil/include/security/_pam_modutil.h Linux-PAM-0.80/modules/pammodutil/include/security/_pam_modutil.h
--- Linux-PAM-0.80.orig/modules/pammodutil/include/security/_pam_modutil.h	2005-08-09 11:22:41 +0000
+++ Linux-PAM-0.80/modules/pammodutil/include/security/_pam_modutil.h	2005-08-09 12:32:34 +0000
@@ -21,6 +21,7 @@
 #include <pwd.h>
 #include <grp.h>
 #include <shadow.h>
+#include <stdarg.h>
 #include <sys/types.h>
 
 #if defined(__GNUC__) && defined(__GNUC_MINOR__)
@@ -82,4 +83,18 @@ extern int _pammodutil_read(int fd, char
 
 extern int _pammodutil_write(int fd, const char *buffer, int count);
 
+extern void _pammodutil_vlog(const char *module_name, int priority,
+			     const char *format, va_list args)
+	PAM_MODUTIL_FORMAT((printf, 3, 0)) PAM_MODUTIL_NONNULL((3));
+
+#define DEFINE_PAM_LOG(module) \
+static void PAM_MODUTIL_FORMAT((printf, 2, 3)) PAM_MODUTIL_NONNULL((2)) \
+_pam_log(int priority, const char *format, ...) \
+{ \
+	va_list args; \
+	va_start(args, format); \
+	_pammodutil_vlog((module), priority, format, args); \
+	va_end(args); \
+}
+
 #endif /* _PAM_MODUTIL_H */
diff -upk.orig Linux-PAM-0.80.orig/modules/pammodutil/modutil_log.c Linux-PAM-0.80/modules/pammodutil/modutil_log.c
--- Linux-PAM-0.80.orig/modules/pammodutil/modutil_log.c	1970-01-01 00:00:00 +0000
+++ Linux-PAM-0.80/modules/pammodutil/modutil_log.c	2005-08-09 12:30:49 +0000
@@ -0,0 +1,35 @@
+/*
+ * $Id$
+ *
+ * This function provide common method for system logging.
+ */
+
+#include "config.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <stdarg.h>
+#include <syslog.h>
+#include <errno.h>
+
+#include <security/pam_modules.h>
+#include <security/_pam_macros.h>
+#include "include/security/_pam_modutil.h"
+
+void
+_pammodutil_vlog(const char *module_name, int priority,
+		 const char *format, va_list args)
+{
+	int     saved_errno = errno;
+	char   *fmt;
+
+	if (asprintf(&fmt, "%s: %s", module_name, format) < 0) {
+		syslog(LOG_AUTH | LOG_ERR,
+		       "%s: _pammodutil_vlog: asprintf: %m", module_name);
+		fmt = 0;
+	}
+	errno = saved_errno;
+	vsyslog(LOG_AUTH | priority, (fmt ? fmt : format), args);
+	_pam_drop(fmt);
+}
