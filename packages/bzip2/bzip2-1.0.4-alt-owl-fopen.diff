--- bzip2-1.0.4.orig/bzip2recover.c	2007-01-03 02:00:55 +0000
+++ bzip2-1.0.4/bzip2recover.c	2007-01-10 16:36:32 +0000
@@ -28,6 +28,8 @@
 #include <errno.h>
 #include <stdlib.h>
 #include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
 
 
 /* This program records bit locations in the file to be recovered.
@@ -273,6 +275,24 @@ static Bool endsInBz2 ( Char* name )
        name[n-1] == '2');
 }
 
+/*---------------------------------------------*/
+/* Open an output file safely with O_EXCL and good permissions.
+   This avoids a race condition in older versions, in which
+   the file was first opened and then had its interim permissions
+   set safely.  We instead use open() to create the file with
+   the interim permissions required (rw-------).
+
+   For non-Unix platforms, if we are not worrying about
+   security issues, simple this simply behaves like fopen.
+*/
+static FILE* fopen_output_safely ( Char* name, const char* mode )
+{
+   int fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
+   if (fh == -1) return NULL;
+   FILE* fp = fdopen(fh, mode);
+   if (fp == NULL) close(fh);
+   return fp;
+}
 
 /*---------------------------------------------------*/
 /*---                                             ---*/
@@ -490,7 +510,7 @@ Int32 main ( Int32 argc, Char** argv )
          fprintf ( stderr, "   writing block %d to `%s' ...\n",
                            wrBlock+1, outFileName );
 
-         outFile = fopen ( outFileName, "wb" );
+         outFile = fopen_output_safely ( outFileName, "wb" );
          if (outFile == NULL) {
             fprintf ( stderr, "%s: can't write `%s'\n",
                       progName, outFileName );
