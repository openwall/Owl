--- CHANGES
+++ CHANGES	1999/03/24 08:00:17
@@ -0,0 +1 @@
+ISO 8601 time and date from Volker Schmidt volker@illuminatus.mz.rhein-main.de
--- Makefile
+++ Makefile	1999/03/24 08:00:17
@@ -1,6 +1,4 @@
-CFLAGS=-Wall -O6 -fomit-frame-pointer -pipe
-# my compiler doesn't need -fno-strength-reduce
-LDFLAGS=-Wl,-warn-common -s
+CFLAGS=-Wall -O2 -pipe -D_GNU_SOURCE
 
 all:		mingetty
 		size mingetty
--- Makefile.Linux
+++ Makefile.Linux	1999/03/24 08:00:17
@@ -0,0 +1,18 @@
+#
+#
+# Makefile.Linux to integrate package into source tree of S.u.S.E.-Linux
+#
+# Copyright (C) 1998 S.u.S.E. GmbH Fuerth, Germany.
+#
+# Please send bug-fixes or comments to feedback@suse.de.
+#
+# Author: Florian La Roche  <florian@suse.de>
+#
+#
+
+compile:
+	make
+
+install:
+	make install
+
--- TODO
+++ TODO	1999/03/24 08:00:17
@@ -1,3 +1,2 @@
 I don't think, I have left any bugs. Are any features missing?
-Who wants to write a man-page?
 
--- mingetty.c
+++ mingetty.c	1999/03/24 08:00:52
@@ -1,7 +1,7 @@
 /*  mingetty.c
  *
  *  Copyright (C) 1996 Florian La Roche
- *  florian@jurix.jura.uni-sb.de florian@suse.de
+ *  florian@jurix.jura.uni-sb.de florian@suse.de florian@knorke.saar.de
  *
  *  Newer versions should be on susix.jura.uni-sb.de/pub/linux/source/system
  *  or sunsite.unc.edu/pub/Linux/system/Admin/login or /pub/Linux/system/
@@ -34,6 +34,7 @@
 #include <unistd.h>
 #include <string.h>
 #include <sys/ioctl.h>
+#include <sys/termios.h>
 #include <errno.h>
 #include <sys/stat.h>
 #include <sys/file.h>
@@ -60,6 +61,10 @@
 
 #define LOGIN " login: "	/* login prompt */
 
+#ifndef _PATH_LOGIN
+#define _PATH_LOGIN "/bin/login"
+#endif
+
 /* name of this program (argv[0]) */
 static char *progname;
 /* on which tty line are we sitting? (e.g. tty1) */
@@ -77,7 +82,6 @@
 /* Print the whole string of gethostname() instead of just until the next "." */
 static int longhostname = 0;
 
-
 /*
  * output error messages
  */
@@ -93,7 +97,8 @@
 	buf[0] = '\0';
 	bp = buf;
 #else
-	strcpy (buf, progname);
+	strncpy (buf, progname, sizeof buf - 4);
+	buf[sizeof buf - 5] = '\0';
 	strcat (buf, ": ");
 	bp = buf + strlen (buf);
 #endif
@@ -116,6 +121,10 @@
 	exit (1);
 }
 
+static void sigquit_handler (int signum) {
+	exit (1);
+}
+
 /*
  * update_utmp - update our utmp entry
  *
@@ -154,34 +163,45 @@
 	ut.ut_type = LOGIN_PROCESS;
 	ut.ut_pid = pid;
 
+	setutent ();
 	pututline (&ut);
 	endutent ();
 
 	if ((ut_fd = open (_PATH_WTMP, O_APPEND | O_WRONLY)) >= 0) {
-		flock (ut_fd, LOCK_EX);
+		/* never lock the wtmp file */
+		/* flock (ut_fd, LOCK_EX); */
 		write (ut_fd, &ut, sizeof (ut));
-		flock (ut_fd, LOCK_UN);
+		/* flock (ut_fd, LOCK_UN); */
 		close (ut_fd);
 	}
 }
 
+#define CONTROL(c) ((c) & 0x1f)
+
 /* open_tty - set up tty as standard { input, output, error } */
 static void open_tty (void)
 {
 	struct sigaction sa;
 	char buf[20];
 	int fd;
+	struct termios termios;
 
 	/* Set up new standard input. */
 	strcpy (buf, "/dev/");
-	strcat (buf, tty);
+	strcat (buf, tty);	/* XXX strncat ??? */
 	if (chown (buf, 0, 0) || chmod (buf, 0600))
+#ifdef __GLIBC__
+		error ("%s: %s", buf, strerror(errno));
+#else
 		error ("%s: %s", buf, sys_errlist[errno]);
+#endif
 
 	sa.sa_handler = SIG_IGN;
 	sa.sa_flags = 0;
 	sigemptyset (&sa.sa_mask);
 	sigaction (SIGHUP, &sa, NULL);
+	sa.sa_handler = sigquit_handler;
+	sigaction (SIGQUIT, &sa, NULL);
 
 	/* vhangup() will replace all open file descriptors that point to our
 	   controlling tty by a dummy that will deny further reading/writing
@@ -195,7 +215,8 @@
 	if (!isatty (fd))
 		error ("%s: not a tty", buf);
 
-	vhangup ();
+	if (vhangup ())
+		error ("vhangup() failed");
 	/* Get rid of the present stdout/stderr. */
 	close (2);
 	close (1);
@@ -216,6 +237,49 @@
 	if (! noclear)
 		write (0, "\033c", 2);
 
+#if 0
+	/* The above reset only puts the output things into a sane state.
+	   The input state is not reset. */
+	memset (&termios, 0, sizeof termios);
+	if (tcgetattr (0, &termios))
+		error ("tcgetattr problem: %s", sys_errlist[errno]);
+	/* some people also set BRKINT and IMAXBELL, but the kernel
+	   also doesn't set these flags by default */
+	termios.c_iflag |= ICRNL | IXON;
+	termios.c_iflag &= ~(IGNBRK | INLCR | IGNCR | IXOFF | IUCLC | IXANY);
+	termios.c_oflag |= OPOST | ONLCR;
+	termios.c_oflag &= ~(OLCUC | OCRNL | ONOCR | ONLRET | OFILL | OFDEL);
+	/* XXX: NL0 CR0 TAB0 BS0 VT0 FF0 ?? */
+	/* XXX: speed not correctly set */
+	termios.c_cflag |= B38400 | CS8 | CREAD | HUPCL;
+	termios.c_lflag |= ISIG | ICANON | ECHO | ECHOE | ECHOK | ECHOCTL 
+				| ECHOKE | IEXTEN;
+	termios.c_lflag &= ~(ECHONL | NOFLSH | XCASE | TOSTOP | ECHOPRT);
+	/* VTIME and VMIN can overlap with VEOF and VEOL since they are
+	   only used for non-canonical mode. We just set the at the
+	   beginning, so nothing bad should happen. */
+	termios.c_cc[VTIME]    = 0;
+	termios.c_cc[VMIN]     = 1;
+	termios.c_cc[VINTR]    = CONTROL('c');
+	termios.c_cc[VQUIT]    = CONTROL('\\');
+	termios.c_cc[VERASE]   = 0177; /* DEL */
+	termios.c_cc[VKILL]    = CONTROL('u');
+	termios.c_cc[VEOF]     = CONTROL('d');
+	termios.c_cc[VSWTC]    = 0;
+	termios.c_cc[VSTART]   = CONTROL('q');
+	termios.c_cc[VSTOP]    = CONTROL('s');
+	termios.c_cc[VSUSP]    = CONTROL('z');
+	termios.c_cc[VEOL]     = '\0';
+	termios.c_cc[VREPRINT] = CONTROL('r');
+	/* Why is this not VDSUSP ?? Why is it not ^o or ^y ?? */
+	termios.c_cc[VDISCARD] = CONTROL('o');
+	termios.c_cc[VWERASE]  = CONTROL('w');
+	termios.c_cc[VLNEXT]   = CONTROL('v');
+	termios.c_cc[VEOL2]    = '\0';
+	if (tcsetattr (0, TCSADRAIN, &termios))
+		error ("tcsetattr problem: %s", sys_errlist[errno]);
+#endif
+
 	sa.sa_handler = SIG_DFL;
 	sa.sa_flags = 0;
 	sigemptyset (&sa.sa_mask);
@@ -247,6 +311,7 @@
 		break;
 	case 'o':
 		printf ("%s", uts.domainname);
+		/* printf ("%s", uts.__domainname); */
 		break;
 #if 0
 	case 'd':
@@ -277,7 +342,7 @@
 
 			break;
 		}
-#else
+/* this is a second method, that is also not used anymore... */
 	case 'd':
 	case 't':
 		{
@@ -288,6 +353,24 @@
 			fputs (buff, stdout);
 			break;
 		}
+#else
+	case 'd':
+	case 't':
+		{
+			time_t now;
+			struct tm *tm;
+
+			time (&now);
+			tm = localtime (&now);
+			if (c == 'd')
+				/* ISO 8601 */
+				printf ("%d-%02d-%02d", tm->tm_year+1900,
+					tm->tm_mon+1, tm->tm_mday);
+                        else
+                                printf ("%02d:%02d:%02d",
+                                        tm->tm_hour, tm->tm_min, tm->tm_sec);
+			break;
+		}
 #endif
 
 	case 'l':
@@ -321,7 +404,7 @@
 #else
 	int fd;
 #endif
-	char c;
+	int c;
 
 	write (1, "\n", 1);	/* start a new line */
 #if	! OLD
@@ -365,7 +448,7 @@
 			if (c == '\n' || c == '\r') {
 				*bp = 0;
 				break;
-			} else if (!isalnum (c) && c != '_')
+			} else if (!isprint (c))
 				error ("%s: invalid character for login name",
 								tty);
 			else if (bp - logname >= sizeof (logname) - 1)
@@ -396,7 +479,7 @@
 	char *logname, *s;
 	int c;
 
-	progname = argv[0];
+	progname = basename(argv[0]);
 	uname (&uts);
 	gethostname (hn, MAXHOSTNAMELEN);
 	pid = getpid ();
