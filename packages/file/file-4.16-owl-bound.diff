CVE-2007-1536: Fix potential heap corruption in file_printf().
--- file-4.16/src/funcs.c
+++ file-4.16/src/funcs.c
@@ -46,27 +46,27 @@ protected int
 file_printf(struct magic_set *ms, const char *fmt, ...)
 {
 	va_list ap;
-	size_t len;
+	size_t len, left = ms->o.size - ms->o.len;
 	char *buf;
 
 	va_start(ap, fmt);
 
-	if ((len = vsnprintf(ms->o.ptr, ms->o.len, fmt, ap)) >= ms->o.len) {
+	if ((len = vsnprintf(ms->o.ptr, left, fmt, ap)) >= left) {
+		size_t size = ms->o.len + len + 1024;
 		va_end(ap);
-		if ((buf = realloc(ms->o.buf, len + 1024)) == NULL) {
+		if ((buf = realloc(ms->o.buf, size)) == NULL) {
 			file_oomem(ms);
 			return -1;
 		}
-		ms->o.ptr = buf + (ms->o.ptr - ms->o.buf);
+		ms->o.ptr = buf + ms->o.len;
 		ms->o.buf = buf;
-		ms->o.len = ms->o.size - (ms->o.ptr - ms->o.buf);
-		ms->o.size = len + 1024;
+		ms->o.size = size;
 
 		va_start(ap, fmt);
-		len = vsnprintf(ms->o.ptr, ms->o.len, fmt, ap);
+		len = vsnprintf(ms->o.ptr, size - ms->o.len, fmt, ap);
 	}
 	ms->o.ptr += len;
-	ms->o.len -= len;
+	ms->o.len += len;
 	va_end(ap);
 	return 0;
 }
@@ -147,6 +147,7 @@ file_reset(struct magic_set *ms)
 		return -1;
 	}
 	ms->o.ptr = ms->o.buf;
+	ms->o.len = 0;
 	ms->haderr = 0;
 	ms->error = -1;
 	return 0;
@@ -165,6 +166,10 @@ file_getbuffer(struct magic_set *ms)
 		return ms->o.buf;
 
 	nsize = ms->o.len * 4 + 1;
+	if (nsize <= ms->o.len) {
+		file_oomem(ms);
+		return NULL;
+	}
 	if (ms->o.psize < nsize) {
 		if ((nbuf = realloc(ms->o.pbuf, nsize)) == NULL) {
 			file_oomem(ms);
