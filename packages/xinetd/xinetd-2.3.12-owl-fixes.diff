diff -urp xinetd-2.3.12.orig/libs/src/sio/siosup.c xinetd-2.3.12/libs/src/sio/siosup.c
--- xinetd-2.3.12.orig/libs/src/sio/siosup.c	Sun Jul 13 17:41:51 2003
+++ xinetd-2.3.12/libs/src/sio/siosup.c	Mon Aug 25 03:06:34 2003
@@ -261,7 +261,7 @@ static int initial_map( mapd_s *mdp, int
 {
    caddr_t addr ;
    size_t requested_length = 2 * map_unit_size ;
-   size_t mapped_length = MIN( mdp->file_size, requested_length ) ;
+   size_t mapped_length = MIN( (size_t)mdp->file_size, requested_length ) ;
    size_t bytes_left ;
    size_t bytes_in_unit ;
 
diff -urp xinetd-2.3.12.orig/xinetd/access.c xinetd-2.3.12/xinetd/access.c
--- xinetd-2.3.12.orig/xinetd/access.c	Mon Jun 23 21:09:01 2003
+++ xinetd-2.3.12/xinetd/access.c	Mon Aug 25 03:11:05 2003
@@ -303,7 +303,8 @@ access_e parent_access_control( struct s
          ! ti_current_time_check( SC_ACCESS_TIMES( scp ) ) )
       return( AC_TIME ) ;
 
-   if ( SVC_RUNNING_SERVERS( sp ) >= SC_INSTANCES( scp ) )
+   if ( SC_INSTANCES( scp ) != UNLIMITED &&
+        SVC_RUNNING_SERVERS( sp ) >= (unsigned)SC_INSTANCES( scp ) )
       return( AC_SERVICE_LIMIT ) ;
 
    if( scp->sc_per_source != UNLIMITED ) {
diff -urp xinetd-2.3.12.orig/xinetd/addr.c xinetd-2.3.12/xinetd/addr.c
--- xinetd-2.3.12.orig/xinetd/addr.c	Wed Jun 25 17:39:15 2003
+++ xinetd-2.3.12/xinetd/addr.c	Thu Sep  4 23:43:23 2003
@@ -203,7 +203,7 @@ int addrlist_match( const pset_h addr_li
              */
             if( IN6_IS_ADDR_V4MAPPED( &SAIN6(addr)->sin6_addr ) ) 
 	    {
-               uint32_t *tmp_addr = (uint32_t *)&addr->sa_data[3];
+               uint32_t *tmp_addr = (uint32_t *)&addr->sa_data[12];
                if( (ntohl(*tmp_addr) & cap->m.mask)
 			       == ( cap->a.addr & cap->m.mask ) )
                   return (u+1);
diff -urp xinetd-2.3.12.orig/xinetd/confparse.c xinetd-2.3.12/xinetd/confparse.c
--- xinetd-2.3.12.orig/xinetd/confparse.c	Sat Jul 12 19:26:21 2003
+++ xinetd-2.3.12/xinetd/confparse.c	Mon Aug 25 03:04:49 2003
@@ -266,7 +266,7 @@ static status_e service_fill( struct ser
 
       if( getaddrinfo(scp->sc_orig_bind_addr, NULL, &hints, &res) < 0 ) 
       {
-         msg(LOG_ERR, func, "bad address given for:%s", scp->sc_name);
+         msg(LOG_ERR, func, "bad address given for: %s", scp->sc_name);
          return( FAILED );
       }
 
@@ -282,7 +282,7 @@ static status_e service_fill( struct ser
             malloc(sizeof(union xsockaddr));
          if( scp->sc_bind_addr == NULL )
          {
-            msg(LOG_ERR, func, "can't allocate space for bind addr of:%s",
+            msg(LOG_ERR, func, "can't allocate space for bind addr of: %s",
                 scp->sc_name);
             return( FAILED );
          }
@@ -348,7 +348,7 @@ static status_e service_fill( struct ser
    if (! SC_SPECIFIED( scp, A_PORT ) && ! SC_IS_MUXCLIENT( scp ) && 
                                         ! SC_IS_RPC( scp )) {
        if ( SC_IS_UNLISTED( scp ) ) {
-          msg(LOG_ERR, func, "Unlisted service:%s must have a port entry",
+          msg(LOG_ERR, func, "Unlisted service: %s must have a port entry",
               scp->sc_name);
           return(FAILED);
        }
@@ -367,14 +367,15 @@ static status_e service_fill( struct ser
          }
          else {
             msg(LOG_ERR, func, 
-              "Port not specified and can't find service:%s with getservbyname",
+              "Port not specified and can't find service: %s"
+              " with getservbyname",
                scp->sc_name);
             return(FAILED);
          }
       }
       else {
          msg(LOG_ERR, func, 
-             "Port not specified for service:%s and no protocol given", 
+             "Port not specified for service: %s and no protocol given", 
              scp->sc_name);
          return(FAILED);
       }
@@ -632,14 +633,14 @@ static status_e check_entry( struct serv
           */
          continue;
       }
-      if (diff) 
-         msg( LOG_ERR, func, 
-           "service:%s id:%s is unique but its identical to service:%s id:%s "
-	   "- DISABLING",
+      if (diff)
+         msg( LOG_ERR, func,
+           "service: %s id: %s is unique but its identical to "
+           "service: %s id: %s - DISABLING",
            scp->sc_name, scp->sc_id, tmp_scp->sc_name, tmp_scp->sc_id ) ;
       else
-         msg( LOG_ERR, func, 
-           "service:%s id:%s not unique or is a duplicate - DISABLING",
+         msg( LOG_ERR, func,
+           "service: %s id: %s not unique or is a duplicate - DISABLING",
            scp->sc_name, scp->sc_id ) ;
       return FAILED ;
    } /* for */
@@ -747,7 +748,7 @@ static status_e check_entry( struct serv
           else
           {
              msg( LOG_ERR, func,
-                "A protocol or a socket_type must be specified for service:%s.",
+                "A protocol or a socket_type must be specified for service: %s",
                 scp->sc_name ) ;
              return( FAILED ) ;
           }
@@ -795,7 +796,7 @@ static status_e check_entry( struct serv
        if( M_IS_SET( (scp)->sc_log_on_success, LO_TRAFFIC ) )
        {
           msg( LOG_ERR, func,
-             "Service %s should not have TRAFFIC flag set since its"
+             "Service %s should not have TRAFFIC flag set since it's"
              " not redirected", scp->sc_name);
           return FAILED;
        }
diff -urp xinetd-2.3.12.orig/xinetd/ident.c xinetd-2.3.12/xinetd/ident.c
--- xinetd-2.3.12.orig/xinetd/ident.c	Sun Jun  1 14:14:18 2003
+++ xinetd-2.3.12/xinetd/ident.c	Mon Aug 25 03:13:08 2003
@@ -214,7 +214,8 @@ static char *verify_line( char *line, 
    if ( p == NULL )
       return( NULL ) ;
    *p = NUL ;
-   if ( parse_base10( start, &port ) || port != remote_port ) {
+   if ( parse_base10( start, &port ) ||
+        port < 0 || (unsigned)port != remote_port ) {
       *p = ',';
       return( NULL ) ;
    }
@@ -225,7 +226,8 @@ static char *verify_line( char *line, 
    if ( p == NULL )
       return( NULL ) ;
    *p = NUL ;
-   if ( parse_base10( start, &port ) || port != local_port ) {
+   if ( parse_base10( start, &port ) ||
+        port < 0 || (unsigned)port != local_port ) {
       *p = ':';
       return( NULL ) ;
    }
diff -urp xinetd-2.3.12.orig/xinetd/includedir.c xinetd-2.3.12/xinetd/includedir.c
--- xinetd-2.3.12.orig/xinetd/includedir.c	Sat Jul 12 19:17:53 2003
+++ xinetd-2.3.12/xinetd/includedir.c	Mon Aug 25 03:23:30 2003
@@ -91,7 +91,7 @@ void handle_includedir(const char *servi
    /* Now, traverse the list in alphabetic order 
     * (as determined by strcmp).
     */
-   for( u = 0; u < pset_count(dir_list); u++ ) {
+   for( u = 0; (unsigned)u < pset_count(dir_list); u++ ) {
       storename = pset_pointer(dir_list, u);
 
       /* Don't try to parse any files containing a dot ('.')
diff -urp xinetd-2.3.12.orig/xinetd/init.c xinetd-2.3.12/xinetd/init.c
--- xinetd-2.3.12.orig/xinetd/init.c	Sun Jun 15 00:10:22 2003
+++ xinetd-2.3.12/xinetd/init.c	Mon Aug 25 03:18:09 2003
@@ -102,7 +102,7 @@ static void setup_file_descriptors(void)
    /*
     * Close all unneeded descriptors
     */
-   for ( fd = STDERR_FD + 1 ; fd < ps.ros.max_descriptors ; fd++ )
+   for ( fd = STDERR_FD + 1 ; (unsigned)fd < ps.ros.max_descriptors ; fd++ )
       if ( Sclose( fd ) && errno != EBADF )
       {
          syscall_failed("Sclose");
diff -urp xinetd-2.3.12.orig/xinetd/internals.c xinetd-2.3.12/xinetd/internals.c
--- xinetd-2.3.12.orig/xinetd/internals.c	Sun Jul 13 18:56:06 2003
+++ xinetd-2.3.12/xinetd/internals.c	Mon Aug 25 03:16:13 2003
@@ -108,7 +108,7 @@ void dump_internal_state(void)
     * Dump the socket mask
     */
    Sprint( dump_fd, "Socket mask:" ) ;
-   for ( fd = 0 ; fd < ps.ros.max_descriptors ; fd++ )
+   for ( fd = 0 ; (unsigned)fd < ps.ros.max_descriptors ; fd++ )
       if ( FD_ISSET( fd, &ps.rws.socket_mask ) )
          Sprint( dump_fd, " %d", fd ) ;
    Sputchar( dump_fd, '\n' ) ;
@@ -118,7 +118,7 @@ void dump_internal_state(void)
     * Dump the descriptors that are open and are *not* in the socket mask
     */
    Sprint( dump_fd, "Open descriptors (not in socket mask):" ) ;
-   for ( fd = 0 ; fd < ps.ros.max_descriptors ; fd++ )
+   for ( fd = 0 ; (unsigned)fd < ps.ros.max_descriptors ; fd++ )
    {
       struct stat st ;
 
@@ -248,7 +248,7 @@ static void consistency_check( enum chec
    /*
     * Check if there are any descriptors set in socket_mask_copy
     */
-   for ( fd = 0 ; fd < ps.ros.max_descriptors ; fd++ )
+   for ( fd = 0 ; (unsigned)fd < ps.ros.max_descriptors ; fd++ )
       if ( FD_ISSET( fd, &socket_mask_copy ) && ((fd != signals_pending[0]) && fd != signals_pending[1]))
       {
          msg( LOG_ERR, func,
diff -urp xinetd-2.3.12.orig/xinetd/main.c xinetd-2.3.12/xinetd/main.c
--- xinetd-2.3.12.orig/xinetd/main.c	Tue Jun 10 13:15:45 2003
+++ xinetd-2.3.12/xinetd/main.c	Mon Aug 25 03:18:24 2003
@@ -190,7 +190,7 @@ static void find_bad_fd(void)
    unsigned bad_fd_count = 0 ;
    const char *func = "find_bad_fd" ;
 
-   for ( fd = 0 ; fd < ps.ros.max_descriptors ; fd++ )
+   for ( fd = 0 ; (unsigned)fd < ps.ros.max_descriptors ; fd++ )
       if ( FD_ISSET( fd, &ps.rws.socket_mask ) && fstat( fd, &st ) == -1 )
       {
          int found = FALSE ;
diff -urp xinetd-2.3.12.orig/xinetd/parse.c xinetd-2.3.12/xinetd/parse.c
--- xinetd-2.3.12.orig/xinetd/parse.c	Sat Jul 12 19:17:53 2003
+++ xinetd-2.3.12/xinetd/parse.c	Mon Aug 25 03:20:12 2003
@@ -616,7 +616,8 @@ static status_e identify_attribute( entr
          op = PLUS_EQ ;
    }
 
-   if ( FIXED_VALUES( ap ) && ap->a_nvalues != pset_count( attr_values ) )
+   if ( FIXED_VALUES( ap ) &&
+        (unsigned)ap->a_nvalues != pset_count( attr_values ) )
    {
       parsemsg( LOG_WARNING, func,
          "attribute %s expects %d values and %d values were specified",
diff -urp xinetd-2.3.12.orig/xinetd/parsers.c xinetd-2.3.12/xinetd/parsers.c
--- xinetd-2.3.12.orig/xinetd/parsers.c	Sun Jun  1 16:26:18 2003
+++ xinetd-2.3.12/xinetd/parsers.c	Mon Aug 25 03:21:38 2003
@@ -786,7 +786,7 @@ static int get_limit( char *limit_str, r
    }
 
    *res = (rlim_t)limit_int * multiplier;
-   if (*res / multiplier != limit_int) {
+   if (*res / multiplier != (rlim_t)limit_int) {
       *res = 0;
       return -1;
    }
