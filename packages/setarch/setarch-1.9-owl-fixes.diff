--- setarch-1.9/setarch.c.orig	2006-02-21 13:21:52 +0000
+++ setarch-1.9/setarch.c	2006-03-22 23:59:29 +0000
@@ -8,6 +8,9 @@
    sparc32 util by Jakub Jelinek (1998, 1999) */
 /* */
 
+#ifndef _GNU_SOURCE
+# define _GNU_SOURCE
+#endif
 #include <syscall.h>
 #include <linux/personality.h>
 #include <unistd.h>
@@ -15,6 +18,7 @@
 #include <string.h>
 #include <stdlib.h>
 #include <errno.h>
+#include <error.h>
 #include <sys/utsname.h>
 
 #define set_pers(pers) ((long)syscall(SYS_personality, pers))
@@ -57,7 +61,7 @@ int set_arch(const char *pers, unsigned 
 
   struct {
     int perval;
-    char *target_arch, *result_arch;
+    const char *target_arch, *result_arch;
   } transitions[] = {
     {PER_LINUX32, "linux32", NULL},
     {PER_LINUX, "linux64", NULL},
@@ -105,10 +109,7 @@ int set_arch(const char *pers, unsigned 
     }
 
   if(transitions[i].perval < 0)
-    {
-      fprintf(stderr, "Don't know how to set arch to %s\n", pers);
-      exit(1);
-    }
+    error(1, 0, "unrecognized architecture: %s", pers);
 
   pers_value = transitions[i].perval | options;
   res = set_pers(pers_value);
@@ -124,10 +125,7 @@ int set_arch(const char *pers, unsigned 
 	     && strcmp(un.machine, "i586")
 	     && strcmp(un.machine, "i686")
 	     && strcmp(un.machine, "athlon")))
-	{
-	  fprintf(stderr, "Don't know how to set arch to %s\n", pers);
-	  exit(1);
-	}
+	error(1, 0, "unrecognized architecture: %s", pers);
     }
 
   return 0;
@@ -135,30 +133,29 @@ int set_arch(const char *pers, unsigned 
 
 int main(int argc, char *argv[])
 {
-  char *p = strrchr(argv[0], '/');
+  const char *p = program_invocation_short_name;
   unsigned long options = 0;
-  int got_arch = 0, verbose = 0;
-
-  p = p ? p + 1 : argv[0];
+  int verbose = 0;
 
-  if(argc <= 1) {
-    show_help(p);
+  if(argc < 1) {
+    show_help("setarch");
     return 1;
   }
-  
+
   if(!strcmp(p, "setarch"))
     {
       argv++;
       argc--;
+      if(argc < 1) {
+        show_help(p);
+        return 1;
+      }
       p = argv[0];
-      got_arch = 1;
     }
-  argv++;
-  argc--;
-  
-  for (; argc && argv[0][0] == '-'; argv++, argc--) {
+
+  for (argv++, argc--; argc && argv[0][0] == '-'; argv++, argc--) {
     int n, unknown = 1;
-    char *arg = argv[0];
+    const char *arg = argv[0];
     
     for (n = 1; arg[n]; n++) {
       int f;
@@ -183,22 +180,20 @@ int main(int argc, char *argv[])
 	}
       }
       if (unknown)
-        fprintf(stderr, "warning: unknown option `%c'\n", arg[n]);
+        error(0, 0, "unknown option `%c' ignored", arg[n]);
     }
   }
 
   if(set_arch(p, options))
-    {
-      perror(argv[0]);
-      return 1;
-    }
+    error(EXIT_FAILURE, errno, "failed to set personality to %s", p);
 
   if(!argc)
     {
       execl("/bin/sh", "-sh", NULL);
-      return 3;
+      error(EXIT_FAILURE, errno, "/bin/sh");
     }
 
   execvp(argv[0], argv);
-  return 1;
+  error(EXIT_FAILURE, errno, "%s", argv[0]);
+  return EXIT_FAILURE;
 }
