--- Makefile.am
+++ Makefile.am
@@ -41,7 +41,6 @@ iptables_multi_CFLAGS     = ${AM_CFLAGS} -DIPTABLES_MULTI
 if ENABLE_STATIC
 iptables_multi_CFLAGS    += -DALL_INCLUSIVE
 endif
-iptables_multi_LDFLAGS    = -rdynamic
 iptables_multi_LDADD      = libiptc/libip4tc.la extensions/libext4.a libxtables.la -lm
 
 ip6tables_multi_SOURCES   = ip6tables-multi.c ip6tables-save.c \
@@ -51,7 +50,6 @@ ip6tables_multi_CFLAGS    = ${AM_CFLAGS} -DIPTABLES_MULTI
 if ENABLE_STATIC
 ip6tables_multi_CFLAGS   += -DALL_INCLUSIVE
 endif
-ip6tables_multi_LDFLAGS   = -rdynamic
 ip6tables_multi_LDADD     = libiptc/libip6tc.la extensions/libext6.a libxtables.la -lm
 
 sbin_PROGRAMS    =
--- extensions/GNUmakefile.in
+++ extensions/GNUmakefile.in
@@ -85,7 +85,7 @@ init%.o: init%.c
 #	Shared libraries
 #
 lib%.so: lib%.oo
-	${AM_VERBOSE_CCLD} ${CCLD} ${AM_LDFLAGS} -shared ${LDFLAGS} -o $@ $<;
+	${AM_VERBOSE_CCLD} ${CCLD} ${AM_LDFLAGS} -shared ${LDFLAGS} -o $@ $< -lm -L../.libs -lxtables -L../libiptc/.libs -lip4tc -lip6tc;
 
 lib%.oo: ${srcdir}/lib%.c
 	${AM_VERBOSE_CC} ${CC} ${AM_DEPFLAGS} ${AM_CFLAGS} -D_INIT=lib$*_init -DPIC -fPIC ${CFLAGS} -o $@ -c $<;
--- extensions/libipt_DNAT.c
+++ extensions/libipt_DNAT.c
@@ -5,7 +5,6 @@
 #include <stdlib.h>
 #include <getopt.h>
 #include <xtables.h>
-#include <iptables.h> /* get_kernel_version */
 #include <limits.h> /* INT_MAX in ip_tables.h */
 #include <linux/netfilter_ipv4/ip_tables.h>
 #include <net/netfilter/nf_nat.h>
@@ -159,9 +158,7 @@ static int DNAT_parse(int c, char **argv, int invert, unsigned int *flags,
 				   "Unexpected `!' after --to-destination");
 
 		if (*flags) {
-			if (!kernel_version)
-				get_kernel_version();
-			if (kernel_version > LINUX_VERSION(2, 6, 10))
+			if (xtables_get_kernel_version() > LINUX_VERSION(2, 6, 10))
 				xtables_error(PARAMETER_PROBLEM,
 					   "Multiple --to-destination not supported");
 		}
--- extensions/libipt_SNAT.c
+++ extensions/libipt_SNAT.c
@@ -5,7 +5,6 @@
 #include <stdlib.h>
 #include <getopt.h>
 #include <xtables.h>
-#include <iptables.h>
 #include <limits.h> /* INT_MAX in ip_tables.h */
 #include <linux/netfilter_ipv4/ip_tables.h>
 #include <net/netfilter/nf_nat.h>
@@ -159,9 +158,7 @@ static int SNAT_parse(int c, char **argv, int invert, unsigned int *flags,
 				   "Unexpected `!' after --to-source");
 
 		if (*flags & IPT_SNAT_OPT_SOURCE) {
-			if (!kernel_version)
-				get_kernel_version();
-			if (kernel_version > LINUX_VERSION(2, 6, 10))
+			if (xtables_get_kernel_version() > LINUX_VERSION(2, 6, 10))
 				xtables_error(PARAMETER_PROBLEM,
 					   "Multiple --to-source not supported");
 		}
--- include/iptables.h
+++ include/iptables.h
@@ -19,8 +19,6 @@ extern void print_rule(const struct ipt_entry *e,
 		struct iptc_handle *handle, const char *chain, int counters);
 
 /* kernel revision handling */
-extern int kernel_version;
-extern void get_kernel_version(void);
 #define LINUX_VERSION(x,y,z)	(0x10000*(x) + 0x100*(y) + z)
 #define LINUX_VERSION_MAJOR(x)	(((x)>>16) & 0xFF)
 #define LINUX_VERSION_MINOR(x)	(((x)>> 8) & 0xFF)
--- include/xtables.h.in
+++ include/xtables.h.in
@@ -243,6 +243,9 @@ extern void
 xtables_parse_interface(const char *arg, char *vianame, unsigned char *mask);
 
 /* this is a special 64bit data type that is 8-byte aligned */
+#ifdef aligned_u64
+# undef aligned_u64
+#endif
 #define aligned_u64 u_int64_t __attribute__((aligned(8)))
 
 int xtables_check_inverse(const char option[], int *invert,
@@ -290,6 +293,13 @@ extern void xtables_save_string(const char *value);
 extern const struct xtables_pprot xtables_chain_protos[];
 extern u_int16_t xtables_parse_protocol(const char *s);
 
+/* kernel revision handling */
+extern int xtables_get_kernel_version(void);
+#define LINUX_VERSION(x,y,z)	(0x10000*(x) + 0x100*(y) + z)
+#define LINUX_VERSION_MAJOR(x)	(((x)>>16) & 0xFF)
+#define LINUX_VERSION_MINOR(x)	(((x)>> 8) & 0xFF)
+#define LINUX_VERSION_PATCH(x)	( (x)      & 0xFF)
+
 #ifdef XTABLES_INTERNAL
 
 /* Shipped modules rely on this... */
--- iptables.c
+++ iptables.c
@@ -39,7 +39,6 @@
 #include <iptables.h>
 #include <xtables.h>
 #include <fcntl.h>
-#include <sys/utsname.h>
 #include "xshared.h"
 
 #ifndef TRUE
@@ -201,8 +200,6 @@ static int inverse_for_options[NUMBER_OF_OPT] =
 #define prog_name iptables_globals.program_name
 #define prog_vers iptables_globals.program_version
 
-int kernel_version;
-
 /* Primitive headers... */
 /* defined in netinet/in.h */
 #if 0
@@ -1294,21 +1291,6 @@ static void clear_rule_matches(struct xtables_rule_match **matches)
 	*matches = NULL;
 }
 
-void
-get_kernel_version(void) {
-	static struct utsname uts;
-	int x = 0, y = 0, z = 0;
-
-	if (uname(&uts) == -1) {
-		fprintf(stderr, "Unable to retrieve kernel version.\n");
-		xtables_free_opts(1);
-		exit(1);
-	}
-
-	sscanf(uts.release, "%d.%d.%d", &x, &y, &z);
-	kernel_version = LINUX_VERSION(x, y, z);
-}
-
 int do_command(int argc, char *argv[], char **table, struct iptc_handle **handle)
 {
 	struct ipt_entry fw, *e = NULL;
--- xtables.c
+++ xtables.c
@@ -29,6 +29,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include <sys/utsname.h>
 #include <arpa/inet.h>
 
 #include <xtables.h>
@@ -1718,3 +1719,22 @@ xtables_parse_protocol(const char *s)
 
 	return proto;
 }
+
+int
+xtables_get_kernel_version(void) {
+	static int kernel_version;
+	struct utsname uts;
+	int x = 0, y = 0, z = 0;
+
+	if (kernel_version)
+		return kernel_version;
+
+	if (uname(&uts) == -1) {
+		fprintf(stderr, "Unable to retrieve kernel version.\n");
+		xtables_free_opts(1);
+		exit(1);
+	}
+
+	sscanf(uts.release, "%d.%d.%d", &x, &y, &z);
+	return kernel_version = LINUX_VERSION(x, y, z);
+}
