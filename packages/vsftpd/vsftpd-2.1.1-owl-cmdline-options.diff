diff -urp vsftpd-2.1.1.orig/main.c vsftpd-2.1.1/main.c
--- vsftpd-2.1.1.orig/main.c	2009-05-21 20:36:28 +0000
+++ vsftpd-2.1.1/main.c	2009-05-29 10:05:56 +0000
@@ -66,47 +66,67 @@ main(int argc, const char* argv[])
     /* Login fails */
     0
   };
-  int config_specified = 0;
-  const char* p_config_name = VSFTP_DEFAULT_CONFIG;
   tunables_load_defaults();
-  /* Zero or one argument supported. If one argument is passed, it is the
-   * path to the config file
-   */
-  if (argc > 2)
-  {
-    die("vsftpd: too many arguments (I take an optional config file only)");
-  }
-  else if (argc == 0)
+  if (argc == 0)
   {
     die("vsftpd: missing argv[0]");
   }
-  if (argc == 2)
+  if (argc == 2 && !vsf_sysutil_strcmp(argv[1], "-v"))
   {
-    if (!vsf_sysutil_strcmp(argv[1], "-v"))
-    {
-      vsf_exit("vsftpd: version " VSF_VERSION "\n");
-    }
-    p_config_name = argv[1];
-    config_specified = 1;
+    vsf_exit("vsftpd: version " VSF_VERSION "\n");
   }
   /* This might need to open /dev/zero on systems lacking MAP_ANON. Needs
    * to be done early (i.e. before config file parse, which may use
-   * anonymous pages
+   * anonymous pages).
    */
   vsf_sysutil_map_anon_pages_init();
-  /* Parse config file if it's there */
-  {
-    struct vsf_sysutil_statbuf* p_statbuf = 0;
-    int retval = vsf_sysutil_stat(p_config_name, &p_statbuf);
-    if (!vsf_sysutil_retval_is_error(retval))
-    {
-      vsf_parseconf_load_file(p_config_name, 1);
+  /* If there are no arguments or the first argument is not a filename, start
+   * by parsing the default config */
+  if (argc < 2 || argv[1][0] == '-')
+  {
+    vsf_parseconf_load_file(VSFTP_DEFAULT_CONFIG, 1);
+  }
+  if (argc >= 2)
+  {
+    const char** argp;
+    for (argp = &argv[1]; *argp; argp++)
+    {
+      if ((*argp)[0] == '-')
+      {
+        if ((*argp)[1] == 'o' && (*argp)[2] == '\0')
+        {
+          if (*++argp)
+          {
+            struct mystr opt_str = INIT_MYSTR;
+            struct mystr opt_value = INIT_MYSTR;
+            str_alloc_text(&opt_str, *argp);
+            str_split_char(&opt_str, &opt_value, '=');
+            if (str_isempty(&opt_str))
+            {
+              die("vsftpd: -o option name required");
+            }
+            else
+            {
+              handle_config_setting(&opt_str, &opt_value, 1);
+            }
+            str_free(&opt_str);
+            str_free(&opt_value);
+          }
+          else
+          {
+            die("vsftpd: -o argument required");
+          }
+        }
+        else
+        {
+          die2("vsftpd: unknown option:", *argp);
+        }
+      }
+      else
+      {
+        vsf_parseconf_load_file(*argp, 1);
+      }
     }
-    else if (config_specified)
-    {
-      die2("vsftpd: cannot open config file:", p_config_name);
-    }
-    vsf_sysutil_free(p_statbuf);
   }
   /* Resolve pasv_address if required */
   if (tunable_pasv_address && tunable_pasv_addr_resolve)
diff -urp vsftpd-2.1.1.orig/parseconf.c vsftpd-2.1.1/parseconf.c
--- vsftpd-2.1.1.orig/parseconf.c	2009-05-27 15:36:45 +0000
+++ vsftpd-2.1.1/parseconf.c	2009-05-29 09:03:08 +0000
@@ -18,11 +18,6 @@
 
 static const char* s_p_saved_filename;
 
-/* File local functions */
-static void handle_config_setting(struct mystr* p_setting_str,
-                                  struct mystr* p_value_str,
-                                  int errs_fatal);
-
 /* Tables mapping setting names to runtime variables */
 /* Boolean settings */
 static struct parseconf_bool_setting
@@ -250,7 +245,7 @@ vsf_parseconf_load_file(const char* p_fi
   str_free(&config_value_str);
 }
 
-static void
+void
 handle_config_setting(struct mystr* p_setting_str, struct mystr* p_value_str,
                       int errs_fatal)
 {
diff -urp vsftpd-2.1.1.orig/parseconf.h vsftpd-2.1.1/parseconf.h
--- vsftpd-2.1.1.orig/parseconf.h	2008-02-02 01:30:39 +0000
+++ vsftpd-2.1.1/parseconf.h	2009-05-29 09:03:23 +0000
@@ -1,6 +1,8 @@
 #ifndef VSF_PARSECONF_H
 #define VSF_PARSECONF_H
 
+#include "str.h"
+
 /* vsf_parseconf_load_file()
  * PURPOSE
  * Parse the given file as a vsftpd config file. If the file cannot be
@@ -17,5 +19,9 @@
  */
 void vsf_parseconf_load_file(const char* p_filename, int errs_fatal);
 
+void handle_config_setting(struct mystr* p_setting_str,
+                           struct mystr* p_value_str,
+                           int errs_fatal);
+
 #endif /* VSF_PARSECONF_H */
 
diff -urp vsftpd-2.1.1.orig/vsftpd.8 vsftpd-2.1.1/vsftpd.8
--- vsftpd-2.1.1.orig/vsftpd.8	2008-12-17 18:45:19 +0000
+++ vsftpd-2.1.1/vsftpd.8	2009-05-29 11:10:48 +0000
@@ -1,12 +1,29 @@
-.\" Copyright (c) 2001 Daniel Jacobowitz <dan@debian.org>
-.Dd March 8, 2001
+.\" Copyright (c) 2001 Daniel Jacobowitz <dan at debian.org>
+.\"
+.\" Updated to document some newly introduced functionality (the "-o" option
+.\" and the ability to specify multiple files), as well as the "-v" option, by
+.\" Solar Designer <solar at openwall.com> in 2009.  No copyright to these
+.\" updates and to the corresponding updates to the program code is claimed,
+.\" and they are hereby placed in the public domain.  In case this attempt to
+.\" disclaim copyright and place the updates in the public domain is deemed
+.\" null and void, then they're hereby released to the general public under the
+.\" terms of the license(s) applying to the rest of vsftpd, at the discretion
+.\" of other copyright holder(s) (as of this writing, the terms of GNU GPLv2
+.\" would apply).
+.Dd May 29, 2009
 .Dt VSFTPD 8
 .Sh NAME
 .Nm vsftpd
 .Nd Very Secure FTP Daemon
 .Sh SYNOPSIS
 .Nm vsftpd
-.Op Ar configuration file
+[ [
+.Op Fl o Ar option=value
+|
+.Op Ar config_file
+]... |
+.Op Fl v
+]
 .Sh DESCRIPTION
 .Nm vsftpd
 is the Very Secure File Transfer Protocol Daemon. The server can be launched
@@ -18,18 +35,41 @@ or
 .Xr xinetd 8 .
 Alternatively, vsftpd can be launched in standalone mode, in which case vsftpd
 itself will listen on the network. This latter mode is easier to use, and
-recommended. It is activated by setting
+recommended. It is activated by passing the
+.Fl o Ar listen=YES
+command-line option or by setting
 .Pa listen=YES
 in
-.Pa /etc/vsftpd.conf .
+.Pa /etc/vsftpd.conf
+or in a custom config file specified on the command-line.
 Direct execution of the
 .Nm vsftpd
 binary will then launch the FTP service ready for immediate client connections.
 .Sh OPTIONS
-An optional
-.Op configuration file
-may be given on the command line. This file must be owned as root if running as
-root. The default configuration file is
+When no command-line arguments are specified,
+or when the very first command-line argument to
+.Nm vsftpd
+is not a filename,
+.Nm vsftpd
+parses its default configuration file, which is
 .Pa /etc/vsftpd.conf .
+This behavior is overridden by specifying a custom configuration file name as
+the very first command-line argument.
+In either case, additional custom configuration files and individual
+configuration options may be specified via the command-line.
+The files and options are parsed in the order specified.
+The files must be owned as root if running as root.
+.Pp
+The options are as follows:
+.Bl -tag -width Ds
+.It Fl o Ar option=value
+Pass an option in the format used in the configuration file.
+This is useful for specifying options that are related primarily to the way
+.Nm vsftpd
+is being invoked.
+.It Fl v
+Print version information and exit.
+.Sh FILES
+.Pa /etc/vsftpd.conf
 .Sh SEE ALSO
 .Xr vsftpd.conf 5
