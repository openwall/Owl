* Fri Feb 18 2005 - mmj at suse.de:
Glibc doesn't cache the timezone as much as it used to,
so export the TZ variable after doing chroot.
[SUSE#49878, RH#158779]

* Sun Nov 27 2005 - ldv:
In glibc strftime implementation, each strftime(3) invocation in turn
calls tzset(3).  As result, if TZ environment variable is not set to
absolute value and /etc/localtime file is not available, then glibc
unconditionally switches to UTC.  In particular, replacing localtime(3)
calls with localtime_r(3) will not help to fix the issue.

--- vsftpd-2.0.3.orig/sysutil.c	2005-03-11 16:51:15 +0000
+++ vsftpd-2.0.3/sysutil.c	2005-11-27 21:54:53 +0000
@@ -2352,6 +2352,30 @@ vsf_sysutil_chroot(const char* p_root_path)
   {
     die("chroot");
   }
+  if (s_timezone)
+  {
+    char envtz[sizeof("UTC-hh:mm:ss")];
+    int hour, min, sec;
+
+    hour = s_timezone;
+    if (hour < 0)
+    {
+      hour = -hour;
+    }
+    if (hour < 25*60*60)
+    {
+      sec = hour % 60;
+      hour /= 60;
+      min = hour % 60;
+      hour /= 60;
+      if (s_timezone < 0)
+      {
+        hour = -hour;
+      }
+      snprintf(envtz, sizeof(envtz), "UTC%+d:%d:%d", hour, min, sec);
+      setenv("TZ", envtz, 1);
+    }
+  }
 }
 
 unsigned int
@@ -2382,16 +2406,12 @@
 void
 vsf_sysutil_tzset(void)
 {
+  time_t the_time = 0;
+  struct tm* p_tm;
   tzset();
-#if defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__)
-  {
-    time_t the_time = 0;
-    struct tm* p_tm = localtime(&the_time);
-    s_timezone = p_tm->tm_gmtoff * -1;
-  }
-#else
-  s_timezone = timezone;
-#endif
+  the_time = time(NULL);
+  p_tm = localtime(&the_time);
+  s_timezone = -p_tm->tm_gmtoff;
 }
 
 const char*
