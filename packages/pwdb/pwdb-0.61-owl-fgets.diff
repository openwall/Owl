diff -ur pwdb-0.61.orig/libpwdb/shadow/gshadow.c pwdb-0.61/libpwdb/shadow/gshadow.c
--- pwdb-0.61.orig/libpwdb/shadow/gshadow.c	Wed Oct  7 00:58:43 1998
+++ pwdb-0.61/libpwdb/shadow/gshadow.c	Mon Aug  7 05:53:54 2000
@@ -94,15 +94,20 @@
 {
 	char	buf[sizeof sgrbuf];
 	char	*cp;
+	int	c;
 
 	if (! fp)
 		return (0);
 
 	if (__pwdb_fgetsx (buf, sizeof buf, fp) != (char *) 0)
 	{
-		if ((cp = strchr (buf, '\n')))
+		if (buf[0] && *(cp = buf + strlen(buf) - 1) == '\n') {
 			*cp = '\0';
-		return (__pwdb_sgetsgent (buf));
+			return (__pwdb_sgetsgent (buf));
+		}
+		do {
+			c = getc(fp);
+		} while (c != EOF && c != '\n');
 	}
 	return 0;
 }
diff -ur pwdb-0.61.orig/libpwdb/shadow/sgroupio.c pwdb-0.61/libpwdb/shadow/sgroupio.c
--- pwdb-0.61.orig/libpwdb/shadow/sgroupio.c	Wed Oct  7 00:58:43 1998
+++ pwdb-0.61/libpwdb/shadow/sgroupio.c	Mon Aug  7 06:11:57 2000
@@ -184,6 +184,7 @@
 {
 	char	buf[8192];
 	char	*cp;
+	int	c;
 	struct	__pwdb_sg_file_entry	*sgrf;
 	struct	__pwdb_sgrp	*sgrent;
 
@@ -201,8 +202,15 @@
 	__sg_changed = 0;
 
 	while (__pwdb_fgetsx (buf, sizeof buf, sgrfp) != (char *) 0) {
-		if ((cp = strrchr (buf, '\n')))
+		if (buf[0] && *(cp = buf + strlen(buf) - 1) == '\n')
 			*cp = '\0';
+		else
+		if ((c = getc(sgrfp)) != EOF) {
+			while (c != EOF && c != '\n')
+				c = getc(sgrfp);
+			mode = O_RDONLY;
+			continue;
+		}
 
 		if (! (sgrf = (struct __pwdb_sg_file_entry *) malloc (sizeof *sgrf)))
 			return 0;
@@ -224,6 +232,7 @@
 			sgr_tail = sgrf;
 		}
 	}
+	if (ferror(sgrfp)) mode = O_RDONLY;
 	isopen++;
 	open_modes = mode;
 
diff -ur pwdb-0.61.orig/libpwdb/shadow/shadow.c pwdb-0.61/libpwdb/shadow/shadow.c
--- pwdb-0.61.orig/libpwdb/shadow/shadow.c	Wed Oct  7 00:58:43 1998
+++ pwdb-0.61/libpwdb/shadow/shadow.c	Mon Aug  7 06:16:20 2000
@@ -187,6 +187,7 @@
 {
 	char	buf[BUFSIZ];
 	char	*cp;
+	int	c;
 
 	shadow_file_end = 1;                   /* safety first */
 	if (! fp)
@@ -194,10 +195,14 @@
 
 	if (fgets (buf, sizeof buf, fp) != (char *) 0)
 	{
-		if ((cp = strchr (buf, '\n')))
-			*cp = '\0';
 		shadow_file_end = 0;                /* we read something */
-		return (__pwdb_sgetspent (buf));
+		if (buf[0] && *(cp = buf + strlen(buf) - 1) == '\n') {
+			*cp = '\0';
+			return (__pwdb_sgetspent (buf));
+		}
+		do {
+			c = getc(fp);
+		} while (c != EOF && c != '\n');
 	}
 	return 0;
 }
diff -ur pwdb-0.61.orig/libpwdb/shadow/shadowio.c pwdb-0.61/libpwdb/shadow/shadowio.c
--- pwdb-0.61.orig/libpwdb/shadow/shadowio.c	Wed Oct  7 00:58:43 1998
+++ pwdb-0.61/libpwdb/shadow/shadowio.c	Mon Aug  7 06:17:57 2000
@@ -167,6 +167,7 @@
 {
 	char	buf[BUFSIZ];
 	char	*cp;
+	int	c;
 	struct	spw_file_entry	*spwf;
 	struct	__pwdb_spwd	*spwd;
 
@@ -184,8 +185,15 @@
 	__sp_changed = 0;
 
 	while (fgets (buf, sizeof buf, spwfp) != (char *) 0) {
-		if ((cp = strrchr (buf, '\n')))
+		if (buf[0] && *(cp = buf + strlen(buf) - 1) == '\n')
 			*cp = '\0';
+		else
+		if ((c = getc(spwfp)) != EOF) {
+			while (c != EOF && c != '\n')
+				c = getc(spwfp);
+			mode = O_RDONLY;
+			continue;
+		}
 
 		if (! (spwf = (struct spw_file_entry *) malloc (sizeof *spwf)))
 			return 0;
@@ -208,6 +216,7 @@
 			spwf_tail = spwf;
 		}
 	}
+	if (ferror(spwfp)) mode = O_RDONLY;
 	isopen++;
 	open_modes = mode;
 
diff -ur pwdb-0.61.orig/libpwdb/unix/group.c pwdb-0.61/libpwdb/unix/group.c
--- pwdb-0.61.orig/libpwdb/unix/group.c	Wed Oct  7 00:58:43 1998
+++ pwdb-0.61/libpwdb/unix/group.c	Mon Aug  7 06:20:19 2000
@@ -77,14 +77,19 @@
 {
     char buf[BUFSIZ*4];
     char *cp;
+    int c;
 
     D(("called."));
 
     if (__pwdb_fgetsx (buf, sizeof buf, fp) != (char *) 0)
     {
-	if ((cp = strchr (buf, '\n')))
-	    *cp = '\0';
-	return (__pwdb_sgetgrent (buf));
+	if (buf[0] && *(cp = buf + strlen(buf) - 1) == '\n') {
+		*cp = '\0';
+		return (__pwdb_sgetgrent (buf));
+	}
+	do {
+		c = getc(fp);
+	} while (c != EOF && c != '\n');
     }
     return 0;
 }
diff -ur pwdb-0.61.orig/libpwdb/unix/groupio.c pwdb-0.61/libpwdb/unix/groupio.c
--- pwdb-0.61.orig/libpwdb/unix/groupio.c	Wed Oct  7 00:58:43 1998
+++ pwdb-0.61/libpwdb/unix/groupio.c	Mon Aug  7 06:22:31 2000
@@ -165,6 +165,7 @@
 {
 	char	buf[8192];
 	char	*cp;
+	int	c;
 	struct	__pwdb_gr_file_entry	*grf;
 	struct	__pwdb_group	*grent;
 
@@ -182,8 +183,15 @@
 	__gr_changed = 0;
 
 	while (__pwdb_fgetsx (buf, sizeof buf, grfp) != (char *) 0) {
-		if ((cp = strrchr (buf, '\n')))
+		if (buf[0] && *(cp = buf + strlen(buf) - 1) == '\n')
 			*cp = '\0';
+		else
+		if ((c = getc(grfp)) != EOF) {
+			while (c != EOF && c != '\n')
+				c = getc(grfp);
+			mode = O_RDONLY;
+			continue;
+		}
 
 		if (! (grf = (struct __pwdb_gr_file_entry *) malloc (sizeof *grf)))
 			return 0;
@@ -205,6 +213,7 @@
 			grf_tail = grf;
 		}
 	}
+	if (ferror(grfp)) mode = O_RDONLY;
 	isopen++;
 	open_modes = mode;
 
diff -ur pwdb-0.61.orig/libpwdb/unix/passwd.c pwdb-0.61/libpwdb/unix/passwd.c
--- pwdb-0.61.orig/libpwdb/unix/passwd.c	Sat Apr 10 01:22:02 1999
+++ pwdb-0.61/libpwdb/unix/passwd.c	Mon Aug  7 06:24:08 2000
@@ -108,12 +108,19 @@
 struct __pwdb_passwd * __pwdb_fgetpwent (FILE *fp)
 {
     char	buf[BUFSIZ];
+    char	*cp;
+    int		c;
 
     passwd_file_end = 1;
     if (fgets (buf, BUFSIZ, fp) != (char *) 0) {
-        buf[strlen (buf) - 1] = '\0';
         passwd_file_end = 0; 
-        return (__pwdb_sgetpwent (buf));
+	if (buf[0] && *(cp = buf + strlen(buf) - 1) == '\n') {
+		*cp = '\0';
+		return (__pwdb_sgetpwent (buf));
+	}
+	do {
+		c = getc(fp);
+	} while (c != EOF && c != '\n');
     }
     return 0;
 }
diff -ur pwdb-0.61.orig/libpwdb/unix/pwio.c pwdb-0.61/libpwdb/unix/pwio.c
--- pwdb-0.61.orig/libpwdb/unix/pwio.c	Wed Oct  7 00:58:43 1998
+++ pwdb-0.61/libpwdb/unix/pwio.c	Mon Aug  7 06:27:19 2000
@@ -112,6 +112,7 @@
 {
 	char	buf[8192];
 	char	*cp;
+	int	c;
 	struct	pw_file_entry	*pwf;
 	struct	__pwdb_passwd	*pwent;
 
@@ -129,8 +130,15 @@
 	__pw_changed = 0;
 
 	while (fgets (buf, sizeof buf, pwfp) != (char *) 0) {
-		if ((cp = strrchr (buf, '\n')))
+		if (buf[0] && *(cp = buf + strlen(buf) - 1) == '\n')
 			*cp = '\0';
+		else
+		if ((c = getc(pwfp)) != EOF) {
+			while (c != EOF && c != '\n')
+				c = getc(pwfp);
+			mode = O_RDONLY;
+			continue;
+		}
 
 		if (! (pwf = (struct pw_file_entry *) malloc (sizeof *pwf)))
 			return 0;
@@ -153,6 +161,7 @@
 			pwf_tail = pwf;
 		}
 	}
+	if (ferror(pwfp)) mode = O_RDONLY;
 	isopen++;
 	open_modes = mode;
 
