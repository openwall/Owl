Various build fixes.

2003-09-06  Dmitry V. Levin <ldv at altlinux.org>

	* defs.h (printrusage32): Declare for [LINUX_64BIT] only.
	* file.c (realprintstat): Add cast for st_size.
	* file.c (sys_getdents): Fix format for offset.
	* process.c (change_syscall): Define for [SYS_vfork] only.
	* process.c (setarg): setarg seems to be unused.
	* syscall.c (socket_map): make static and define for
	[LINUX && SPARC] only.
	* syscall.c (sparc_socket_decode): make static.
	* syscall.c (decode_subcall): define only for those
	architectures where it's used.
	* syscall.c (get_scno): Fix spelling.
	Fix format for register.
	* util.c (printcall): Include <asm/reg.h> for
	[HAVE_ASM_REG_H] only.
	* util.c (printcall): Fix format for register.
	Based on patch from Solar Designer <solar at openwall.com>.

diff -uprk.orig strace-4.5.1.orig/defs.h strace-4.5.1/defs.h
--- strace-4.5.1.orig/defs.h	2003-11-14 05:54:03 +0300
+++ strace-4.5.1/defs.h	2003-12-15 00:27:20 +0300
@@ -441,6 +441,9 @@ extern void printsiginfo P((siginfo_t *,
 extern void printsock P((struct tcb *, long, int));
 extern void print_sock_optmgmt P((struct tcb *, long, int));
 extern void printrusage P((struct tcb *, long));
+#ifdef LINUX_64BIT
+extern void printrusage32 P((struct tcb *, long));
+#endif
 extern void printuid P((const char *, unsigned long));
 extern int clearbpt P((struct tcb *));
 extern int setbpt P((struct tcb *));
diff -uprk.orig strace-4.5.1.orig/file.c strace-4.5.1/file.c
--- strace-4.5.1.orig/file.c	2003-11-14 01:32:27 +0300
+++ strace-4.5.1/file.c	2003-12-15 00:26:38 +0300
@@ -751,7 +751,7 @@ struct stat *statbuf;
 #endif /* !HAVE_STRUCT_STAT_ST_RDEV */
 	    break;
     default:
-	    tprintf("st_size=%lu, ", statbuf->st_size);
+	    tprintf("st_size=%lu, ", (unsigned long)statbuf->st_size);
 	    break;
     }
     if (!abbrev(tcp)) {
@@ -1949,8 +1949,9 @@ struct tcb *tcp;
 		struct kernel_dirent *d = (struct kernel_dirent *) &buf[i];
 #ifdef LINUX
 		if (!abbrev(tcp)) {
-			tprintf("%s{d_ino=%lu, d_off=%lu, ",
-				i ? " " : "", d->d_ino, d->d_off);
+			tprintf("%s{d_ino=%lu, d_off=%llu, ",
+				i ? " " : "",
+				d->d_ino, (unsigned long long)d->d_off);
 			tprintf("d_reclen=%u, d_name=\"%s\"}",
 				d->d_reclen, d->d_name);
 		}
diff -uprk.orig strace-4.5.1.orig/process.c strace-4.5.1/process.c
--- strace-4.5.1.orig/process.c	2003-11-14 01:32:26 +0300
+++ strace-4.5.1/process.c	2003-12-15 00:26:38 +0300
@@ -610,6 +610,7 @@ struct tcb *tcp;
 	return 0;
 }
 
+#ifdef SYS_vfork
 int
 change_syscall(tcp, new)
 struct tcb *tcp;
@@ -681,7 +682,9 @@ int new;
 #endif /* LINUX */
 	return -1;
 }
+#endif
 
+#if 0
 int
 setarg(tcp, argnum)
 	struct tcb *tcp;
@@ -759,6 +762,7 @@ setarg(tcp, argnum)
 #endif
 	return 0;
 }
+#endif
 
 #if defined SYS_clone || defined SYS_clone2
 int
diff -uprk.orig strace-4.5.1.orig/syscall.c strace-4.5.1/syscall.c
--- strace-4.5.1.orig/syscall.c	2003-11-02 01:11:22 +0300
+++ strace-4.5.1/syscall.c	2003-12-15 00:26:38 +0300
@@ -477,9 +477,8 @@ const struct subcall subcalls_table[] = 
 };
 #endif /* FREEBSD */
 
-#if !(defined(LINUX) && ( defined(ALPHA) || defined(MIPS) ))
-
-const int socket_map [] = {
+#if defined(LINUX) && defined(SPARC)
+static const int socket_map [] = {
 	       /* SYS_SOCKET      */ 97,
 	       /* SYS_BIND        */ 104,
 	       /* SYS_CONNECT     */ 98,
@@ -499,7 +498,7 @@ const int socket_map [] = {
 	       /* SYS_RECVMSG     */ 113
 };
 
-void
+static void
 sparc_socket_decode (tcp)
 struct tcb *tcp;
 {
@@ -520,7 +519,12 @@ struct tcb *tcp;
 		addr += sizeof (arg);
 	}
 }
+#endif
 
+#if defined(LINUX) && \
+    !(defined (ALPHA) || defined(SPARC) || defined(MIPS) || \
+      defined(HPPA) || defined(X86_64)) || \
+    defined(SVR4) || defined(FREEBSD) || defined(SUNOS4)
 void
 decode_subcall(tcp, subcall, nsubcalls, style)
 struct tcb *tcp;
@@ -1074,7 +1078,7 @@ struct tcb *tcp;
 			return -1;
 		case 0x91d02000:
 			/* SunOS syscall trap. (pers 1) */
-			fprintf(stderr,"syscall: SunOS no support\n");
+			fprintf(stderr,"syscall: SunOS not supported\n");
 			return -1;
 		case 0x91d02008:
 			/* Solaris 2.x syscall trap. (per 2) */
@@ -1094,7 +1098,7 @@ struct tcb *tcp;
 				tcp->flags &= ~TCB_WAITEXECVE;
 				return 0;
 			}
-			fprintf(stderr,"syscall: unknown syscall trap %08x %08x\n", trap, regs.r_pc);
+			fprintf(stderr,"syscall: unknown syscall trap %08lx %08x\n", trap, regs.r_pc);
 			return -1;
 		}
 
diff -uprk.orig strace-4.5.1.orig/util.c strace-4.5.1/util.c
--- strace-4.5.1.orig/util.c	2003-11-14 01:32:27 +0300
+++ strace-4.5.1/util.c	2003-12-15 00:26:38 +0300
@@ -72,6 +72,7 @@
 
 #if defined(LINUX) && defined(SPARC)
 
+#ifdef HAVE_ASM_REG_H
 # define fpq kernel_fpq
 # define fq kernel_fq
 # define fpu kernel_fpu
@@ -79,6 +80,7 @@
 # undef fpq
 # undef fq
 # undef fpu
+#endif /* HAVE_ASM_REG_H */
 
 #if !defined(__GLIBC__)
 
@@ -1076,7 +1078,7 @@ struct tcb *tcp;
 		tprintf("[????????] ");
 		return;
 	}
-	tprintf("[%08lx] ", regs.r_pc);
+	tprintf("[%08x] ", regs.r_pc);
 #elif defined(HPPA)
 	long pc;
 
