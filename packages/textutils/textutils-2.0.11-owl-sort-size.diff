diff -ur textutils-2.0.11.orig/src/sort.c textutils-2.0.11/src/sort.c
--- textutils-2.0.11.orig/src/sort.c	Tue Dec 19 12:21:35 2000
+++ textutils-2.0.11/src/sort.c	Fri Jan 26 08:31:11 2001
@@ -24,6 +24,7 @@
 #include <config.h>
 
 #include <sys/types.h>
+#include <sys/resource.h>
 #include <signal.h>
 #include <stdio.h>
 #include <assert.h>
@@ -223,6 +224,9 @@
 /* Minimum text buffer size if the user does not specify a size.  */
 #define SORTALLOC_DEFAULT_MIN max (SORTALLOC_MIN, 1024 * 1024)
 
+/* Maximum text buffer size if the user does not specify a size.  */
+#define SORTALLOC_DEFAULT_MAX max (SORTALLOC_MIN, 64 * 1024 * 1024)
+
 /* Initial text buffer size for main-memory sorting.  The buffer will
    grow only if a line longer than this is seen.  */
 static size_t sortalloc;
@@ -628,13 +632,35 @@
 static void
 default_sort_size (void)
 {
-  /* Set sortalloc to 50% of available memory, unless it overflows.  */
-  double mem = physmem_available ();
-  sortalloc = min (mem, SIZE_MAX);
-  sortalloc >>= 1;
+  /* Set sortalloc to use 50% of available memory, unless it overflows.  */
+  double avail = physmem_available ();
+  double total = physmem_total ();
+  double use;
+  struct rlimit limit;
+
+  /* "Available physical memory" may be very low due to caching, use at
+     least 5% of total if that's not too much.  */
+  use = max(avail, total / 10);
+  if (getrlimit(RLIMIT_DATA, &limit) == 0 && use > limit.rlim_cur)
+    use = limit.rlim_cur;
+#ifdef RLIMIT_AS
+  if (getrlimit(RLIMIT_AS, &limit) == 0 && use > limit.rlim_cur)
+    use = limit.rlim_cur;
+#endif
+
+  sortalloc = min (use, SIZE_MAX);
+  /* 1/3 + 1/6 = 50% */
+  sortalloc /= 3;
 
   if (sortalloc < SORTALLOC_DEFAULT_MIN)
     sortalloc = SORTALLOC_DEFAULT_MIN;
+
+  /* A maximum size is required for two reasons: (1) the physical address
+     space (and even available physical memory) may be larger than the
+     per-process address space supported by the platform, and (2) many
+     instances of sort(1) should be runnable on sufficiently large boxes.  */
+  if (sortalloc > SORTALLOC_DEFAULT_MAX)
+    sortalloc = SORTALLOC_DEFAULT_MAX;
 }
 
 /* Initialize BUF, allocating ALLOC bytes initially. */
