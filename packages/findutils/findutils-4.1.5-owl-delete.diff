diff -urN findutils-4.1.5/find/defs.h findutils-4.1.5.kad/find/defs.h
--- findutils-4.1.5/find/defs.h	Tue Apr 11 04:32:49 2000
+++ findutils-4.1.5.kad/find/defs.h	Sat Sep 23 18:34:29 2000
@@ -329,6 +329,7 @@
 boolean pred_cnewer PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
 boolean pred_comma PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
 boolean pred_ctime PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
+boolean pred_delete PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
 boolean pred_empty PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
 boolean pred_exec PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
 boolean pred_false PARAMS((char *pathname, struct stat *stat_buf, struct predicate *pred_ptr));
diff -urN findutils-4.1.5/find/find.c findutils-4.1.5.kad/find/find.c
--- findutils-4.1.5/find/find.c	Thu Apr  6 13:21:54 2000
+++ findutils-4.1.5.kad/find/find.c	Sat Sep 23 18:37:58 2000
@@ -121,7 +121,7 @@
 boolean have_stat;
 
 /* The file being operated on, relative to the current directory.
-   Used for stat, readlink, and opendir.  */
+   Used for stat, readlink, remove, and opendir.  */
 char *rel_pathname;
 
 /* Length of current path. */
@@ -352,6 +352,8 @@
   struct stat stat_buf;
   static dev_t root_dev;	/* Device ID of current argument pathname. */
   int i;
+  struct stat dir_buf;
+  int parent_desc;
 
   /* Assume it is a non-directory initially. */
   stat_buf.st_mode = 0;
@@ -415,8 +417,48 @@
 #endif /* DEBUG */
   
   if (stop_at_current_level == false)
-    /* Scan directory on disk. */
-    process_dir (pathname, name, strlen (pathname), &stat_buf, parent);
+    {
+      parent_desc = open (".", O_RDONLY);
+      if (parent_desc < 0)
+        error (1, errno, "%s", pathname);
+
+      if (chdir (name) < 0)
+      {
+        error (0, errno, "%s", pathname);
+        exit_status = 1;
+        close(parent_desc);
+        return;
+      }
+
+      if ((*xstat) (".", &dir_buf) < 0)
+      error (1, errno, "%s", pathname);
+
+      if (!S_ISDIR (dir_buf.st_mode) || dir_buf.st_ino != stat_buf.st_ino ||
+        dir_buf.st_dev != stat_buf.st_dev)
+      error (1, 0, "Link changed: %s", pathname);
+
+      /* Scan directory on disk. */
+      process_dir (pathname, ".", strlen (pathname), &stat_buf, pathname);
+
+#ifndef HAVE_FCHDIR
+      if (!dereference)
+      {
+        if (chdir ("..") < 0)
+          error (1, errno, "%s", parent);
+      }
+      else
+      {
+        if (chdir (starting_dir) || chdir (parent))
+          error (1, errno, "%s", parent);
+      }
+#else
+      if (fchdir (parent_desc) < 0)
+      error (1, errno, "%s", parent);
+#endif
+      close (parent_desc);
+    }
+
+  rel_pathname = name;
 
   if (do_dir_first == false && curdepth >= mindepth)
     {
@@ -476,13 +518,6 @@
       cur_path_size = 0;
       cur_path = NULL;
 
-      if (strcmp (name, ".") && chdir (name) < 0)
-	{
-	  error (0, errno, "%s", pathname);
-	  exit_status = 1;
-	  return;
-	}
-
       for (namep = name_space; *namep; namep += file_len - pathname_len + 1)
 	{
 	  /* Append this directory entry's name to the path being searched. */
@@ -517,27 +552,6 @@
 	       mounted, which don't have Unix-like directory link counts. */
 	    process_path (cur_path, cur_name, false, pathname);
 	  curdepth--;
-	}
-
-      if (strcmp (name, "."))
-	{
-	  if (!dereference)
-	    {
-	      if (chdir ("..") < 0)
-		/* We could go back and do the next command-line arg instead,
-		   maybe using longjmp.  */
-		error (1, errno, "%s", parent);
-	    }
-	  else
-	    {
-#ifndef HAVE_FCHDIR
-	      if (chdir (starting_dir) || chdir (parent))
-		error (1, errno, "%s", parent);
-#else
-	      if (fchdir (starting_desc) || chdir (parent))
-		error (1, errno, "%s", parent);
-#endif
-	    }
 	}
 
       if (cur_path)
diff -urN findutils-4.1.5/find/parser.c findutils-4.1.5.kad/find/parser.c
--- findutils-4.1.5/find/parser.c	Fri Apr  7 18:59:27 2000
+++ findutils-4.1.5.kad/find/parser.c	Sat Sep 23 18:40:32 2000
@@ -62,6 +62,7 @@
 static boolean parse_comma PARAMS((char *argv[], int *arg_ptr));
 static boolean parse_ctime PARAMS((char *argv[], int *arg_ptr));
 static boolean parse_daystart PARAMS((char *argv[], int *arg_ptr));
+static boolean parse_delete PARAMS((char *argv[], int *arg_ptr));
 static boolean parse_depth PARAMS((char *argv[], int *arg_ptr));
 static boolean parse_empty PARAMS((char *argv[], int *arg_ptr));
 static boolean parse_exec PARAMS((char *argv[], int *arg_ptr));
@@ -160,6 +161,7 @@
 #endif
   {"ctime", parse_ctime},
   {"daystart", parse_daystart},	/* GNU */
+  {"delete", parse_delete},
   {"depth", parse_depth},
   {"empty", parse_empty},	/* GNU */
   {"exec", parse_exec},
@@ -398,6 +400,20 @@
 }
 
 static boolean
+parse_delete (argv, arg_ptr)
+  char *argv[];
+  int *arg_ptr;
+{
+  struct predicate *our_pred;
+
+  our_pred = insert_primary (pred_delete);
+  our_pred->side_effects = true;
+  /* -delete implies -depth */
+  do_dir_first = false;
+  return (true);
+}
+
+static boolean
 parse_depth (char **argv, int *arg_ptr)
 {
   do_dir_first = false;
@@ -556,7 +572,7 @@
       ( EXPR ) ! EXPR -not EXPR EXPR1 -a EXPR2 EXPR1 -and EXPR2\n"));
   printf (_("\
       EXPR1 -o EXPR2 EXPR1 -or EXPR2 EXPR1 , EXPR2\n\
-options (always true): -daystart -depth -follow --help\n\
+options (always true): -daystart -delete -depth -follow --help\n\
       -maxdepth LEVELS -mindepth LEVELS -mount -noleaf --version -xdev\n\
 tests (N can be +N or -N or N): -amin N -anewer FILE -atime N -cmin N\n"));
   printf (_("\
diff -urN findutils-4.1.5/find/pred.c findutils-4.1.5.kad/find/pred.c
--- findutils-4.1.5/find/pred.c	Sat Sep 23 18:41:55 2000
+++ findutils-4.1.5.kad/find/pred.c	Sat Sep 23 18:33:29 2000
@@ -155,6 +155,7 @@
   {pred_cnewer, "cnewer  "},
   {pred_comma, ",       "},
   {pred_ctime, "ctime   "},
+  {pred_delete, "delete  "},
   {pred_empty, "empty   "},
   {pred_exec, "exec    "},
   {pred_false, "false   "},
@@ -396,6 +397,17 @@
       break;
     }
   return (false);
+}
+
+boolean
+pred_delete (pathname, stat_buf, pred_ptr)
+     char *pathname;
+     struct stat *stat_buf;
+     struct predicate *pred_ptr;
+{
+  if (strcmp (rel_pathname, "."))
+    return (remove (rel_pathname));
+  return (true);
 }
 
 boolean
