diff -urN openssh-2.5.1p1-owl-pam_chauthtok-no-loop/Makefile.in openssh-2.5.1p1/Makefile.in
--- openssh-2.5.1p1-owl-pam_chauthtok-no-loop/Makefile.in	Sun Feb 18 22:13:33 2001
+++ openssh-2.5.1p1/Makefile.in	Wed Feb 28 09:16:54 2001
@@ -48,7 +48,7 @@
 
 SSHOBJS= ssh.o sshconnect.o sshconnect1.o sshconnect2.o log-client.o readconf.o clientloop.o
 
-SSHDOBJS= sshd.o auth.o auth1.o auth2.o auth-chall.o auth2-chall.o auth-rhosts.o auth-options.o auth-krb4.o auth-pam.o auth2-pam.o auth-passwd.o auth-rsa.o auth-rh-rsa.o auth-sia.o dh.o sshpty.o log-server.o sshlogin.o loginrec.o servconf.o serverloop.o md5crypt.o session.o groupaccess.o
+SSHDOBJS= sshd.o auth.o auth1.o auth2.o auth-chall.o auth2-chall.o auth-rhosts.o auth-options.o auth-krb4.o auth-pam.o appl_userpass.o auth2-pam.o auth-passwd.o auth-rsa.o auth-rh-rsa.o auth-sia.o dh.o sshpty.o log-server.o sshlogin.o loginrec.o servconf.o serverloop.o md5crypt.o session.o groupaccess.o
 
 TROFFMAN	= scp.1 ssh-add.1 ssh-agent.1 ssh-keygen.1 ssh-keyscan.1 ssh.1 sshd.8 sftp-server.8 sftp.1
 CATMAN		= scp.0 ssh-add.0 ssh-agent.0 ssh-keygen.0 ssh-keyscan.0 ssh.0 sshd.0 sftp-server.0 sftp.0
diff -urN openssh-2.5.1p1-owl-pam_chauthtok-no-loop/_pam_userpass.h openssh-2.5.1p1/_pam_userpass.h
--- openssh-2.5.1p1-owl-pam_chauthtok-no-loop/_pam_userpass.h	Thu Jan  1 03:00:00 1970
+++ openssh-2.5.1p1/_pam_userpass.h	Wed Feb 28 09:16:54 2001
@@ -0,0 +1,12 @@
+#ifndef __PAM_USERPASS_H
+#define __PAM_USERPASS_H
+
+#define USERPASS_AGENT_ID		"userpass"
+#define USERPASS_AGENT_ID_LENGTH	8
+
+#define USERPASS_USER_MASK		0x03
+#define USERPASS_USER_REQUIRED		1
+#define USERPASS_USER_KNOWN		2
+#define USERPASS_USER_FIXED		3
+
+#endif
diff -urN openssh-2.5.1p1-owl-pam_chauthtok-no-loop/appl_userpass.c openssh-2.5.1p1/appl_userpass.c
--- openssh-2.5.1p1-owl-pam_chauthtok-no-loop/appl_userpass.c	Thu Jan  1 03:00:00 1970
+++ openssh-2.5.1p1/appl_userpass.c	Wed Feb 28 09:16:54 2001
@@ -0,0 +1,51 @@
+#include <string.h>
+#include <stdlib.h>
+
+#include <security/pam_appl.h>
+#include <security/pam_client.h>
+
+#include "_pam_userpass.h"
+#include "pam_userpass.h"
+
+int pam_userpass_conv(int num_msg, const struct pam_message **msg,
+	struct pam_response **resp, void *appdata_ptr)
+{
+	pam_userpass_t *userpass = (pam_userpass_t *)appdata_ptr;
+	pamc_bp_t prompt;
+	char *data;
+	char flags;
+
+	if (num_msg != 1 || msg[0]->msg_style != PAM_BINARY_PROMPT)
+		return PAM_CONV_ERR;
+
+	prompt = (pamc_bp_t)msg[0]->msg;
+	data = PAM_BP_DATA(prompt);
+
+	if (PAM_BP_CONTROL(prompt) != PAM_BPC_SELECT ||
+	    strncmp(data, USERPASS_AGENT_ID "/", USERPASS_AGENT_ID_LENGTH + 1))
+		return PAM_CONV_ERR;
+
+	flags = data[USERPASS_AGENT_ID_LENGTH + 1];
+	data += USERPASS_AGENT_ID_LENGTH + 1 + 1;
+
+	if ((flags & USERPASS_USER_MASK) == USERPASS_USER_FIXED &&
+	    strcmp(data, userpass->user))
+		return PAM_CONV_AGAIN;
+
+	if (!(*resp = malloc(sizeof(struct pam_response))))
+		return PAM_CONV_ERR;
+
+	prompt = NULL;
+	PAM_BP_RENEW(&prompt, PAM_BPC_DONE,
+		strlen(userpass->user) + 1 + strlen(userpass->pass));
+	data = PAM_BP_DATA(prompt);
+
+	strcpy(data, userpass->user);
+	data += strlen(data) + 1;
+	memcpy(data, userpass->pass, strlen(userpass->pass));
+
+	(*resp)[0].resp_retcode = 0;
+	(*resp)[0].resp = (char *)prompt;
+
+	return PAM_SUCCESS;
+}
diff -urN openssh-2.5.1p1-owl-pam_chauthtok-no-loop/auth-pam.c openssh-2.5.1p1/auth-pam.c
--- openssh-2.5.1p1-owl-pam_chauthtok-no-loop/auth-pam.c	Wed Feb 28 09:15:19 2001
+++ openssh-2.5.1p1/auth-pam.c	Wed Feb 28 09:16:54 2001
@@ -33,6 +33,9 @@
 #include "canohost.h"
 #include "readpass.h"
 
+#include <security/pam_misc.h>
+#include "pam_userpass.h"
+
 RCSID("$Id: auth-pam.c,v 1.29 2001/02/15 00:51:32 djm Exp $");
 
 #define NEW_AUTHTOK_MSG \
@@ -42,13 +45,13 @@
 	struct pam_response **resp, void *appdata_ptr);
 
 /* module-local variables */
+static pam_userpass_t userpass;
 static struct pam_conv conv = {
 	do_pam_conversation,
-	NULL
+	&userpass
 };
 static char *__pam_msg = NULL;
 static pam_handle_t *__pamh = NULL;
-static const char *__pampasswd = NULL;
 
 /* states for do_pam_conversation() */
 enum { INITIAL_LOGIN, OTHER } pamstate = INITIAL_LOGIN;
@@ -80,18 +83,20 @@
  * PAM conversation function.
  * There are two states this can run in.
  *
- * INITIAL_LOGIN mode simply feeds the password from the client into
- * PAM in response to PAM_PROMPT_ECHO_OFF, and collects output
- * messages with into __pam_msg.  This is used during initial
- * authentication to bypass the normal PAM password prompt.
+ * INITIAL_LOGIN mode simply feeds the username and the password from
+ * the client into PAM via Linux-PAM binary prompts.
  *
- * OTHER mode handles PAM_PROMPT_ECHO_OFF with read_passphrase(prompt, 1)
- * and outputs messages to stderr. This mode is used if pam_chauthtok()
- * is called to update expired passwords.
+ * OTHER mode is a regular PAM conversation.  This mode is used if
+ * pam_chauthtok() is called to update expired passwords.
  */
 static int do_pam_conversation(int num_msg, const struct pam_message **msg,
 	struct pam_response **resp, void *appdata_ptr)
 {
+	if (pamstate == INITIAL_LOGIN)
+		return pam_userpass_conv(num_msg, msg, resp, appdata_ptr);
+	return misc_conv(num_msg, msg, resp, appdata_ptr);
+
+#if 0
 	struct pam_response *reply;
 	int count;
 	char buf[1024];
@@ -167,6 +172,7 @@
 	*resp = reply;
 
 	return PAM_SUCCESS;
+#endif
 }
 
 /* Called at exit to cleanly shutdown PAM */
@@ -214,7 +220,8 @@
 	if (*password == '\0' && options.permit_empty_passwd == 0)
 		fail = 1;
 
-	__pampasswd = password;
+	userpass.user = pw ? pw->pw_name : "ILLEGAL USER";
+	userpass.pass = password;
 
 	pamstate = INITIAL_LOGIN;
 	pam_retval = do_pam_authenticate(0);
diff -urN openssh-2.5.1p1-owl-pam_chauthtok-no-loop/pam_userpass.h openssh-2.5.1p1/pam_userpass.h
--- openssh-2.5.1p1-owl-pam_chauthtok-no-loop/pam_userpass.h	Thu Jan  1 03:00:00 1970
+++ openssh-2.5.1p1/pam_userpass.h	Wed Feb 28 09:16:54 2001
@@ -0,0 +1,14 @@
+#ifndef _PAM_USERPASS_H
+#define _PAM_USERPASS_H
+
+#include <security/pam_appl.h>
+
+typedef struct {
+	char *user;
+	char *pass;
+} pam_userpass_t;
+
+extern int pam_userpass_conv(int num_msg, const struct pam_message **msg,
+	struct pam_response **resp, void *appdata_ptr);
+
+#endif
