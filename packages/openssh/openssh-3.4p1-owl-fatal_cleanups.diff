diff -ur openssh-3.4p1.orig/auth-pam.c openssh-3.4p1/auth-pam.c
--- openssh-3.4p1.orig/auth-pam.c	Wed May  8 06:27:56 2002
+++ openssh-3.4p1/auth-pam.c	Sat Jul  6 02:42:50 2002
@@ -177,7 +177,7 @@
 {
 	int pam_retval = PAM_SUCCESS;
 
-	if (__pamh && session_opened) {
+	if (__pamh && getpid() == session_opened) {
 		pam_retval = pam_close_session(__pamh, 0);
 		if (pam_retval != PAM_SUCCESS)
 			log("Cannot close PAM session[%d]: %.200s",
@@ -291,7 +291,7 @@
 		fatal("PAM session setup failed[%d]: %.200s",
 		    pam_retval, PAM_STRERROR(__pamh, pam_retval));
 
-	session_opened = 1;
+	session_opened = getpid();
 }
 
 /* Set PAM credentials */
diff -ur openssh-3.4p1.orig/packet.c openssh-3.4p1/packet.c
--- openssh-3.4p1.orig/packet.c	Mon Jun 24 01:49:25 2002
+++ openssh-3.4p1/packet.c	Sat Jul  6 02:39:59 2002
@@ -148,8 +148,6 @@
 		buffer_init(&outgoing_packet);
 		buffer_init(&incoming_packet);
 	}
-	/* Kludge: arrange the close function to be called from fatal(). */
-	fatal_add_cleanup((void (*) (void *)) packet_close, NULL);
 }
 
 /* Returns 1 if remote host is connected via socket, 0 if not. */
diff -ur openssh-3.4p1.orig/session.c openssh-3.4p1/session.c
--- openssh-3.4p1.orig/session.c	Wed Jun 26 17:51:06 2002
+++ openssh-3.4p1/session.c	Sat Jul  6 05:24:37 2002
@@ -470,6 +470,8 @@
 
 	/* Fork the child. */
 	if ((pid = fork()) == 0) {
+		fatal_remove_cleanup((void (*) (void *)) packet_close, NULL);
+
 		/* Child.  Reinitialize the log since the pid has changed. */
 		log_init(__progname, options.log_level, options.log_facility, log_stderr);
 
@@ -585,6 +587,8 @@
 
 	/* Fork the child. */
 	if ((pid = fork()) == 0) {
+		fatal_remove_cleanup(session_pty_cleanup, (void *)s);
+		fatal_remove_cleanup((void (*) (void *)) packet_close, NULL);
 
 		/* Child.  Reinitialize the log because the pid has changed. */
 		log_init(__progname, options.log_level, options.log_facility, log_stderr);
@@ -1593,7 +1597,9 @@
 	 * Add a cleanup function to clear the utmp entry and record logout
 	 * time in case we call fatal() (e.g., the connection gets closed).
 	 */
+	fatal_remove_cleanup((void (*) (void *)) packet_close, NULL);
 	fatal_add_cleanup(session_pty_cleanup, (void *)s);
+	fatal_add_cleanup((void (*) (void *)) packet_close, NULL);
 	if (!use_privsep)
 		pty_setowner(s->pw, s->tty);
 
diff -ur openssh-3.4p1.orig/ssh-keyscan.c openssh-3.4p1/ssh-keyscan.c
--- openssh-3.4p1.orig/ssh-keyscan.c	Fri Jun 21 04:09:54 2002
+++ openssh-3.4p1/ssh-keyscan.c	Sun Jul 28 03:20:35 2002
@@ -344,6 +344,7 @@
 	int j;
 
 	packet_set_connection(c->c_fd, c->c_fd);
+	fatal_add_cleanup((void (*) (void *)) packet_close, NULL);
 	enable_compat20();
 	myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = c->c_keytype == KT_DSA?
 	    "ssh-dss": "ssh-rsa";
diff -ur openssh-3.4p1.orig/sshconnect.c openssh-3.4p1/sshconnect.c
--- openssh-3.4p1.orig/sshconnect.c	Mon Jun 24 01:23:20 2002
+++ openssh-3.4p1/sshconnect.c	Sun Jul 28 03:20:07 2002
@@ -153,6 +153,7 @@
 
 	/* Set the connection file descriptors. */
 	packet_set_connection(pout[0], pin[1]);
+	fatal_add_cleanup((void (*) (void *)) packet_close, NULL);
 
 	/* Indicate OK return */
 	return 0;
@@ -354,6 +355,7 @@
 
 	/* Set the connection. */
 	packet_set_connection(sock, sock);
+	fatal_add_cleanup((void (*) (void *)) packet_close, NULL);
 
 	return 0;
 }
diff -ur openssh-3.4p1.orig/sshd.c openssh-3.4p1/sshd.c
--- openssh-3.4p1.orig/sshd.c	Wed Jun 26 03:24:19 2002
+++ openssh-3.4p1/sshd.c	Sun Jul  7 07:04:55 2002
@@ -303,9 +303,6 @@
 {
 	/* XXX no idea how fix this signal handler */
 
-	/* Close the connection. */
-	packet_close();
-
 	/* Log error and exit. */
 	fatal("Timeout before authentication for %s.", get_remote_ipaddr());
 }
@@ -612,6 +609,8 @@
 		if (getuid() == 0 || geteuid() == 0)
 			privsep_preauth_child();
 		setproctitle("%s", "[net]");
+
+		fatal_add_cleanup((void (*) (void *)) packet_close, NULL);
 	}
 	return (NULL);
 }
@@ -630,6 +629,7 @@
 	if (authctxt->pw->pw_uid == 0 || options.use_login) {
 #endif
 		/* File descriptor passing is broken or root login */
+		fatal_add_cleanup((void (*) (void *))packet_close, NULL);
 		monitor_apply_keystate(pmonitor);
 		use_privsep = 0;
 		return;
@@ -665,6 +665,8 @@
 	/* Drop privileges */
 	do_setusercontext(authctxt->pw);
 
+	fatal_add_cleanup((void (*) (void *))packet_close, NULL);
+
 	/* It is safe now to apply the key state */
 	monitor_apply_keystate(pmonitor);
 }
@@ -1483,9 +1485,11 @@
 
 	packet_set_nonblocking();
 
-	if (use_privsep)
+	if (use_privsep) {
 		if ((authctxt = privsep_preauth()) != NULL)
 			goto authenticated;
+	} else
+		fatal_add_cleanup((void (*) (void *)) packet_close, NULL);
 
 	/* perform the key exchange */
 	/* authenticate user and start session */
