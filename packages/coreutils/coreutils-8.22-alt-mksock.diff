diff --git a/AUTHORS b/AUTHORS
index df21e90..c2304a4 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -46,6 +46,7 @@ md5sum: Ulrich Drepper, Scott Miller, David Madore
 mkdir: David MacKenzie
 mkfifo: David MacKenzie
 mknod: David MacKenzie
+mksock: Dmitry V. Levin
 mktemp: Jim Meyering, Eric Blake
 mv: Mike Parker, David MacKenzie, Jim Meyering
 nice: David MacKenzie
diff --git a/README b/README
index fa1a429..226e141 100644
--- a/README
+++ b/README
@@ -10,7 +10,7 @@ The programs that can be built with this package are:
   [ arch base64 basename cat chcon chgrp chmod chown chroot cksum comm cp
   csplit cut date dd df dir dircolors dirname du echo env expand expr
   factor false fmt fold groups head hostid hostname id install join kill
-  link ln logname ls md5sum mkdir mkfifo mknod mktemp mv nice nl nohup
+  link ln logname ls md5sum mkdir mkfifo mknod mksock mktemp mv nice nl nohup
   nproc numfmt od paste pathchk pinky pr printenv printf ptx pwd readlink
   realpath rm rmdir runcon seq sha1sum sha224sum sha256sum sha384sum sha512sum
   shred shuf sleep sort split stat stdbuf stty sum sync tac tail tee test
diff --git a/build-aux/gen-lists-of-programs.sh b/build-aux/gen-lists-of-programs.sh
index bf63ee3..ed813a1 100755
--- a/build-aux/gen-lists-of-programs.sh
+++ b/build-aux/gen-lists-of-programs.sh
@@ -80,6 +80,7 @@ normal_progs='
     mkdir
     mkfifo
     mknod
+    mksock
     mktemp
     mv
     nl
diff --git a/man/local.mk b/man/local.mk
index 7ce426b..49c9c43 100644
--- a/man/local.mk
+++ b/man/local.mk
@@ -109,6 +109,7 @@ man/md5sum.1:    src/md5sum
 man/mkdir.1:     src/mkdir
 man/mkfifo.1:    src/mkfifo
 man/mknod.1:     src/mknod
+man/mksock.1:    src/mksock
 man/mktemp.1:    src/mktemp
 man/mv.1:        src/mv
 man/nice.1:      src/nice
diff --git a/man/mksock.x b/man/mksock.x
new file mode 100644
index 0000000..1857073
--- /dev/null
+++ b/man/mksock.x
@@ -0,0 +1,4 @@
+[NAME]
+mksock \- Create unix domain sockets
+[DESCRIPTION]
+.\" Add any additional description here
diff --git a/src/local.mk b/src/local.mk
index f780ad4..7717524 100644
--- a/src/local.mk
+++ b/src/local.mk
@@ -146,6 +146,7 @@ src_md5sum_LDADD = $(LDADD)
 src_mkdir_LDADD = $(LDADD)
 src_mkfifo_LDADD = $(LDADD)
 src_mknod_LDADD = $(LDADD)
+src_mksock_LDADD = $(LDADD)
 src_mktemp_LDADD = $(LDADD)
 src_mv_LDADD = $(LDADD)
 src_nice_LDADD = $(LDADD)
@@ -237,6 +238,8 @@ src_mkfifo_LDADD += $(LIB_SELINUX)
 src_mkfifo_LDADD += $(LIB_SMACK)
 src_mknod_LDADD += $(LIB_SELINUX)
 src_mknod_LDADD += $(LIB_SMACK)
+src_mksock_LDADD += $(LIB_SELINUX)
+src_mksock_LDADD += $(LIB_SMACK)
 src_runcon_LDADD += $(LIB_SELINUX)
 src_stat_LDADD += $(LIB_SELINUX)
 
@@ -363,6 +369,7 @@ src_rmdir_SOURCES = src/rmdir.c src/prog

 src_mkfifo_SOURCES = src/mkfifo.c $(selinux_sources)
 src_mknod_SOURCES = src/mknod.c $(selinux_sources)
+src_mksock_SOURCES = src/mksock.c $(selinux_sources)

 src_df_SOURCES = src/df.c src/find-mount-point.c
 src_stat_SOURCES = src/stat.c src/find-mount-point.c
diff --git a/src/mksock.c b/src/mksock.c
new file mode 100644
index 0000000..d7b308a
--- /dev/null
+++ b/src/mksock.c
@@ -0,0 +1,196 @@
+/* mksock -- create unix domain sockets.
+   Copyright (C) 90, 91, 1995-2010 Free Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* Written by Dmitry V. Levin <ldv@altlinux.org>
+   based on mknod.c by David MacKenzie <djm@ai.mit.edu> et al.  */
+
+#include <config.h>
+#include <stdio.h>
+#include <getopt.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <selinux/selinux.h>
+
+#include "system.h"
+#include "error.h"
+#include "modechange.h"
+#include "quote.h"
+#include "smack.h"
+
+/* The official name of this program (e.g., no 'g' prefix).  */
+#define PROGRAM_NAME "mksock"
+
+#define AUTHORS proper_name ("Dmitry V. Levin")
+
+static struct option const longopts[] =
+{
+  {GETOPT_SELINUX_CONTEXT_OPTION_DECL},
+  {"mode", required_argument, NULL, 'm'},
+  {GETOPT_HELP_OPTION_DECL},
+  {GETOPT_VERSION_OPTION_DECL},
+  {NULL, 0, NULL, 0}
+};
+
+void
+usage (int status)
+{
+  if (status != EXIT_SUCCESS)
+    emit_try_help ();
+  else
+    {
+      printf (_("Usage: %s [OPTION]... NAME...\n"), program_name);
+      fputs (_("\
+Create unix domain sockets with the given NAMEs.\n\
+"), stdout);
+
+      emit_mandatory_arg_note ();
+
+      fputs (_("\
+  -m, --mode=MODE    set file permission bits to MODE, not a=rw - umask\n\
+"), stdout);
+      fputs (_("\
+  -Z, --context=CTX  set the SELinux security context of each NAME to CTX\n\
+"), stdout);
+      fputs (HELP_OPTION_DESCRIPTION, stdout);
+      fputs (VERSION_OPTION_DESCRIPTION, stdout);
+      emit_ancillary_info ();
+    }
+  exit (status);
+}
+
+static int
+mksock(const char *filename, mode_t mode, const char const *specified_mode)
+{
+  struct sockaddr_un sun;
+  int fd;
+
+  if (strlen (filename) >= sizeof (sun))
+    {
+      error (EXIT_SUCCESS, EINVAL, _("cannot bind socket `%s'"),
+             quote (filename));
+      return EXIT_FAILURE;
+    }
+
+  memset (&sun, 0, sizeof (sun));
+  sun.sun_family = AF_UNIX;
+  strcpy (sun.sun_path, filename);
+
+  fd = socket (PF_UNIX, SOCK_STREAM, 0);
+  if (fd < 0)
+    {
+      error (EXIT_SUCCESS, errno, _("cannot create socket `%s'"),
+             quote (filename));
+      return EXIT_FAILURE;
+    }
+
+  if (specified_mode && fchmod (fd, mode))
+    {
+      error (EXIT_SUCCESS, errno, _("cannot set permissions of socket `%s'"),
+             quote (filename));
+      close (fd);
+      return EXIT_FAILURE;
+    }
+
+  if (bind (fd, (struct sockaddr *) &sun, sizeof (sun)))
+    {
+      error (EXIT_SUCCESS, errno, _("cannot bind socket `%s'"),
+             quote (filename));
+      close (fd);
+      return EXIT_FAILURE;
+    }
+
+  close (fd);
+
+  return EXIT_SUCCESS;
+}
+
+int
+main (int argc, char **argv)
+{
+  mode_t newmode;
+  char const *specified_mode = NULL;
+  int exit_status = EXIT_SUCCESS;
+  int optc;
+  security_context_t scontext = NULL;
+
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+
+  atexit (close_stdout);
+
+  while ((optc = getopt_long (argc, argv, "m:Z:", longopts, NULL)) != -1)
+    {
+      switch (optc)
+        {
+        case 'm':
+          specified_mode = optarg;
+          break;
+        case 'Z':
+          scontext = optarg;
+          break;
+        case_GETOPT_HELP_CHAR;
+        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
+        default:
+          usage (EXIT_FAILURE);
+        }
+    }
+
+  if (optind == argc)
+    {
+      error (0, 0, _("missing operand"));
+      usage (EXIT_FAILURE);
+    }
+
+  if (scontext)
+    {
+      int ret = 0;
+      if (is_smack_enabled ())
+        ret = smack_set_label_for_self (scontext);
+      else
+        ret = setfscreatecon (scontext);
+
+      if (ret < 0)
+        error (EXIT_FAILURE, errno,
+               _("failed to set default file creation context to %s"),
+               quote (scontext));
+    }
+
+  newmode = MODE_RW_UGO;
+  if (specified_mode)
+    {
+      mode_t umask_value;
+      struct mode_change *change = mode_compile (specified_mode);
+      if (!change)
+        error (EXIT_FAILURE, 0, _("invalid mode"));
+      umask_value = umask (0);
+      umask (umask_value);
+      newmode = mode_adjust (newmode, false, umask_value, change, NULL);
+      free (change);
+      if (newmode & ~S_IRWXUGO)
+        error (EXIT_FAILURE, 0,
+               _("mode must specify only file permission bits"));
+    }
+
+  for (; optind < argc; ++optind)
+    if (mksock (argv[optind], newmode, specified_mode) == EXIT_FAILURE)
+      exit_status = EXIT_FAILURE;
+
+  exit (exit_status);
+}
diff --git a/tests/misc/help-version.sh b/tests/misc/help-version.sh
index 4bc02d8..bc6f326 100755
--- a/tests/misc/help-version.sh
+++ b/tests/misc/help-version.sh
@@ -133,6 +133,7 @@ chgrp_setup () { args=--version; }
 chown_setup () { args=--version; }
 mkfifo_setup () { args=--version; }
 mknod_setup () { args=--version; }
+mksock_setup () { args=--version; }
 # Punt on uptime, since it fails (e.g., failing to get boot time)
 # on some systems, and we shouldn't let that stop 'make check'.
 uptime_setup () { args=--version; }
