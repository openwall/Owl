# Introduce and export __locale_getenv.
# Sanitize the environment in a paranoid way.

diff -uprk.orig glibc-2.3.5.orig/abilist/libc.abilist glibc-2.3.5/abilist/libc.abilist
--- glibc-2.3.5.orig/abilist/libc.abilist	2003-04-02 04:39:52 +0000
+++ glibc-2.3.5/abilist/libc.abilist	2005-05-09 11:10:02 +0000
@@ -255,6 +255,7 @@ GLIBC_2.0 i.86-.*-linux.*/notls i.86-.*-
  __libc_realloc F
  __libc_start_main F
  __libc_valloc F
+ __locale_getenv F
  __lseek F
  __lxstat F
  __mbrlen F
diff -uprk.orig glibc-2.3.5.orig/argp/argp-help.c glibc-2.3.5/argp/argp-help.c
--- glibc-2.3.5.orig/argp/argp-help.c	2004-06-01 22:15:24 +0000
+++ glibc-2.3.5/argp/argp-help.c	2005-05-09 11:10:02 +0000
@@ -166,7 +166,7 @@ static const struct uparam_name uparam_n
 static void
 fill_in_uparams (const struct argp_state *state)
 {
-  const char *var = getenv ("ARGP_HELP_FMT");
+  const char *var = __secure_getenv ("ARGP_HELP_FMT");
 
 #define SKIPWS(p) do { while (isspace (*p)) p++; } while (0);
 
diff -uprk.orig glibc-2.3.5.orig/catgets/catgets.c glibc-2.3.5/catgets/catgets.c
--- glibc-2.3.5.orig/catgets/catgets.c	2002-05-15 03:46:42 +0000
+++ glibc-2.3.5/catgets/catgets.c	2005-05-09 11:10:02 +0000
@@ -44,13 +44,12 @@ catopen (const char *cat_name, int flag)
 	env_var = setlocale (LC_MESSAGES, NULL);
       else
 	/* Use the LANG environment variable.  */
-	env_var = getenv ("LANG");
+	env_var = __locale_getenv ("LANG");
 
-      if (env_var == NULL || *env_var == '\0'
-	  || (__libc_enable_secure && strchr (env_var, '/') != NULL))
+      if (env_var == NULL || *env_var == '\0')
 	env_var = "C";
 
-      nlspath = getenv ("NLSPATH");
+      nlspath = __secure_getenv ("NLSPATH");
       if (nlspath != NULL && *nlspath != '\0')
 	{
 	  /* Append the system dependent directory.  */
diff -uprk.orig glibc-2.3.5.orig/debug/pcprofile.c glibc-2.3.5/debug/pcprofile.c
--- glibc-2.3.5.orig/debug/pcprofile.c	2001-07-06 04:54:45 +0000
+++ glibc-2.3.5/debug/pcprofile.c	2004-06-11 08:41:25 +0000
@@ -38,7 +38,7 @@ install (void)
 {
   /* See whether the environment variable `PCPROFILE_OUTPUT' is defined.
      If yes, it should name a FIFO.  We open it and mark ourself as active.  */
-  const char *outfile = getenv ("PCPROFILE_OUTPUT");
+  const char *outfile = __secure_getenv ("PCPROFILE_OUTPUT");
 
   if (outfile != NULL && *outfile != '\0')
     {
diff -uprk.orig glibc-2.3.5.orig/elf/dl-support.c glibc-2.3.5/elf/dl-support.c
--- glibc-2.3.5.orig/elf/dl-support.c	2005-05-09 11:07:47 +0000
+++ glibc-2.3.5/elf/dl-support.c	2005-05-09 11:22:41 +0000
@@ -207,15 +207,18 @@ _dl_aux_init (ElfW(auxv_t) *av)
 	gid ^= av->a_un.a_val;
 	seen |= 8;
 	break;
+#if 0
       case AT_SECURE:
 	seen = -1;
 	__libc_enable_secure = av->a_un.a_val;
 	__libc_enable_secure_decided = 1;
 	break;
+#endif
       }
   if (seen == 0xf)
     {
-      __libc_enable_secure = uid != 0 || gid != 0;
+      __libc_enable_secure = uid != 0;
+      __libc_enable_secure |= (gid != 0) << 1;
       __libc_enable_secure_decided = 1;
     }
 }
@@ -232,19 +235,19 @@ _dl_non_dynamic_init (void)
   if (!_dl_pagesize)
     _dl_pagesize = __getpagesize ();
 
-  _dl_verbose = *(getenv ("LD_WARN") ?: "") == '\0' ? 0 : 1;
+  _dl_verbose = *(__secure_getenv ("LD_WARN") ?: "") == '\0' ? 0 : 1;
 
   /* Initialize the data structures for the search paths for shared
      objects.  */
-  _dl_init_paths (getenv ("LD_LIBRARY_PATH"));
+  _dl_init_paths (__secure_getenv ("LD_LIBRARY_PATH"));
 
-  _dl_lazy = *(getenv ("LD_BIND_NOW") ?: "") == '\0';
+  _dl_lazy = *(__secure_getenv ("LD_BIND_NOW") ?: "") == '\0';
 
-  _dl_bind_not = *(getenv ("LD_BIND_NOT") ?: "") != '\0';
+  _dl_bind_not = *(__secure_getenv ("LD_BIND_NOT") ?: "") != '\0';
 
-  _dl_dynamic_weak = *(getenv ("LD_DYNAMIC_WEAK") ?: "") == '\0';
+  _dl_dynamic_weak = *(__secure_getenv ("LD_DYNAMIC_WEAK") ?: "") == '\0';
 
-  _dl_profile_output = getenv ("LD_PROFILE_OUTPUT");
+  _dl_profile_output = __secure_getenv ("LD_PROFILE_OUTPUT");
   if (_dl_profile_output == NULL || _dl_profile_output[0] == '\0')
     _dl_profile_output
       = &"/var/tmp\0/var/profile"[__libc_enable_secure ? 9 : 0];
@@ -257,6 +260,8 @@ _dl_non_dynamic_init (void)
 	EXTRA_UNSECURE_ENVVARS
 #endif
 	;
+      static const char restricted_envvars[] =
+	RESTRICTED_ENVVARS;
       const char *cp = unsecure_envvars;
 
       while (cp < unsecure_envvars + sizeof (unsecure_envvars))
@@ -265,8 +270,31 @@ _dl_non_dynamic_init (void)
 	  cp = (const char *) __rawmemchr (cp, '\0') + 1;
 	}
 
-      if (__access ("/etc/suid-debug", F_OK) != 0)
-	__unsetenv ("MALLOC_CHECK_");
+      if (__libc_enable_secure & 1)
+	{
+	  static const char unsecure_uid_envvars[] =
+	    UNSECURE_UID_ENVVARS;
+
+	  cp = unsecure_uid_envvars;
+	  while (cp < unsecure_uid_envvars + sizeof (unsecure_uid_envvars))
+	    {
+	      __unsetenv (cp);
+	      cp = (const char *) __rawmemchr (cp, '\0') + 1;
+	    }
+	}
+
+      /* This loop is buggy: it will only check the first occurrence of each
+	 variable (but will correctly remove all in case of a match).  This
+	 may be a problem if the list is later re-ordered or accessed by an
+	 application with something other than the glibc getenv().  */
+      cp = restricted_envvars;
+      while (cp < restricted_envvars + sizeof (restricted_envvars))
+	{
+	  const char *value = getenv (cp);
+	  if (value && (value[0] == '.' || strchr(value, '/')))
+	    __unsetenv (cp);
+	  cp = (const char *) __rawmemchr (cp, '\0') + 1;
+	}
     }
 
 #ifdef DL_PLATFORM_INIT
diff -uprk.orig glibc-2.3.5.orig/elf/rtld.c glibc-2.3.5/elf/rtld.c
--- glibc-2.3.5.orig/elf/rtld.c	2005-05-09 11:07:47 +0000
+++ glibc-2.3.5/elf/rtld.c	2005-05-09 11:40:00 +0000
@@ -2191,6 +2191,7 @@ process_envvars (enum mode *modep)
   GLRO(dl_profile_output)
     = &"/var/tmp\0/var/profile"[INTUSE(__libc_enable_secure) ? 9 : 0];
 
+  if (__builtin_expect (!INTUSE(__libc_enable_secure), 1))
   while ((envline = _dl_next_ld_env_entry (&runp)) != NULL)
     {
       size_t len = 0;
@@ -2252,8 +2253,7 @@ process_envvars (enum mode *modep)
 	case 9:
 	  /* Test whether we want to see the content of the auxiliary
 	     array passed up from the kernel.  */
-	  if (!INTUSE(__libc_enable_secure)
-	      && memcmp (envline, "SHOW_AUXV", 9) == 0)
+	  if (memcmp (envline, "SHOW_AUXV", 9) == 0)
 	    _dl_show_auxv ();
 	  break;
 
@@ -2266,8 +2266,7 @@ process_envvars (enum mode *modep)
 
 	case 11:
 	  /* Path where the binary is found.  */
-	  if (!INTUSE(__libc_enable_secure)
-	      && memcmp (envline, "ORIGIN_PATH", 11) == 0)
+	  if (memcmp (envline, "ORIGIN_PATH", 11) == 0)
 	    GLRO(dl_origin_path) = &envline[12];
 	  break;
 
@@ -2286,8 +2285,7 @@ process_envvars (enum mode *modep)
 	      break;
 	    }
 
-	  if (!INTUSE(__libc_enable_secure)
-	      && memcmp (envline, "DYNAMIC_WEAK", 12) == 0)
+	  if (memcmp (envline, "DYNAMIC_WEAK", 12) == 0)
 	    GLRO(dl_dynamic_weak) = 1;
 	  break;
 
@@ -2297,15 +2295,13 @@ process_envvars (enum mode *modep)
 #ifdef EXTRA_LD_ENVVARS_13
 	  EXTRA_LD_ENVVARS_13
 #endif
-	  if (!INTUSE(__libc_enable_secure)
-	      && memcmp (envline, "USE_LOAD_BIAS", 13) == 0)
+	  if (memcmp (envline, "USE_LOAD_BIAS", 13) == 0)
 	    GLRO(dl_use_load_bias) = envline[14] == '1' ? -1 : 0;
 	  break;
 
 	case 14:
 	  /* Where to place the profiling data file.  */
-	  if (!INTUSE(__libc_enable_secure)
-	      && memcmp (envline, "PROFILE_OUTPUT", 14) == 0
+	  if (memcmp (envline, "PROFILE_OUTPUT", 14) == 0
 	      && envline[15] != '\0')
 	    GLRO(dl_profile_output) = &envline[15];
 	  break;
@@ -2349,16 +2345,39 @@ process_envvars (enum mode *modep)
 	EXTRA_UNSECURE_ENVVARS
 #endif
 	UNSECURE_ENVVARS;
+      static const char restricted_envvars[] =
+	RESTRICTED_ENVVARS;
       const char *nextp;
 
-      nextp = unsecure_envvars;
-      do
+      for (nextp = unsecure_envvars; *nextp != '\0';
+	   nextp = (char *) rawmemchr (nextp, '\0') + 1)
 	{
 	  unsetenv (nextp);
-	  /* We could use rawmemchr but this need not be fast.  */
-	  nextp = (char *) (strchr) (nextp, '\0') + 1;
 	}
-      while (*nextp != '\0');
+
+      if (__builtin_expect (INTUSE(__libc_enable_secure) & 1, 0))
+	{
+	  static const char unsecure_uid_envvars[] =
+	    UNSECURE_UID_ENVVARS;
+
+	  for (nextp = unsecure_uid_envvars; *nextp != '\0';
+	       nextp = (char *) rawmemchr (nextp, '\0') + 1)
+	    {
+	      unsetenv (nextp);
+	    }
+	}
+
+      /* This loop is buggy: it will only check the first occurrence of each
+	 variable (but will correctly remove all in case of a match).  This
+	 may be a problem if the list is later re-ordered or accessed by an
+	 application with something other than the glibc getenv().  */
+      for (nextp = restricted_envvars; *nextp != '\0';
+	   nextp = (char *) rawmemchr (nextp, '\0') + 1)
+	{
+	  const char *value = getenv (nextp);
+	  if (value && (value[0] == '.' || strchr(value, '/')))
+	    unsetenv (nextp);
+	}
 
       if (__access ("/etc/suid-debug", F_OK) != 0)
         {
diff -uprk.orig glibc-2.3.5.orig/gmon/gmon.c glibc-2.3.5/gmon/gmon.c
--- glibc-2.3.5.orig/gmon/gmon.c	2004-09-14 04:24:43 +0000
+++ glibc-2.3.5/gmon/gmon.c	2005-05-09 11:10:02 +0000
@@ -326,8 +326,8 @@ write_gmon (void)
 # define O_NOFOLLOW	0
 #endif
 
-    env = getenv ("GMON_OUT_PREFIX");
-    if (env != NULL && !__libc_enable_secure)
+    env = __secure_getenv ("GMON_OUT_PREFIX");
+    if (env != NULL)
       {
 	size_t len = strlen (env);
 	char buf[len + 20];
diff -uprk.orig glibc-2.3.5.orig/iconv/gconv_cache.c glibc-2.3.5/iconv/gconv_cache.c
--- glibc-2.3.5.orig/iconv/gconv_cache.c	2003-06-11 21:38:47 +0000
+++ glibc-2.3.5/iconv/gconv_cache.c	2005-05-09 11:10:02 +0000
@@ -55,7 +55,7 @@ __gconv_load_cache (void)
 
   /* We cannot use the cache if the GCONV_PATH environment variable is
      set.  */
-  __gconv_path_envvar = getenv ("GCONV_PATH");
+  __gconv_path_envvar = __locale_getenv ("GCONV_PATH");
   if (__gconv_path_envvar != NULL)
     return -1;
 
diff -uprk.orig glibc-2.3.5.orig/include/stdlib.h glibc-2.3.5/include/stdlib.h
--- glibc-2.3.5.orig/include/stdlib.h	2004-09-07 17:04:23 +0000
+++ glibc-2.3.5/include/stdlib.h	2005-05-09 11:10:02 +0000
@@ -29,6 +29,7 @@ libc_hidden_proto (qecvt_r)
 libc_hidden_proto (qfcvt_r)
 libc_hidden_proto (lrand48_r)
 libc_hidden_proto (wctomb)
+libc_hidden_proto (__locale_getenv)
 libc_hidden_proto (__secure_getenv)
 libc_hidden_proto (__strtof_internal)
 libc_hidden_proto (__strtod_internal)
diff -uprk.orig glibc-2.3.5.orig/intl/dcigettext.c glibc-2.3.5/intl/dcigettext.c
--- glibc-2.3.5.orig/intl/dcigettext.c	2004-09-26 04:44:38 +0000
+++ glibc-2.3.5/intl/dcigettext.c	2005-05-09 11:10:02 +0000
@@ -1104,7 +1104,7 @@ guess_category_value (category, category
   /* The highest priority value is the `LANGUAGE' environment
      variable.  But we don't use the value if the currently selected
      locale is the C locale.  This is a GNU extension.  */
-  language = getenv ("LANGUAGE");
+  language = __locale_getenv ("LANGUAGE");
   if (language != NULL && language[0] == '\0')
     language = NULL;
 
diff -uprk.orig glibc-2.3.5.orig/intl/loadmsgcat.c glibc-2.3.5/intl/loadmsgcat.c
--- glibc-2.3.5.orig/intl/loadmsgcat.c	2004-09-26 05:06:56 +0000
+++ glibc-2.3.5/intl/loadmsgcat.c	2005-05-09 11:10:02 +0000
@@ -816,7 +816,7 @@ _nl_init_domain_conv (domain_file, domai
 	    outcharset = domainbinding->codeset;
 	  else
 	    {
-	      outcharset = getenv ("OUTPUT_CHARSET");
+	      outcharset = __locale_getenv ("OUTPUT_CHARSET");
 	      if (outcharset == NULL || outcharset[0] == '\0')
 		{
 # ifdef _LIBC
diff -uprk.orig glibc-2.3.5.orig/io/getdirname.c glibc-2.3.5/io/getdirname.c
--- glibc-2.3.5.orig/io/getdirname.c	2001-07-06 04:54:53 +0000
+++ glibc-2.3.5/io/getdirname.c	2004-06-11 08:41:25 +0000
@@ -31,7 +31,7 @@ get_current_dir_name (void)
   char *pwd;
   struct stat64 dotstat, pwdstat;
 
-  pwd = getenv ("PWD");
+  pwd = __secure_getenv ("PWD");
   if (pwd != NULL
       && stat64 (".", &dotstat) == 0
       && stat64 (pwd, &pwdstat) == 0
diff -uprk.orig glibc-2.3.5.orig/libidn/toutf8.c glibc-2.3.5/libidn/toutf8.c
--- glibc-2.3.5.orig/libidn/toutf8.c	2004-03-08 20:52:56 +0000
+++ glibc-2.3.5/libidn/toutf8.c	2004-06-11 08:41:25 +0000
@@ -71,7 +71,7 @@
 const char *
 stringprep_locale_charset (void)
 {
-  const char *charset = getenv ("CHARSET");	/* flawfinder: ignore */
+  const char *charset = __secure_getenv ("CHARSET");	/* flawfinder: ignore */
 
   if (charset && *charset)
     return charset;
diff -uprk.orig glibc-2.3.5.orig/locale/findlocale.c glibc-2.3.5/locale/findlocale.c
--- glibc-2.3.5.orig/locale/findlocale.c	2003-06-11 21:49:52 +0000
+++ glibc-2.3.5/locale/findlocale.c	2005-05-09 11:10:02 +0000
@@ -78,16 +78,14 @@ _nl_find_locale (const char *locale_path
     {
       /* The user decides which locale to use by setting environment
 	 variables.  */
-      *name = getenv ("LC_ALL");
+      *name = __locale_getenv ("LC_ALL");
       if (*name == NULL || (*name)[0] == '\0')
-	*name = getenv (_nl_category_names[category]);
+	*name = __locale_getenv (_nl_category_names[category]);
       if (*name == NULL || (*name)[0] == '\0')
-	*name = getenv ("LANG");
+	*name = __locale_getenv ("LANG");
     }
 
-  if (*name == NULL || (*name)[0] == '\0'
-      || (__builtin_expect (__libc_enable_secure, 0)
-	  && strchr (*name, '/') != NULL))
+  if (*name == NULL || (*name)[0] == '\0')
     *name = (char *) _nl_C_name;
 
   if (__builtin_expect (strcmp (*name, _nl_C_name), 1) == 0
diff -uprk.orig glibc-2.3.5.orig/locale/newlocale.c glibc-2.3.5/locale/newlocale.c
--- glibc-2.3.5.orig/locale/newlocale.c	2004-07-16 19:05:49 +0000
+++ glibc-2.3.5/locale/newlocale.c	2005-05-09 11:10:02 +0000
@@ -104,7 +104,7 @@ __newlocale (int category_mask, const ch
   locale_path = NULL;
   locale_path_len = 0;
 
-  locpath_var = getenv ("LOCPATH");
+  locpath_var = __secure_getenv ("LOCPATH");
   if (locpath_var != NULL && locpath_var[0] != '\0')
     {
       if (__argz_create_sep (locpath_var, ':',
diff -uprk.orig glibc-2.3.5.orig/locale/setlocale.c glibc-2.3.5/locale/setlocale.c
--- glibc-2.3.5.orig/locale/setlocale.c	2004-08-04 21:55:05 +0000
+++ glibc-2.3.5/locale/setlocale.c	2005-05-09 11:10:02 +0000
@@ -237,7 +237,7 @@ setlocale (int category, const char *loc
   locale_path = NULL;
   locale_path_len = 0;
 
-  locpath_var = getenv ("LOCPATH");
+  locpath_var = __secure_getenv ("LOCPATH");
   if (locpath_var != NULL && locpath_var[0] != '\0')
     {
       if (__argz_create_sep (locpath_var, ':',
diff -uprk.orig glibc-2.3.5.orig/malloc/arena.c glibc-2.3.5/malloc/arena.c
--- glibc-2.3.5.orig/malloc/arena.c	2005-03-07 22:46:24 +0000
+++ glibc-2.3.5/malloc/arena.c	2005-05-09 11:10:02 +0000
@@ -456,10 +456,10 @@ ptmalloc_init (void)
 #  undef NO_STARTER
 # endif
 #endif
+  s = NULL;
 #ifdef _LIBC
   secure = __libc_enable_secure;
-  s = NULL;
-  if (__builtin_expect (_environ != NULL, 1))
+  if (! secure && __builtin_expect (_environ != NULL, 1))
     {
       char **runp = _environ;
       char *envline;
@@ -482,15 +482,14 @@ ptmalloc_init (void)
 		s = &envline[7];
 	      break;
 	    case 8:
-	      if (! secure && memcmp (envline, "TOP_PAD_", 8) == 0)
+	      if (memcmp (envline, "TOP_PAD_", 8) == 0)
 		mALLOPt(M_TOP_PAD, atoi(&envline[9]));
 	      break;
 	    case 9:
-	      if (! secure && memcmp (envline, "MMAP_MAX_", 9) == 0)
+	      if (memcmp (envline, "MMAP_MAX_", 9) == 0)
 		mALLOPt(M_MMAP_MAX, atoi(&envline[10]));
 	      break;
 	    case 15:
-	      if (! secure)
 		{
 		  if (memcmp (envline, "TRIM_THRESHOLD_", 15) == 0)
 		    mALLOPt(M_TRIM_THRESHOLD, atoi(&envline[16]));
diff -uprk.orig glibc-2.3.5.orig/malloc/memusage.c glibc-2.3.5/malloc/memusage.c
--- glibc-2.3.5.orig/malloc/memusage.c	2004-08-10 04:11:50 +0000
+++ glibc-2.3.5/malloc/memusage.c	2005-05-09 11:10:02 +0000
@@ -193,7 +193,7 @@ int_handler (int signo)
 static void
 me (void)
 {
-  const char *env = getenv ("MEMUSAGE_PROG_NAME");
+  const char *env = __secure_getenv ("MEMUSAGE_PROG_NAME");
   size_t prog_len = strlen (__progname);
 
   initialized = -1;
@@ -229,7 +229,7 @@ me (void)
       if (!start_sp)
 	start_sp = GETSP ();
 
-      outname = getenv ("MEMUSAGE_OUTPUT");
+      outname = __secure_getenv ("MEMUSAGE_OUTPUT");
       if (outname != NULL && outname[0] != '\0'
 	  && (access (outname, R_OK | W_OK) == 0 || errno == ENOENT))
 	{
@@ -251,7 +251,7 @@ me (void)
 	      /* Determine the buffer size.  We use the default if the
 		 environment variable is not present.  */
 	      buffer_size = DEFAULT_BUFFER_SIZE;
-	      if (getenv ("MEMUSAGE_BUFFER_SIZE") != NULL)
+	      if (__secure_getenv ("MEMUSAGE_BUFFER_SIZE") != NULL)
 		{
 		  buffer_size = atoi (getenv ("MEMUSAGE_BUFFER_SIZE"));
 		  if (buffer_size == 0 || buffer_size > DEFAULT_BUFFER_SIZE)
@@ -259,7 +259,7 @@ me (void)
 		}
 
 	      /* Possibly enable timer-based stack pointer retrieval.  */
-	      if (getenv ("MEMUSAGE_NO_TIMER") == NULL)
+	      if (__secure_getenv ("MEMUSAGE_NO_TIMER") == NULL)
 		{
 		  struct sigaction act;
 
@@ -280,7 +280,7 @@ me (void)
 	    }
 	}
 
-      if (!not_me && getenv ("MEMUSAGE_TRACE_MMAP") != NULL)
+      if (!not_me && __secure_getenv ("MEMUSAGE_TRACE_MMAP") != NULL)
 	trace_mmap = true;
     }
 }
diff -uprk.orig glibc-2.3.5.orig/nis/nis_defaults.c glibc-2.3.5/nis/nis_defaults.c
--- glibc-2.3.5.orig/nis/nis_defaults.c	2004-10-24 20:28:28 +0000
+++ glibc-2.3.5/nis/nis_defaults.c	2005-05-09 12:25:05 +0000
@@ -379,7 +379,7 @@ __nis_default_owner (char *defaults)
     }
   else
     {
-      cptr = getenv ("NIS_DEFAULTS");
+      cptr = __secure_getenv ("NIS_DEFAULTS");
       if (cptr != NULL)
 	{
 	  dptr = strstr (cptr, "owner=");
@@ -419,7 +419,7 @@ __nis_default_group (char *defaults)
     }
   else
     {
-      cptr = getenv ("NIS_DEFAULTS");
+      cptr = __secure_getenv ("NIS_DEFAULTS");
       if (cptr != NULL)
 	{
 	  dptr = strstr (cptr, "group=");
@@ -450,7 +450,7 @@ __nis_default_ttl (char *defaults)
 	return searchttl (defaults);
     }
 
-  cptr = getenv ("NIS_DEFAULTS");
+  cptr = __secure_getenv ("NIS_DEFAULTS");
   if (cptr == NULL)
     return DEFAULT_TTL;
 
@@ -478,9 +478,9 @@ __nis_default_access (char *param, unsig
     result = searchaccess (param, result);
   else
     {
-      cptr = getenv ("NIS_DEFAULTS");
+      cptr = __secure_getenv ("NIS_DEFAULTS");
       if (cptr != NULL && strstr (cptr, "access=") != NULL)
-	result = searchaccess (getenv ("NIS_DEFAULTS"), result);
+	result = searchaccess (cptr, result);
     }
 
   return result;
diff -uprk.orig glibc-2.3.5.orig/nis/nis_local_names.c glibc-2.3.5/nis/nis_local_names.c
--- glibc-2.3.5.orig/nis/nis_local_names.c	2004-10-24 20:28:28 +0000
+++ glibc-2.3.5/nis/nis_local_names.c	2005-05-09 11:26:35 +0000
@@ -30,7 +30,7 @@ nis_local_group (void)
 
   char *cptr;
   if (__nisgroup[0] == '\0'
-      && (cptr = getenv ("NIS_GROUP")) != NULL
+      && (cptr = __secure_getenv ("NIS_GROUP")) != NULL
       && strlen (cptr) < NIS_MAXNAMELEN)
     {
       char *cp = stpcpy (__nisgroup, cptr);
diff -uprk.orig glibc-2.3.5.orig/nis/nis_subr.c glibc-2.3.5/nis/nis_subr.c
--- glibc-2.3.5.orig/nis/nis_subr.c	2004-10-24 20:28:28 +0000
+++ glibc-2.3.5/nis/nis_subr.c	2005-05-09 11:10:02 +0000
@@ -152,7 +152,7 @@ nis_getnames (const_nis_name name)
     }
 
   /* Get the search path, where we have to search "name" */
-  path = getenv ("NIS_PATH");
+  path = __secure_getenv ("NIS_PATH");
   if (path == NULL)
     path = strdupa ("$");
   else
diff -uprk.orig glibc-2.3.5.orig/posix/execvp.c glibc-2.3.5/posix/execvp.c
--- glibc-2.3.5.orig/posix/execvp.c	2005-05-09 11:07:47 +0000
+++ glibc-2.3.5/posix/execvp.c	2005-05-09 11:31:08 +0000
@@ -87,19 +87,18 @@ execvp (file, argv)
     }
   else
     {
-      char *path = getenv ("PATH");
+      char *path = __secure_getenv ("PATH");
       bool path_malloc = false;
       if (path == NULL)
 	{
 	  /* There is no `PATH' in the environment.
-	     The default search path is the current directory
-	     followed by the path `confstr' returns for `_CS_PATH'.  */
+	     The default search path is what `confstr' returns
+	     for `_CS_PATH'.  */
 	  size_t len = confstr (_CS_PATH, (char *) NULL, 0);
-	  path = (char *) malloc (1 + len);
+	  path = (char *) malloc (len);
 	  if (path == NULL)
 	    return -1;
-	  path[0] = ':';
-	  (void) confstr (_CS_PATH, path + 1, len);
+	  (void) confstr (_CS_PATH, path, len);
 	  path_malloc = true;
 	}
 
diff -uprk.orig glibc-2.3.5.orig/resolv/res_hconf.c glibc-2.3.5/resolv/res_hconf.c
--- glibc-2.3.5.orig/resolv/res_hconf.c	2004-06-01 22:17:39 +0000
+++ glibc-2.3.5/resolv/res_hconf.c	2005-05-09 11:10:02 +0000
@@ -431,7 +431,7 @@ do_init (void)
 
   memset (&_res_hconf, '\0', sizeof (_res_hconf));
 
-  hconf_name = getenv (ENV_HOSTCONF);
+  hconf_name = __secure_getenv (ENV_HOSTCONF);
   if (hconf_name == NULL)
     hconf_name = _PATH_HOSTCONF;
 
@@ -453,30 +453,30 @@ do_init (void)
       fclose (fp);
     }
 
-  envval = getenv (ENV_SERVORDER);
+  envval = __secure_getenv (ENV_SERVORDER);
   if (envval)
     {
       _res_hconf.num_services = 0;
       arg_service_list (ENV_SERVORDER, 1, envval, 0);
     }
 
-  envval = getenv (ENV_SPOOF);
+  envval = __secure_getenv (ENV_SPOOF);
   if (envval)
     arg_spoof (ENV_SPOOF, 1, envval, 0);
 
-  envval = getenv (ENV_MULTI);
+  envval = __secure_getenv (ENV_MULTI);
   if (envval)
     arg_bool (ENV_MULTI, 1, envval, HCONF_FLAG_MULTI);
 
-  envval = getenv (ENV_REORDER);
+  envval = __secure_getenv (ENV_REORDER);
   if (envval)
     arg_bool (ENV_REORDER, 1, envval, HCONF_FLAG_REORDER);
 
-  envval = getenv (ENV_TRIM_ADD);
+  envval = __secure_getenv (ENV_TRIM_ADD);
   if (envval)
     arg_trimdomain_list (ENV_TRIM_ADD, 1, envval, 0);
 
-  envval = getenv (ENV_TRIM_OVERR);
+  envval = __secure_getenv (ENV_TRIM_OVERR);
   if (envval)
     {
       _res_hconf.num_trimdomains = 0;
diff -uprk.orig glibc-2.3.5.orig/resolv/res_init.c glibc-2.3.5/resolv/res_init.c
--- glibc-2.3.5.orig/resolv/res_init.c	2005-05-09 11:07:47 +0000
+++ glibc-2.3.5/resolv/res_init.c	2005-05-09 11:10:02 +0000
@@ -201,7 +201,7 @@ __res_vinit(res_state statp, int preinit
 #endif
 
 	/* Allow user to override the local domain definition */
-	if ((cp = getenv("LOCALDOMAIN")) != NULL) {
+	if ((cp = __secure_getenv("LOCALDOMAIN")) != NULL) {
 		(void)strncpy(statp->defdname, cp, sizeof(statp->defdname) - 1);
 		statp->defdname[sizeof(statp->defdname) - 1] = '\0';
 		haveenv++;
@@ -441,7 +441,7 @@ __res_vinit(res_state statp, int preinit
 #endif /* !RFC1535 */
 	}
 
-	if ((cp = getenv("RES_OPTIONS")) != NULL)
+	if ((cp = __secure_getenv("RES_OPTIONS")) != NULL)
 		res_setoptions(statp, cp, "env");
 	statp->options |= RES_INIT;
 	return (0);
diff -uprk.orig glibc-2.3.5.orig/resolv/res_query.c glibc-2.3.5/resolv/res_query.c
--- glibc-2.3.5.orig/resolv/res_query.c	2004-10-18 05:09:59 +0000
+++ glibc-2.3.5/resolv/res_query.c	2005-05-09 11:10:02 +0000
@@ -453,7 +453,7 @@ res_hostalias(const res_state statp, con
 
 	if (statp->options & RES_NOALIASES)
 		return (NULL);
-	file = getenv("HOSTALIASES");
+	file = __secure_getenv("HOSTALIASES");
 	if (file == NULL || (fp = fopen(file, "r")) == NULL)
 		return (NULL);
 	setbuf(fp, NULL);
diff -uprk.orig glibc-2.3.5.orig/stdlib/Versions glibc-2.3.5/stdlib/Versions
--- glibc-2.3.5.orig/stdlib/Versions	2004-05-03 21:25:53 +0000
+++ glibc-2.3.5/stdlib/Versions	2005-05-09 11:10:02 +0000
@@ -90,6 +90,8 @@ libc {
     # used by new G++ ABI
     __cxa_atexit; __cxa_finalize;
   }
+  GLIBC_2.2.4 {
+    __locale_getenv;
   GLIBC_2.3 {
     # Silent change in SUS.
     realpath;
diff -uprk.orig glibc-2.3.5.orig/stdlib/fmtmsg.c glibc-2.3.5/stdlib/fmtmsg.c
--- glibc-2.3.5.orig/stdlib/fmtmsg.c	2005-02-16 10:37:10 +0000
+++ glibc-2.3.5/stdlib/fmtmsg.c	2005-05-09 11:10:02 +0000
@@ -226,8 +226,8 @@ fmtmsg (long int classification, const c
 static void
 init (void)
 {
-  const char *msgverb_var = getenv ("MSGVERB");
-  const char *sevlevel_var = getenv ("SEV_LEVEL");
+  const char *msgverb_var = __secure_getenv ("MSGVERB");
+  const char *sevlevel_var = __secure_getenv ("SEV_LEVEL");
 
   if (msgverb_var != NULL && msgverb_var[0] != '\0')
     {
diff -uprk.orig glibc-2.3.5.orig/stdlib/secure-getenv.c glibc-2.3.5/stdlib/secure-getenv.c
--- glibc-2.3.5.orig/stdlib/secure-getenv.c	2002-08-03 06:29:26 +0000
+++ glibc-2.3.5/stdlib/secure-getenv.c	2005-05-09 11:10:02 +0000
@@ -18,6 +18,7 @@
 
 #include <stdlib.h>
 #include <unistd.h>
+#include <string.h>
 
 /* Some programs and especially the libc itself have to be careful
    what values to accept from the environment.  This special version
@@ -29,3 +30,15 @@ __secure_getenv (name)
   return __libc_enable_secure ? NULL : getenv (name);
 }
 libc_hidden_def (__secure_getenv)
+
+char *
+__locale_getenv (name)
+     const char *name;
+{
+  char *value = getenv (name);
+  if ( value &&
+      __libc_enable_secure && (('.' == value[0]) || strchr(value, '/')) )
+    return NULL;
+  return value;
+}
+libc_hidden_def (__locale_getenv)
diff -uprk.orig glibc-2.3.5.orig/stdlib/stdlib.h glibc-2.3.5/stdlib/stdlib.h
--- glibc-2.3.5.orig/stdlib/stdlib.h	2004-12-01 19:54:34 +0000
+++ glibc-2.3.5/stdlib/stdlib.h	2005-05-09 11:10:02 +0000
@@ -658,6 +658,11 @@ __END_NAMESPACE_STD
    programs is running with SUID or SGID enabled.  */
 extern char *__secure_getenv (__const char *__name) __THROW __nonnull ((1));
 
+/* This function is similar to the above but returns NULL if the
+   programs is running with SUID or SGID enabled and value starts
+   with "." symbol or contains "/" symbols.  */
+extern char *__locale_getenv (__const char *__name) __THROW;
+
 #if defined __USE_SVID || defined __USE_XOPEN
 /* The SVID says this is in <stdio.h>, but this seems a better place.	*/
 /* Put STRING, which is of the form "NAME=VALUE", in the environment.
diff -uprk.orig glibc-2.3.5.orig/sunrpc/rpc_svcout.c glibc-2.3.5/sunrpc/rpc_svcout.c
--- glibc-2.3.5.orig/sunrpc/rpc_svcout.c	2004-10-17 14:59:39 +0000
+++ glibc-2.3.5/sunrpc/rpc_svcout.c	2005-05-09 11:10:02 +0000
@@ -901,7 +901,7 @@ write_pm_most (const char *infile, int n
   f_print (fout, "\t\t_rpcpmstart = 1;\n");
   if (logflag)
     open_log_file (infile, "\t\t");
-  f_print (fout, "\t\tif ((netid = getenv(\"NLSPROVIDER\")) == NULL) {\n");
+  f_print (fout, "\t\tif ((netid = __secure_getenv(\"NLSPROVIDER\")) == NULL) {\n");
   sprintf (_errbuf, "cannot get transport name");
   print_err_message ("\t\t\t");
   f_print (fout, "\t\t} else if ((nconf = getnetconfigent(netid)) == NULL) {\n");
diff -uprk.orig glibc-2.3.5.orig/sysdeps/generic/dl-sysdep.c glibc-2.3.5/sysdeps/generic/dl-sysdep.c
--- glibc-2.3.5.orig/sysdeps/generic/dl-sysdep.c	2004-11-06 00:24:47 +0000
+++ glibc-2.3.5/sysdeps/generic/dl-sysdep.c	2005-05-09 11:10:02 +0000
@@ -192,7 +192,7 @@ _dl_sysdep_start (void **start_argptr,
 
       /* If one of the two pairs of IDs does not match this is a setuid
 	 or setgid run.  */
-      INTUSE(__libc_enable_secure) = uid | gid;
+      INTUSE(__libc_enable_secure) = (uid != 0) | ((gid != 0) << 1);
     }
 #endif
 
diff -uprk.orig glibc-2.3.5.orig/sysdeps/generic/enbl-secure.c glibc-2.3.5/sysdeps/generic/enbl-secure.c
--- glibc-2.3.5.orig/sysdeps/generic/enbl-secure.c	2003-05-06 06:33:13 +0000
+++ glibc-2.3.5/sysdeps/generic/enbl-secure.c	2005-05-09 11:10:02 +0000
@@ -32,6 +32,8 @@ void
 __libc_init_secure (void)
 {
   if (__libc_enable_secure_decided == 0)
-    __libc_enable_secure = (__geteuid () != __getuid ()
-			    || __getegid () != __getgid ());
+    {
+      __libc_enable_secure = __geteuid () != __getuid ();
+      __libc_enable_secure |= (__getegid () != __getgid ()) << 1;
+    }
 }
diff -uprk.orig glibc-2.3.5.orig/sysdeps/generic/glob.c glibc-2.3.5/sysdeps/generic/glob.c
--- glibc-2.3.5.orig/sysdeps/generic/glob.c	2004-10-27 18:21:02 +0000
+++ glibc-2.3.5/sysdeps/generic/glob.c	2005-05-09 11:10:02 +0000
@@ -171,7 +171,7 @@ extern int errno;
 # define	ANSI_STRING
 #else	/* No standard headers.  */
 
-extern char *getenv ();
+extern char *__secure_getenv ();
 
 # ifdef HAVE_STRING_H
 #  include <string.h>
@@ -693,7 +693,7 @@ glob (pattern, flags, errfunc, pglob)
       if (dirname[1] == '\0' || dirname[1] == '/')
 	{
 	  /* Look up home directory.  */
-	  const char *home_dir = getenv ("HOME");
+	  const char *home_dir = __secure_getenv ("HOME");
 # ifdef _AMIGA
 	  if (home_dir == NULL || home_dir[0] == '\0')
 	    home_dir = "SYS:";
diff -uprk.orig glibc-2.3.5.orig/sysdeps/generic/segfault.c glibc-2.3.5/sysdeps/generic/segfault.c
--- glibc-2.3.5.orig/sysdeps/generic/segfault.c	2004-10-14 02:22:13 +0000
+++ glibc-2.3.5/sysdeps/generic/segfault.c	2005-05-09 11:10:02 +0000
@@ -149,7 +149,7 @@ __attribute__ ((constructor))
 install_handler (void)
 {
   struct sigaction sa;
-  const char *sigs = getenv ("SEGFAULT_SIGNALS");
+  const char *sigs = __secure_getenv ("SEGFAULT_SIGNALS");
   const char *name;
 
   sa.sa_handler = (void *) catch_segfault;
@@ -157,7 +157,7 @@ install_handler (void)
   sa.sa_flags = SA_RESTART;
 
   /* Maybe we are expected to use an alternative stack.  */
-  if (getenv ("SEGFAULT_USE_ALTSTACK") != 0)
+  if (__secure_getenv ("SEGFAULT_USE_ALTSTACK") != 0)
     {
       void *stack_mem = malloc (2 * SIGSTKSZ);
       struct sigaltstack ss;
@@ -203,7 +203,7 @@ install_handler (void)
     }
 
   /* Preserve the output file name if there is any given.  */
-  name = getenv ("SEGFAULT_OUTPUT_NAME");
+  name = __secure_getenv ("SEGFAULT_OUTPUT_NAME");
   if (name != NULL && name[0] != '\0')
     {
       int ret = access (name, R_OK | W_OK);
diff -uprk.orig glibc-2.3.5.orig/sysdeps/generic/unsecvars.h glibc-2.3.5/sysdeps/generic/unsecvars.h
--- glibc-2.3.5.orig/sysdeps/generic/unsecvars.h	2004-12-07 06:54:31 +0000
+++ glibc-2.3.5/sysdeps/generic/unsecvars.h	2005-05-09 12:28:02 +0000
@@ -2,23 +2,83 @@
    all stuffed in a single string which means they have to be terminated
    with a '\0' explicitly.  */
 #define UNSECURE_ENVVARS \
-  "LD_PRELOAD\0"							      \
-  "LD_LIBRARY_PATH\0"							      \
-  "LD_ORIGIN_PATH\0"							      \
-  "LD_DEBUG\0"								      \
-  "LD_DEBUG_OUTPUT\0"							      \
-  "LD_PROFILE\0"							      \
-  "LD_USE_LOAD_BIAS\0"							      \
-  "LD_DYNAMIC_WEAK\0"							      \
-  "LD_SHOW_AUXV\0"							      \
-  "GCONV_PATH\0"							      \
-  "GETCONF_DIR\0"							      \
-  "HOSTALIASES\0"							      \
-  "LOCALDOMAIN\0"							      \
-  "LOCPATH\0"								      \
-  "MALLOC_TRACE\0"							      \
-  "NLSPATH\0"								      \
-  "RESOLV_HOST_CONF\0"							      \
-  "RES_OPTIONS\0"							      \
-  "TMPDIR\0"								      \
+  "ARGP_HELP_FMT\0"							\
+  "DATEMSK\0"								\
+  "GCONV_PATH\0"							\
+  "GETCONF_DIR\0"							\
+  "GMON_OUT_PREFIX\0"							\
+  "HES_DOMAIN\0"							\
+  "HESIOD_CONFIG\0"							\
+  "HOSTALIASES\0"							\
+  "LD_BIND_NOT\0"							\
+  "LD_BIND_NOW\0"							\
+  "LD_DEBUG\0"								\
+  "LD_DEBUG_OUTPUT\0"							\
+  "LD_DYNAMIC_WEAK\0"							\
+  "LD_HWCAP_MASK\0"							\
+  "LD_LIBRARY_PATH\0"							\
+  "LD_ORIGIN_PATH\0"							\
+  "LD_PRELOAD\0"							\
+  "LD_PROFILE\0"							\
+  "LD_PROFILE_OUTPUT\0"							\
+  "LD_SHOW_AUXV\0"							\
+  "LD_TRACE_LOADED_OBJECTS\0"						\
+  "LD_USE_LOAD_BIAS\0"							\
+  "LD_WARN\0"								\
+  "LOCALDOMAIN\0"							\
+  "LOCPATH\0"								\
+  "MALLOC_CHECK_\0"							\
+  "MALLOC_MMAP_MAX_\0"							\
+  "MALLOC_MMAP_THRESHOLD_\0"						\
+  "MALLOC_TOP_PAD_\0"							\
+  "MALLOC_TRACE\0"							\
+  "MALLOC_TRIM_THRESHOLD_\0"						\
+  "MEMUSAGE_BUFFER_SIZE\0"						\
+  "MEMUSAGE_NO_TIMER\0"							\
+  "MEMUSAGE_OUTPUT\0"							\
+  "MEMUSAGE_PROG_NAME\0"						\
+  "MEMUSAGE_TRACE_MMAP\0"						\
+  "MSGVERB\0"								\
+  "NIS_DEFAULTS\0"							\
+  "NIS_GROUP\0"								\
+  "NIS_PATH\0"								\
+  "NLSPATH\0"								\
+  "PCPROFILE_OUTPUT\0"							\
+  "POSIXLY_CORRECT\0"							\
+  "PWD\0"								\
+  "RESOLV_ADD_TRIM_DOMAINS\0"						\
+  "RESOLV_HOST_CONF\0"							\
+  "RESOLV_MULTI\0"							\
+  "RESOLV_OVERRIDE_TRIM_DOMAINS\0"					\
+  "RESOLV_REORDER\0"							\
+  "RESOLV_SERV_ORDER\0"							\
+  "RESOLV_SPOOF_CHECK\0"						\
+  "RES_OPTIONS\0"							\
+  "SEGFAULT_OUTPUT_NAME\0"						\
+  "SEGFAULT_SIGNALS\0"							\
+  "SEGFAULT_USE_ALTSTACK\0"						\
+  "SEV_LEVEL\0"								\
+  "TZ\0"								\
   "TZDIR\0"
+
+#define UNSECURE_UID_ENVVARS \
+  "TMPDIR\0"
+
+#define RESTRICTED_ENVVARS \
+  "LANG\0"								\
+  "LANGUAGE\0"								\
+  "LINGUAS\0"								\
+  "LC_CTYPE\0"								\
+  "LC_NUMERIC\0"							\
+  "LC_TIME\0"								\
+  "LC_COLLATE\0"							\
+  "LC_MONETARY\0"							\
+  "LC_MESSAGES\0"							\
+  "LC_PAPER\0"								\
+  "LC_NAME\0"								\
+  "LC_ADDRESS\0"							\
+  "LC_TELEPHONE\0"							\
+  "LC_MEASUREMENT\0"							\
+  "LC_IDENTIFICATION\0"							\
+  "LC_ALL\0"								\
+  "LC_XXX\0"
diff -uprk.orig glibc-2.3.5.orig/sysdeps/generic/wordexp.c glibc-2.3.5/sysdeps/generic/wordexp.c
--- glibc-2.3.5.orig/sysdeps/generic/wordexp.c	2005-02-16 10:56:31 +0000
+++ glibc-2.3.5/sysdeps/generic/wordexp.c	2005-05-09 11:10:02 +0000
@@ -315,7 +315,7 @@ parse_tilde (char **word, size_t *word_l
 	 results are unspecified.  We do a lookup on the uid if
 	 HOME is unset. */
 
-      home = getenv ("HOME");
+      home = __secure_getenv ("HOME");
       if (home != NULL)
 	{
 	  *word = w_addstr (*word, word_length, max_length, home);
@@ -1491,7 +1491,7 @@ envsubst:
 	}
     }
   else
-    value = getenv (env);
+    value = __secure_getenv (env);
 
   if (value == NULL && (flags & WRDE_UNDEF))
     {
@@ -2268,7 +2268,7 @@ wordexp (const char *words, wordexp_t *p
   /* Find out what the field separators are.
    * There are two types: whitespace and non-whitespace.
    */
-  ifs = getenv ("IFS");
+  ifs = __secure_getenv ("IFS");
 
   if (!ifs)
     /* IFS unset - use <space><tab><newline>. */
diff -uprk.orig glibc-2.3.5.orig/sysdeps/posix/spawni.c glibc-2.3.5/sysdeps/posix/spawni.c
--- glibc-2.3.5.orig/sysdeps/posix/spawni.c	2004-09-12 18:05:00 +0000
+++ glibc-2.3.5/sysdeps/posix/spawni.c	2005-05-09 11:10:02 +0000
@@ -216,16 +216,15 @@ __spawni (pid_t *pid, const char *file,
     }
 
   /* We have to search for FILE on the path.  */
-  path = getenv ("PATH");
+  path = __secure_getenv ("PATH");
   if (path == NULL)
     {
       /* There is no `PATH' in the environment.
-	 The default search path is the current directory
-	 followed by the path `confstr' returns for `_CS_PATH'.  */
+	 The default search path is ehat `confstr' returns
+	 for `_CS_PATH'.  */
       len = confstr (_CS_PATH, (char *) NULL, 0);
-      path = (char *) __alloca (1 + len);
-      path[0] = ':';
-      (void) confstr (_CS_PATH, path + 1, len);
+      path = (char *) __alloca (len);
+      (void) confstr (_CS_PATH, path, len);
     }
 
   len = strlen (file) + 1;
diff -uprk.orig glibc-2.3.5.orig/sysdeps/unix/sysv/linux/dl-librecon.h glibc-2.3.5/sysdeps/unix/sysv/linux/dl-librecon.h
--- glibc-2.3.5.orig/sysdeps/unix/sysv/linux/dl-librecon.h	2004-03-05 10:14:48 +0000
+++ glibc-2.3.5/sysdeps/unix/sysv/linux/dl-librecon.h	2005-05-09 11:10:02 +0000
@@ -53,7 +53,7 @@ _dl_osversion_init (char *assume_kernel)
 
 #define DL_OSVERSION_INIT \
   do {									      \
-    char *assume_kernel = getenv ("LD_ASSUME_KERNEL");			      \
+    char *assume_kernel = __secure_getenv ("LD_ASSUME_KERNEL");		      \
     if (assume_kernel)							      \
       _dl_osversion_init (assume_kernel);				      \
   } while (0)
--- glibc-2.3.5/sysdeps/unix/sysv/linux/i386/dl-librecon.h.orig	2004-10-14 05:53:55 +0400
+++ glibc-2.3.5/sysdeps/unix/sysv/linux/i386/dl-librecon.h	2005-05-09 11:10:02 +0000
@@ -57,6 +57,7 @@
 /* Extra unsecure variables.  The names are all stuffed in a single
    string which means they have to be terminated with a '\0' explicitly.  */
 #define EXTRA_UNSECURE_ENVVARS \
+  "LD_LIBRARY_VERSION\0"						      \
   "LD_AOUT_LIBRARY_PATH\0"						      \
   "LD_AOUT_PRELOAD\0"
 
diff -uprk.orig glibc-2.3.5.orig/time/getdate.c glibc-2.3.5/time/getdate.c
--- glibc-2.3.5.orig/time/getdate.c	2003-09-04 08:25:11 +0000
+++ glibc-2.3.5/time/getdate.c	2005-05-09 11:10:02 +0000
@@ -115,7 +115,7 @@ __getdate_r (const char *string, struct 
   struct stat64 st;
   int mday_ok = 0;
 
-  datemsk = getenv ("DATEMSK");
+  datemsk = __secure_getenv ("DATEMSK");
   if (datemsk == NULL || *datemsk == '\0')
     return 1;
 
diff -uprk.orig glibc-2.3.5.orig/time/tzfile.c glibc-2.3.5/time/tzfile.c
--- glibc-2.3.5.orig/time/tzfile.c	2004-11-20 20:23:03 +0000
+++ glibc-2.3.5/time/tzfile.c	2005-05-09 11:10:02 +0000
@@ -133,7 +133,7 @@ __tzfile_read (const char *file, size_t 
       unsigned int len, tzdir_len;
       char *new, *tmp;
 
-      tzdir = getenv ("TZDIR");
+      tzdir = __secure_getenv ("TZDIR");
       if (tzdir == NULL || *tzdir == '\0')
 	{
 	  tzdir = default_tzdir;
diff -uprk.orig glibc-2.3.5.orig/time/tzset.c glibc-2.3.5/time/tzset.c
--- glibc-2.3.5.orig/time/tzset.c	2004-12-06 22:50:41 +0000
+++ glibc-2.3.5/time/tzset.c	2005-05-09 11:27:52 +0000
@@ -158,8 +158,11 @@ tzset_internal (always, explicit)
     return;
   is_initialized = 1;
 
-  /* Examine the TZ environment variable.  */
-  tz = getenv ("TZ");
+  /* Examine the TZ environment variable.  This doesn't really have to be
+     a __locale_getenv() call as __tzfile_read() tries to only read files
+     found under a trusted directory, but this helps reduce the amount of
+     security-critical code.  */
+  tz = __locale_getenv ("TZ");
   if (tz == NULL && !explicit)
     /* Use the site-wide default.  This is a file name which means we
        would not see changes to the file if we compare only the file
