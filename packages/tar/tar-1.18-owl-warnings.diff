--- tar/lib/rtapelib.c
+++ tar/lib/rtapelib.c
@@ -488,12 +488,14 @@ rmt_open__ (const char *file_name, int open_mode, int bias,
 	/* Child.  */
 
 	close (STDIN_FILENO);
-	dup (to_remote[remote_pipe_number][PREAD]);
+	if (dup (to_remote[remote_pipe_number][PREAD]) != STDIN_FILENO)
+	  error (EXIT_ON_EXEC_ERROR, errno, _("Cannot dup"));
 	close (to_remote[remote_pipe_number][PREAD]);
 	close (to_remote[remote_pipe_number][PWRITE]);
 
 	close (STDOUT_FILENO);
-	dup (from_remote[remote_pipe_number][PWRITE]);
+	if (dup (from_remote[remote_pipe_number][PWRITE]) != STDOUT_FILENO)
+	  error (EXIT_ON_EXEC_ERROR, errno, _("Cannot dup"));
 	close (from_remote[remote_pipe_number][PREAD]);
 	close (from_remote[remote_pipe_number][PWRITE]);
 
--- tar/src/create.c
+++ tar/src/create.c
@@ -78,7 +78,6 @@ check_exclusion_tags (char *dirname, const char **tag_file_name)
   struct exclusion_tag *tag;
   size_t dlen = strlen (dirname);
   char *nptr = NULL;
-  char *ret = NULL;
   
   for (tag = exclusion_tags; tag; tag = tag->next)
     {
--- tar/tests/genfile.c
+++ tar/tests/genfile.c
@@ -481,7 +481,8 @@ mkhole (int fd, off_t displ)
 {
   if (lseek (fd, displ, SEEK_CUR) == -1)
     error (EXIT_FAILURE, errno, "lseek");
-  ftruncate (fd, lseek (fd, 0, SEEK_CUR));
+  if (ftruncate (fd, lseek (fd, 0, SEEK_CUR)))
+    error (EXIT_FAILURE, errno, "ftruncate");
 }
 
 static void
@@ -679,13 +680,15 @@ exec_checkpoint (struct action *p)
 	    error (0, errno, _("cannot open `%s'"), p->name);
 	    break;
 	  }
-	ftruncate (fd, p->size);
+	if (ftruncate (fd, p->size))
+	  error (0, errno, _("cannot truncate `%s'"), p->name);
 	close (fd);
       }
       break;
 
     case OPT_EXEC:
-      system (p->name);
+      if (system (p->name) == -1)
+	error (0, errno, _("cannot execute `%s'"), p->name);
       break;
 
     default:
@@ -744,7 +747,8 @@ exec_command (void)
   signal (SIGCHLD, SIG_DFL);
 #endif
 
-  pipe (fd);
+  if (pipe (fd))
+    error (EXIT_FAILURE, errno, "pipe");
 
   pid = fork ();
   if (pid == -1)
