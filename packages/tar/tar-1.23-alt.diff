Changes by ALT Linux team extracted from the Git repository at
http://git.altlinux.org/gears/t/tar.git using "git diff v1.23..1.23-alt2 tar".

--- tar/lib/rtapelib.c
+++ tar/lib/rtapelib.c
@@ -491,12 +491,14 @@ rmt_open__ (const char *file_name, int open_mode, int bias,
 	/* Child.  */
 
 	close (STDIN_FILENO);
-	dup (to_remote[remote_pipe_number][PREAD]);
+	if (dup (to_remote[remote_pipe_number][PREAD]) != STDIN_FILENO)
+	  error (EXIT_ON_EXEC_ERROR, errno, _("Cannot dup"));
 	close (to_remote[remote_pipe_number][PREAD]);
 	close (to_remote[remote_pipe_number][PWRITE]);
 
 	close (STDOUT_FILENO);
-	dup (from_remote[remote_pipe_number][PWRITE]);
+	if (dup (from_remote[remote_pipe_number][PWRITE]) != STDOUT_FILENO)
+	  error (EXIT_ON_EXEC_ERROR, errno, _("Cannot dup"));
 	close (from_remote[remote_pipe_number][PREAD]);
 	close (from_remote[remote_pipe_number][PWRITE]);
 
--- tar/src/create.c
+++ tar/src/create.c
@@ -575,7 +575,12 @@ write_gnu_long_link (struct tar_stat_info *st, const char *p, char type)
   GNAME_TO_CHARS (tmpname, header->header.gname);
   free (tmpname);
 
-  strcpy (header->header.magic, OLDGNU_MAGIC);
+  /* OLDGNU_MAGIC is string of 7 chars and trailing \0 */
+  strncpy (header->header.magic,
+           OLDGNU_MAGIC, sizeof(header->header.magic));
+  strncpy (header->header.version,
+           OLDGNU_MAGIC + sizeof(header->header.magic),
+           sizeof(header->header.version));
   header->header.typeflag = type;
   finish_header (st, header, -1);
 
@@ -910,9 +915,13 @@ start_header (struct tar_stat_info *st)
       break;
 
     case OLDGNU_FORMAT:
-    case GNU_FORMAT:   /*FIXME?*/
-      /* Overwrite header->header.magic and header.version in one blow.  */
-      strcpy (header->header.magic, OLDGNU_MAGIC);
+    case GNU_FORMAT:
+      /* OLDGNU_MAGIC is string of 7 chars and trailing \0 */
+      strncpy (header->header.magic, OLDGNU_MAGIC,
+               sizeof(header->header.magic));
+      strncpy (header->header.version,
+               OLDGNU_MAGIC + sizeof(header->header.magic),
+               sizeof(header->header.version));
       break;
 
     case POSIX_FORMAT:
@@ -1554,6 +1563,19 @@ dump_file0 (struct tar_stat_info *st, const char *p,
       return;
     }
 
+  if (S_ISSOCK (st->stat.st_mode))
+    {
+      WARNOPT (WARN_FILE_IGNORED,
+	       (0, 0, _("%s: socket ignored"), quotearg_colon (p)));
+      return;
+    }
+  else if (S_ISDOOR (st->stat.st_mode))
+    {
+      WARNOPT (WARN_FILE_IGNORED,
+	       (0, 0, _("%s: door ignored"), quotearg_colon (p)));
+      return;
+    }
+
   is_dir = S_ISDIR (st->stat.st_mode) != 0;
 
   if (!is_dir && dump_hard_link (st))
@@ -1666,7 +1688,8 @@ dump_file0 (struct tar_stat_info *st, const char *p,
 	      set_exit_status (TAREXIT_DIFFERS);
 	    }
 	  else if (atime_preserve_option == replace_atime_preserve
-		   && set_file_atime (fd, p, restore_times) != 0)
+		   && set_file_atime (fd, p, restore_times) != 0
+		   && errno != EROFS )
 	    utime_error (p);
 	}
 
@@ -1725,18 +1748,6 @@ dump_file0 (struct tar_stat_info *st, const char *p,
     type = BLKTYPE;
   else if (S_ISFIFO (st->stat.st_mode))
     type = FIFOTYPE;
-  else if (S_ISSOCK (st->stat.st_mode))
-    {
-      WARNOPT (WARN_FILE_IGNORED,
-	       (0, 0, _("%s: socket ignored"), quotearg_colon (p)));
-      return;
-    }
-  else if (S_ISDOOR (st->stat.st_mode))
-    {
-      WARNOPT (WARN_FILE_IGNORED,
-	       (0, 0, _("%s: door ignored"), quotearg_colon (p)));
-      return;
-    }
   else
     {
       unknown_file_error (p);
--- tar/src/extract.c
+++ tar/src/extract.c
@@ -131,6 +131,33 @@ extr_init (void)
     }
 }
 
+static int
+fstat_or_stat (int fd, const char *name, struct stat *st)
+{
+  if (fd != -1)
+    return fstat (fd, st);
+  else
+    return stat (name, st);
+}
+
+static int
+fchown_or_chown (int fd, const char *name, uid_t uid, uid_t gid)
+{
+  if (fd != -1)
+    return fchown (fd, uid, gid);
+  else
+    return chown (name, uid, gid);
+}
+
+static int
+fchmod_or_chmod (int fd, const char *name, mode_t mode)
+{
+  if (fd != -1)
+    return fchmod (fd, mode);
+  else
+    return chmod(name, mode);
+}
+
 /* If restoring permissions, restore the mode for FILE_NAME from
    information given in *STAT_INFO (where *CUR_INFO gives
    the current status if CUR_INFO is nonzero); otherwise invert the
@@ -138,7 +165,7 @@ extr_init (void)
    PERMSTATUS specifies the status of the file's permissions.
    TYPEFLAG specifies the type of the file.  */
 static void
-set_mode (char const *file_name,
+set_mode (int fd, char const *file_name,
 	  struct stat const *stat_info,
 	  struct stat const *cur_info,
 	  mode_t invert_permissions, enum permstatus permstatus,
@@ -178,7 +205,7 @@ set_mode (char const *file_name,
       struct stat st;
       if (! cur_info)
 	{
-	  if (stat (file_name, &st) != 0)
+	  if (fstat_or_stat (fd, file_name, &st) != 0)
 	    {
 	      stat_error (file_name);
 	      return;
@@ -188,7 +215,7 @@ set_mode (char const *file_name,
       mode = cur_info->st_mode ^ invert_permissions;
     }
 
-  failed = chmod (file_name, mode) != 0;
+  failed = fchmod_or_chmod (fd, file_name, mode) != 0;
   if (failed && errno == EPERM)
     {
       /* On Solaris, chmod may fail if we don't have PRIV_ALL.  */
@@ -247,7 +274,7 @@ check_time (char const *file_name, struct timespec t)
    punt for the rest.  Sigh!  */
 
 static void
-set_stat (char const *file_name,
+set_stat (int fd, char const *file_name,
 	  struct tar_stat_info const *st,
 	  struct stat const *cur_info,
 	  mode_t invert_permissions, enum permstatus permstatus,
@@ -273,7 +300,7 @@ set_stat (char const *file_name,
 	    ts[0] = start_time;
 	  ts[1] = st->mtime;
 
-	  if (utimens (file_name, ts) != 0)
+	  if (gl_futimens (fd, file_name, ts) != 0)
 	    utime_error (file_name);
 	  else
 	    {
@@ -306,7 +333,8 @@ set_stat (char const *file_name,
 	}
       else
 	{
-	  chown_result = chown (file_name, st->stat.st_uid, st->stat.st_gid);
+	  chown_result = fchown_or_chown (fd, file_name, st->stat.st_uid,
+					  st->stat.st_gid);
 	}
 
       if (chown_result == 0)
@@ -324,7 +352,7 @@ set_stat (char const *file_name,
     }
 
   if (typeflag != SYMTYPE)
-    set_mode (file_name, &st->stat, cur_info,
+    set_mode (fd, file_name, &st->stat, cur_info,
 	      invert_permissions, permstatus, typeflag);
 }
 
@@ -624,7 +652,7 @@ apply_nonancestor_delayed_set_stat (char const *file_name, bool after_links)
 	  sb.stat.st_gid = data->gid;
 	  sb.atime = data->atime;
 	  sb.mtime = data->mtime;
-	  set_stat (data->file_name, &sb, cur_info,
+	  set_stat (-1, data->file_name, &sb, cur_info,
 		    data->invert_permissions, data->permstatus, DIRTYPE);
 	}
 
@@ -675,7 +703,7 @@ extract_dir (char *file_name, int typeflag)
 	      || old_files_option == OVERWRITE_OLD_FILES))
 	{
 	  struct stat st;
-	  if (stat (file_name, &st) == 0)
+	  if (lstat (file_name, &st) == 0)
 	    {
 	      if (interdir_made)
 		{
@@ -854,6 +882,12 @@ extract_file (char *file_name, int typeflag)
 
   mv_end ();
 
+  if (!to_stdout_option && !to_command_option)
+    set_stat (fd, file_name, &current_stat_info, NULL, invert_permissions,
+	      (old_files_option == OVERWRITE_OLD_FILES ?
+	       UNKNOWN_PERMSTATUS : ARCHIVED_PERMSTATUS),
+	      typeflag);
+
   /* If writing to stdout, don't try to do anything to the filename;
      it doesn't exist, or we don't want to touch it anyway.  */
 
@@ -866,11 +900,6 @@ extract_file (char *file_name, int typeflag)
 
   if (to_command_option)
     sys_wait_command ();
-  else
-    set_stat (file_name, &current_stat_info, NULL, invert_permissions,
-	      (old_files_option == OVERWRITE_OLD_FILES ?
-	       UNKNOWN_PERMSTATUS : ARCHIVED_PERMSTATUS),
-	      typeflag);
 
   return status;
 }
@@ -1023,7 +1052,7 @@ extract_symlink (char *file_name, int typeflag)
       break;
 
   if (status == 0)
-    set_stat (file_name, &current_stat_info, NULL, 0, 0, SYMTYPE);
+    set_stat (-1, file_name, &current_stat_info, NULL, 0, 0, SYMTYPE);
   else
     symlink_error (current_stat_info.link_name, file_name);
   return status;
@@ -1060,7 +1089,7 @@ extract_node (char *file_name, int typeflag)
   if (status != 0)
     mknod_error (file_name);
   else
-    set_stat (file_name, &current_stat_info, NULL, invert_permissions,
+    set_stat (-1, file_name, &current_stat_info, NULL, invert_permissions,
 	      ARCHIVED_PERMSTATUS, typeflag);
   return status;
 }
@@ -1081,7 +1110,7 @@ extract_fifo (char *file_name, int typeflag)
       break;
 
   if (status == 0)
-    set_stat (file_name, &current_stat_info, NULL, invert_permissions,
+    set_stat (-1, file_name, &current_stat_info, NULL, invert_permissions,
 	      ARCHIVED_PERMSTATUS, typeflag);
   else
     mkfifo_error (file_name);
@@ -1335,7 +1364,7 @@ apply_delayed_links (void)
 		  struct tar_stat_info st1;
 		  st1.stat.st_uid = ds->uid;
 		  st1.stat.st_gid = ds->gid;
-		  set_stat (source, &st1, NULL, 0, 0, SYMTYPE);
+		  set_stat (-1, source, &st1, NULL, 0, 0, SYMTYPE);
 		  valid_source = source;
 		}
 	    }
--- tar/src/system.c
+++ tar/src/system.c
@@ -230,7 +230,25 @@ int
 sys_truncate (int fd)
 {
   off_t pos = lseek (fd, (off_t) 0, SEEK_CUR);
-  return pos < 0 ? -1 : ftruncate (fd, pos);
+
+  if (pos < 0)
+    return -1;
+
+  if (ftruncate (fd, pos) && errno == EPERM) {
+    /*
+     * ftruncate may fail to grow the size of a file with some OS and
+     * filesystem combinations.  Linux and vfat/fat is one example.
+     * If this is the case do a write to grow the file to the desired length.
+     */
+    struct stat st;
+
+    if (fstat (fd, &st) ||
+        st.st_size >= pos ||
+        lseek (fd, pos - 1, SEEK_SET) == (off_t)-1 ||
+        write (fd, "\0", 1) != 1)
+      return -1;
+  }
+  return 0;
 }
 
 /* Return nonzero if NAME is the name of a regular file, or if the file
--- tar/src/tar.c
+++ tar/src/tar.c
@@ -1463,7 +1463,11 @@ parse_opt (int key, char *arg, struct argp_state *state)
       
       ignore_zeros_option = true;
       break;
-      
+
+    case 'y':
+      WARN ((0, 0, _("Warning: option '%c' is deprecated!"
+		     " Next time use -j instead."), key));
+      /* Fall through to using bzip2. */
     case 'j':
       set_use_compress_program_option (BZIP2_PROGRAM);
       break;
--- tar/src/xheader.c
+++ tar/src/xheader.c
@@ -261,7 +261,7 @@ xheader_format_name (struct tar_stat_info *st, const char *fmt, size_t n)
   char *dir = NULL;
   char *base = NULL;
   char pidbuf[UINTMAX_STRSIZE_BOUND];
-  char const *pptr;
+  char const *pptr = NULL;
   char nbuf[UINTMAX_STRSIZE_BOUND];
   char const *nptr = NULL;
 
@@ -1330,7 +1330,7 @@ sparse_map_decoder (struct tar_stat_info *st,
     {
       uintmax_t u;
       char *delim;
-      struct sp_array e;
+      struct sp_array e = {0, 0};
 
       if (!ISDIGIT (*arg))
 	{
--- tar/tests/genfile.c
+++ tar/tests/genfile.c
@@ -488,7 +488,8 @@ mkhole (int fd, off_t displ)
 {
   if (lseek (fd, displ, SEEK_CUR) == -1)
     error (EXIT_FAILURE, errno, "lseek");
-  ftruncate (fd, lseek (fd, 0, SEEK_CUR));
+  if (ftruncate (fd, lseek (fd, 0, SEEK_CUR)))
+    error (EXIT_FAILURE, errno, "ftruncate");
 }
 
 static void
@@ -686,13 +687,15 @@ exec_checkpoint (struct action *p)
 	    error (0, errno, _("cannot open `%s'"), p->name);
 	    break;
 	  }
-	ftruncate (fd, p->size);
+	if (ftruncate (fd, p->size))
+	  error (0, errno, _("cannot truncate `%s'"), p->name);
 	close (fd);
       }
       break;
 
     case OPT_EXEC:
-      system (p->name);
+      if (system (p->name) == -1)
+	error (0, errno, _("cannot execute `%s'"), p->name);
       break;
 
     case OPT_UNLINK:
@@ -762,7 +765,8 @@ exec_command (void)
   signal (SIGCHLD, SIG_DFL);
 #endif
 
-  pipe (fd);
+  if (pipe (fd))
+    error (EXIT_FAILURE, errno, "pipe");
 
   pid = fork ();
   if (pid == -1)
