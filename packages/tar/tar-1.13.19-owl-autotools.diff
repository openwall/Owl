--- tar-1.13.19.orig/acinclude.m4	Sun Feb 29 03:37:31 2004
+++ tar-1.13.19/acinclude.m4	Sun Feb 29 05:35:18 2004
@@ -2,25 +2,6 @@
 
 dnl From Paul Eggert.
 
-AC_DEFUN(AC_C_BACKSLASH_A,
-[
-  AC_CACHE_CHECK([whether backslash-a works in strings], ac_cv_c_backslash_a,
-   [AC_TRY_COMPILE([],
-     [
-#if '\a' == 'a'
-      syntax error;
-#endif
-      char buf['\a' == 'a' ? -1 : 1];
-      buf[0] = '\a';
-      return buf[0] != "\a"[0];
-     ],
-     ac_cv_c_backslash_a=yes,
-     ac_cv_c_backslash_a=no)])
-  if test $ac_cv_c_backslash_a = yes; then
-    AC_DEFINE(HAVE_C_BACKSLASH_A, 1,
-      [Define if backslash-a works in C strings.])
-  fi
-])
 # The following is taken from automake 1.4,
 # except that it prefers the compiler option -Ae to "-Aa -D_HPUX_SOURCE"
 # because only the former supports 64-bit integral types on HP-UX 10.20.
@@ -437,7 +418,7 @@ AC_DEFUN(AM_WITH_NLS,
       # Clean out junk possibly left behind by a previous configuration.
       rm -f intl/libintl.h
     fi
-    AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)
+    AC_CONFIG_LINKS($nls_cv_header_libgt:$nls_cv_header_intl)
     AC_OUTPUT_COMMANDS(
      [case "$CONFIG_FILES" in *po/Makefile.in*)
         sed -e "/POTFILES =/r po/POTFILES" po/Makefile.in > po/Makefile
@@ -655,89 +636,6 @@ dnl http://www.sas.com/standards/large.f
 
 dnl Written by Paul Eggert <eggert@twinsun.com>.
 
-dnl Internal subroutine of AC_SYS_LARGEFILE.
-dnl AC_SYS_LARGEFILE_TEST_INCLUDES
-AC_DEFUN(AC_SYS_LARGEFILE_TEST_INCLUDES,
-  [[#include <sys/types.h>
-    /* Check that off_t can represent 2**63 - 1 correctly.
-       We can't simply "#define LARGE_OFF_T 9223372036854775807",
-       since some C++ compilers masquerading as C compilers
-       incorrectly reject 9223372036854775807.  */
-#   define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
-    int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
-			&& LARGE_OFF_T % 2147483647 == 1)
-		       ? 1 : -1];
-  ]])
-
-dnl Internal subroutine of AC_SYS_LARGEFILE.
-dnl AC_SYS_LARGEFILE_MACRO_VALUE(C-MACRO, VALUE, CACHE-VAR, COMMENT, INCLUDES, FUNCTION-BODY)
-AC_DEFUN(AC_SYS_LARGEFILE_MACRO_VALUE,
-  [AC_CACHE_CHECK([for $1 value needed for large files], $3,
-     [$3=no
-      AC_TRY_COMPILE([$5],
-	[$6], 
-	,
-	[AC_TRY_COMPILE([#define $1 $2]
-[$5]
-	   ,
-	   [$6],
-	   [$3=$2])])])
-   if test "[$]$3" != no; then
-     AC_DEFINE_UNQUOTED([$1], [$]$3, [$4])
-   fi])
-
-AC_DEFUN(AC_SYS_LARGEFILE,
-  [AC_REQUIRE([AC_PROG_CC])
-   AC_ARG_ENABLE(largefile,
-     [  --disable-largefile     omit support for large files])
-   if test "$enable_largefile" != no; then
-
-     AC_CACHE_CHECK([for special C compiler options needed for large files],
-       ac_cv_sys_largefile_CC,
-       [ac_cv_sys_largefile_CC=no
-        if test "$GCC" != yes; then
-	  # IRIX 6.2 and later do not support large files by default,
-	  # so use the C compiler's -n32 option if that helps.
-	  AC_TRY_COMPILE(AC_SYS_LARGEFILE_TEST_INCLUDES, , ,
-	    [ac_save_CC="$CC"
-	     CC="$CC -n32"
-	     AC_TRY_COMPILE(AC_SYS_LARGEFILE_TEST_INCLUDES, ,
-	       ac_cv_sys_largefile_CC=' -n32')
-	     CC="$ac_save_CC"])
-        fi])
-     if test "$ac_cv_sys_largefile_CC" != no; then
-       CC="$CC$ac_cv_sys_largefile_CC"
-     fi
-
-     AC_SYS_LARGEFILE_MACRO_VALUE(_FILE_OFFSET_BITS, 64,
-       ac_cv_sys_file_offset_bits,
-       [Number of bits in a file offset, on hosts where this is settable.],
-       AC_SYS_LARGEFILE_TEST_INCLUDES)
-     AC_SYS_LARGEFILE_MACRO_VALUE(_LARGE_FILES, 1,
-       ac_cv_sys_large_files,
-       [Define for large files, on AIX-style hosts.],
-       AC_SYS_LARGEFILE_TEST_INCLUDES)
-   fi
-  ])
-
-AC_DEFUN(AC_FUNC_FSEEKO,
-  [AC_SYS_LARGEFILE_MACRO_VALUE(_LARGEFILE_SOURCE, 1,
-     ac_cv_sys_largefile_source,
-     [Define to make fseeko visible on some hosts (e.g. glibc 2.2).],
-     [#include <stdio.h>], [return !fseeko;])
-   # We used to try defining _XOPEN_SOURCE=500 too, to work around a bug
-   # in glibc 2.1.3, but that breaks too many other things.
-   # If you want fseeko and ftello with glibc, upgrade to a fixed glibc.
-
-   AC_CACHE_CHECK([for fseeko], ac_cv_func_fseeko,
-     [ac_cv_func_fseeko=no
-      AC_TRY_LINK([#include <stdio.h>],
-        [return fseeko && fseeko (stdin, 0, 0);],
-	[ac_cv_func_fseeko=yes])])
-   if test $ac_cv_func_fseeko != no; then
-     AC_DEFINE(HAVE_FSEEKO, 1,
-       [Define if fseeko (and presumably ftello) exists and is declared.])
-   fi])
 # Check whether LC_MESSAGES is available in <locale.h>.
 # Ulrich Drepper <drepper@cygnus.com>, 1995.
 #
--- tar-1.13.19.orig/configure.in	Sun Feb 29 03:37:31 2004
+++ tar-1.13.19/configure.in	Sun Feb 29 05:39:57 2004
@@ -20,6 +20,7 @@ AC_INIT(src/tar.c)
 AM_CONFIG_HEADER(config.h)
 AC_PREREQ(2.13)
 AM_INIT_AUTOMAKE(tar, 1.13.19)
+m4_pattern_allow(LIBOBJS)
 AC_DEFINE(_GNU_SOURCE, /**/,
   [Define unconditionally for setting a GNU environment.])
 ALL_LINGUAS="cs da de es et fr it ja ko nl no pl pt pt_BR ru sl sv"
@@ -228,7 +229,7 @@ else
   LIBOBJS="$LIBOBJS fnmatch.o"
   tar_fnmatch_h=lib/fnmatch.h
 fi
-AC_LINK_FILES(lib/fnmatch.hin, $tar_fnmatch_h)
+AC_CONFIG_LINKS($tar_fnmatch_h:lib/fnmatch.hin)
 
 AC_FUNC_VPRINTF
 AC_REPLACE_FUNCS(ftruncate lchown memset rename rmdir \
