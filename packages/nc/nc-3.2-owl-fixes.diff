diff -urN --show-c-function nc-3.2-owl-linux/usr.bin/nc/netcat.c nc-3.2-owl-fixes/usr.bin/nc/netcat.c
--- nc-3.2-owl-linux/usr.bin/nc/netcat.c	Sun Dec 29 23:50:35 2002
+++ nc-3.2-owl-fixes/usr.bin/nc/netcat.c	Mon Dec 30 00:07:25 2002
@@ -277,11 +277,11 @@ main(int argc, char *argv[])
 				rv = recvfrom(s, buf, sizeof(buf), MSG_PEEK,
 				    (struct sockaddr *)&z, &len);
 				if (rv < 0)
-					errx(1, "%s", strerror(errno));
+					err(1, "recvfrom");
 
 				rv = connect(s, (struct sockaddr *)&z, len);
 				if (rv < 0)
-					errx(1, "%s", strerror(errno));
+					err(1, "connect");
 
 				connfd = s;
 			} else {
@@ -319,39 +319,46 @@ main(int argc, char *argv[])
 			if (s)
 				close(s);
 
+			/* Don't lookup port if -n */
+			if (nflag)
+				sv = NULL;
+			else {
+				sv = getservbyport(
+				    ntohs(atoi(portlist[i])),
+				    uflag ? "udp" : "tcp");
+			}
+
 			if (xflag)
 				s = socks_connect(host, portlist[i], hints,
 				    proxyhost, proxyport, proxyhints, socksv);
 			else
 				s = remote_connect(host, portlist[i], hints);
 
-			if (s < 0)
-				continue;
-
 			ret = 0;
-			if (vflag || zflag) {
-				/* For UDP, make sure we are connected */
-				if (uflag) {
-					if (udptest(s) == -1) {
-						ret = 1;
-						continue;
-					}
+			if (s >= 0) {
+				if (uflag && zflag)
+					ret = (udptest(s) == -1) ? 1 : 0;
+			} else
+				ret = 1;
+
+			if (vflag) {
+				if (ret) {
+					printf("Connection to %s %s port "
+						"[%s/%s] failed : %s\n",
+						host, portlist[i],
+						uflag ? "udp" : "tcp",
+						sv ? sv->s_name : "*",
+						strerror(errno));
+				} else {
+					printf("Connection to %s %s port "
+						"[%s/%s] succeeded!\n",
+						host, portlist[i],
+						uflag ? "udp" : "tcp",
+						sv ? sv->s_name : "*");
 				}
-
-				/* Don't lookup port if -n */
-				if (nflag)
-					sv = NULL;
-				else {
-					sv = getservbyport(
-					    ntohs(atoi(portlist[i])),
-					    uflag ? "udp" : "tcp");
-				}
-
-				printf("Connection to %s %s port [%s/%s] succeeded!\n",
-				    host, portlist[i], uflag ? "udp" : "tcp",
-				    sv ? sv->s_name : "*");
 			}
-			if (!zflag)
+
+			if (!zflag && !ret)
 				readwrite(s);
 		}
 	}
@@ -373,7 +380,7 @@ unix_connect(char *path)
 	int s;
 
 	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0)
-		return (-1);
+		err(1, "socket");
 	(void)fcntl(s, F_SETFD, 1);
 
 	memset(&sun, 0, sizeof(struct sockaddr_un));
@@ -385,8 +392,7 @@ unix_connect(char *path)
 	}
 
 	if (connect(s, (struct sockaddr *)&sun, SUN_LEN(&sun)) < 0) {
-		close(s);
-		return (-1);
+		err(1, "connect");
 	}
 	return (s);
 
@@ -404,7 +410,7 @@ unix_listen(char *path)
 
 	/* create unix domain socket */
 	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0)
-		return (-1);
+		err(1, "socket");
 
 	memset(&sun, 0, sizeof(struct sockaddr_un));
 	sun.sun_family = AF_UNIX;
@@ -415,13 +421,11 @@ unix_listen(char *path)
 	}
 
 	if (bind(s, (struct sockaddr *)&sun, SUN_LEN(&sun)) < 0) {
-		close(s);
-		return (-1);
+		err(1, "bind");
 	}
 
 	if (listen(s, 5) < 0) {
-		close(s);
-		return (-1);
+		err(1, "listen");
 	}
 	return (s);
 }
@@ -435,10 +439,10 @@ int
 remote_connect(char *host, char *port, struct addrinfo hints)
 {
 	struct addrinfo *res, *res0;
-	int s, error;
+	int s, error, saved_errno = 0;
 
 	if ((error = getaddrinfo(host, port, &hints, &res)))
-		errx(1, "%s", gai_strerror(error));
+		errx(1, "getaddrinfo: %s", gai_strerror(error));
 
 	res0 = res;
 	do {
@@ -463,12 +467,14 @@ remote_connect(char *host, char *port, s
 			ahints.ai_protocol = uflag ? IPPROTO_UDP : IPPROTO_TCP;
 			ahints.ai_flags = AI_PASSIVE;
 			if ((error = getaddrinfo(sflag, pflag, &ahints, &ares)))
-				errx(1, "%s", gai_strerror(error));
+				errx(1, "getaddrinfo: %s", gai_strerror(error));
 
 			if (bind(s, (struct sockaddr *)ares->ai_addr,
 			    ares->ai_addrlen) < 0) {
-				errx(1, "bind failed: %s", strerror(errno));
+				warn("bind");
 				freeaddrinfo(ares);
+				close(s);
+				s = -1;
 				continue;
 			}
 			freeaddrinfo(ares);
@@ -477,12 +483,17 @@ remote_connect(char *host, char *port, s
 		if (connect(s, res0->ai_addr, res0->ai_addrlen) == 0)
 			break;
 
+		saved_errno = errno;
+
 		close(s);
 		s = -1;
 	} while ((res0 = res0->ai_next) != NULL);
 
 	freeaddrinfo(res);
 
+	if (s == -1)
+		errno = saved_errno;
+
 	return (s);
 }
 
@@ -509,7 +520,7 @@ local_listen(char *host, char *port, str
 		hints.ai_family = AF_INET;
 
 	if ((error = getaddrinfo(host, port, &hints, &res)))
-                errx(1, "%s", gai_strerror(error));
+		errx(1, "getaddrinfo: %s", gai_strerror(error));
 
 	res0 = res;
 	do {
@@ -519,23 +530,24 @@ local_listen(char *host, char *port, str
 
 		ret = setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &x, sizeof(x));
 		if (ret == -1)
-			exit(1);
+			err(1, "setsockopt");
 
 		if (bind(s, (struct sockaddr *)res0->ai_addr,
 		    res0->ai_addrlen) == 0)
 			break;
+		warn("bind");
 
 		close(s);
 		s = -1;
 	} while ((res0 = res0->ai_next) != NULL);
 
+	freeaddrinfo(res);
+
 	if (!uflag && s != -1) {
 		if (listen(s, 1) < 0)
-			errx(1, "%s", strerror(errno));
+			err(1, "listen");
 	}
 
-	freeaddrinfo(res);
-
 	return (s);
 }
 
@@ -694,23 +706,20 @@ build_ports(char *p)
 	}
 }
 
-/*
- * udptest()
- * Do a few writes to see if the UDP port is there.
- * XXX - Better way of doing this? Doesn't work for IPv6
- * Also fails after around 100 ports checked.
- */
 int
 udptest(int s)
 {
-	int i, rv, ret;
+	int rv, ret;
+
+	write(s, "X", 1);
+
+	sleep(3);
+
+	if ((rv = write(s, "X", 1)) == 1)
+		ret = 1;
+	else
+		ret = -1;
 
-	for (i = 0; i <= 3; i++) {
-		if ((rv = write(s, "X", 1)) == 1)
-			ret = 1;
-		else
-			ret = -1;
-	}
 	return (ret);
 }
 
