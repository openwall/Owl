diff -puNr procps-2.0.7.orig/proc/compare.c procps-2.0.7/proc/compare.c
--- procps-2.0.7.orig/proc/compare.c	Fri Mar 12 10:34:44 1999
+++ procps-2.0.7/proc/compare.c	Fri Jan  7 01:46:53 2005
@@ -85,13 +85,13 @@ int node_mult_lvl_cmp(void* a, void* b) 
 */
 #define CMP_STR(NAME) \
 int cmp_ ## NAME(proc_t** P, proc_t** Q) { \
-    return strcmp((*P)-> ## NAME, (*Q)-> ## NAME); \
+    return strcmp((*P)->NAME, (*Q)->NAME); \
 }
 
 #define CMP_INT(NAME) \
 int cmp_ ## NAME (proc_t** P, proc_t** Q) { \
-    if ((*P)-> ## NAME < (*Q)-> ## NAME) return -1; \
-    if ((*P)-> ## NAME > (*Q)-> ## NAME) return  1; \
+    if ((*P)->NAME < (*Q)->NAME) return -1; \
+    if ((*P)->NAME > (*Q)->NAME) return  1; \
     return 0; \
 }
 
diff -puNr procps-2.0.7.orig/top.c procps-2.0.7/top.c
--- procps-2.0.7.orig/top.c	Fri Jan  7 01:48:59 2005
+++ procps-2.0.7/top.c	Fri Jan  7 01:50:07 2005
@@ -467,6 +467,7 @@ int main(int argc, char **argv)
 	    cp++;
 	}
     breakargv:
+	;
     }
     
     if (nr_cpu > 1 && CPU_states)
diff -puNr procps-2.0.7.orig/ps/sortformat.c procps-2.0.7/ps/sortformat.c
--- procps-2.0.7.orig/ps/sortformat.c	Mon Jul 10 21:25:30 2000
+++ procps-2.0.7/ps/sortformat.c	Fri Jan  7 01:51:41 2005
@@ -229,6 +229,7 @@ trace("aix_format_parse called\n");
     if(c)         goto initial;
     return "Improper AIX field descriptor.";
   looks_ok:
+    ;
   }
 
   /*** sanity check passed ***/
diff -puNr procps-2.0.7.orig/ps/output.c procps-2.0.7/ps/output.c
--- procps-2.0.7.orig/ps/output.c	Tue Jul 11 18:37:46 2000
+++ procps-2.0.7/ps/output.c	Fri Jan  7 01:53:10 2005
@@ -97,13 +97,13 @@ static int sr_nop(const proc_t* a, const
 
 #define CMP_STR(NAME) \
 static int sr_ ## NAME(const proc_t* P, const proc_t* Q) { \
-    return strcmp(P-> ## NAME, Q-> ## NAME); \
+    return strcmp(P->NAME, Q->NAME); \
 }
 
 #define CMP_INT(NAME) \
 static int sr_ ## NAME (const proc_t* P, const proc_t* Q) { \
-    if (P-> ## NAME < Q-> ## NAME) return -1; \
-    if (P-> ## NAME > Q-> ## NAME) return  1; \
+    if (P->NAME < Q->NAME) return -1; \
+    if (P->NAME > Q->NAME) return  1; \
     return 0; \
 }
 
diff -puNr procps-2.0.7.orig/ps/parser.c procps-2.0.7/ps/parser.c
--- procps-2.0.7.orig/ps/parser.c	Fri Nov  5 00:16:13 1999
+++ procps-2.0.7/ps/parser.c	Fri Jan  7 01:54:03 2005
@@ -706,6 +706,7 @@ static const char *grab_gnu_arg(void){
     if(*++flagptr) return flagptr;   /* found it */
     return NULL;                     /* empty '=' or ':' */
   case '\0': /* try next argv[] */
+    ;
   }
   if(thisarg+2 > ps_argc) return NULL;   /* there is nothing left */
   /* argument follows ps_argv[thisarg] */
diff -puNr procps-2.0.7.orig/ps/display.c procps-2.0.7/ps/display.c
--- procps-2.0.7.orig/ps/display.c	Mon Jul 10 20:59:14 2000
+++ procps-2.0.7/ps/display.c	Fri Jan  7 01:56:03 2005
@@ -321,6 +321,7 @@ static void show_forest(const int n){
     }
     show_tree(i,n,0,0);
 not_root:
+    ;
   }
   /* don't free the array because it takes time and ps will exit anyway */
 }
@@ -378,6 +379,7 @@ int main(int argc, char *argv[]){
     case SIGSEGV: /* I want core dumps to debug if I don't get a backtrace */
 #endif
     case SIGWINCH: /* we aren't going to change output line length later... */
+      ;
     }
   } while (0);
 #endif
