diff -urp procps-2.0.7.orig/proc/sysinfo.c procps-2.0.7/proc/sysinfo.c
--- procps-2.0.7.orig/proc/sysinfo.c	Mon Jul 10 19:36:13 2000
+++ procps-2.0.7/proc/sysinfo.c	Thu Oct 16 01:48:04 2003
@@ -149,13 +149,13 @@ static int init_Hertz_value(void){
 }
 
 /***********************************************************************/
-#define JT unsigned long
+#define JT unsigned long long
 int four_cpu_numbers(JT *uret, JT *nret, JT *sret, JT *iret) {
     static JT u, n, s, i;
     JT user_j, nice_j, sys_j, idle_j;
 
     FILE_TO_BUF(STAT_FILE,stat_fd);
-    sscanf(buf, "cpu %lu %lu %lu %lu", &user_j, &nice_j, &sys_j, &idle_j);
+    sscanf(buf, "cpu %Lu %Lu %Lu %Lu", &user_j, &nice_j, &sys_j, &idle_j);
     SET_IF_DESIRED(uret, user_j-u);
     SET_IF_DESIRED(nret, nice_j-n);
     SET_IF_DESIRED(sret,  sys_j-s);
diff -urp procps-2.0.7.orig/proc/sysinfo.h procps-2.0.7/proc/sysinfo.h
--- procps-2.0.7.orig/proc/sysinfo.h	Tue Nov  2 15:44:58 1999
+++ procps-2.0.7/proc/sysinfo.h	Thu Oct 16 01:48:50 2003
@@ -3,7 +3,7 @@
 
 extern unsigned long Hertz;   /* clock tick frequency */
 
-#define JT unsigned long
+#define JT unsigned long long
 extern int four_cpu_numbers(JT *uret, JT *nret, JT *sret, JT *iret);
 #undef JT
 
diff -urp procps-2.0.7.orig/top.c procps-2.0.7/top.c
--- procps-2.0.7.orig/top.c	Thu Jul 13 20:19:21 2000
+++ procps-2.0.7/top.c	Sat Jan 17 17:12:11 2004
@@ -1272,6 +1272,9 @@ unsigned show_meminfo(void)
     return mem[meminfo_main][meminfo_total] >> 10;
 }
 
+/* Same as in procps 3.x.x */
+typedef unsigned long long TIC_t;
+
 /*
  * Calculates the number of tasks in each state (running, sleeping, etc.).
  * Calculates the CPU time in each state (system, user, nice, etc).
@@ -1282,7 +1285,7 @@ void do_stats(proc_t** p, float elapsed_
     proc_t *this;
     int index, total_time, cpumap, i, n = 0;
     int sleeping = 0, stopped = 0, zombie = 0, running = 0;
-    unsigned long system_ticks = 0, user_ticks = 0, nice_ticks = 0, idle_ticks;
+    TIC_t system_ticks = 0, user_ticks = 0, nice_ticks = 0, idle_ticks;
     static int prev_count = 0;
     int stime, utime;
 
@@ -1290,9 +1293,9 @@ void do_stats(proc_t** p, float elapsed_
     static int save_history_size = sizeof(struct save_hist) * 204;
     static struct save_hist *save_history;
     struct save_hist *New_save_hist;
-    static int *s_ticks_o = NULL, *u_ticks_o = NULL,
-               *n_ticks_o = NULL, *i_ticks_o = NULL;
-    int s_ticks, u_ticks, n_ticks, i_ticks, t_ticks;
+    static TIC_t *s_ticks_o = NULL, *u_ticks_o = NULL,
+		 *n_ticks_o = NULL, *i_ticks_o = NULL;
+    TIC_t s_ticks, u_ticks, n_ticks, i_ticks, t_ticks;
     char str[128];
     FILE *file;
 
@@ -1301,10 +1304,10 @@ void do_stats(proc_t** p, float elapsed_
     New_save_hist = xcalloc(NULL, save_history_size);
 
     if(s_ticks_o == NULL) {
-      s_ticks_o = (int *)malloc(nr_cpu * sizeof(int));
-      u_ticks_o = (int *)malloc(nr_cpu * sizeof(int));
-      n_ticks_o = (int *)malloc(nr_cpu * sizeof(int));
-      i_ticks_o = (int *)malloc(nr_cpu * sizeof(int));
+      s_ticks_o = (TIC_t *)malloc(nr_cpu * sizeof(TIC_t));
+      u_ticks_o = (TIC_t *)malloc(nr_cpu * sizeof(TIC_t));
+      n_ticks_o = (TIC_t *)malloc(nr_cpu * sizeof(TIC_t));
+      i_ticks_o = (TIC_t *)malloc(nr_cpu * sizeof(TIC_t));
     }
     idle_ticks = 1000 * nr_cpu;
 
@@ -1371,7 +1374,10 @@ void do_stats(proc_t** p, float elapsed_
 	/*
 	 * Calculate time in idle, system, user and niced tasks.
 	 */
-	idle_ticks -= this->pcpu;
+	if (idle_ticks >= this->pcpu)
+		idle_ticks -= this->pcpu;
+	else
+		idle_ticks = 0;
 	system_ticks += stime;
 	user_ticks += utime;
 	if (this->nice > 0)
@@ -1389,8 +1395,6 @@ void do_stats(proc_t** p, float elapsed_
 	n++;
     }
 
-    if (idle_ticks < 0)
-	idle_ticks = 0;
     system_ticks = (system_ticks * 10 * 100/Hertz) / elapsed_time;
     user_ticks = (user_ticks * 10 * 100/Hertz) / elapsed_time;
 
@@ -1410,6 +1414,7 @@ void do_stats(proc_t** p, float elapsed_
 	  do{
 	    unsigned long sum;
 	    sum = user_ticks+nice_ticks+system_ticks+idle_ticks;
+	    if (sum == 0) sum = 1;
 	    user_ticks   = (user_ticks   * 1000) / sum;
 	    system_ticks = (system_ticks * 1000) / sum;
 	    nice_ticks   = (nice_ticks   * 1000) / sum;
@@ -1423,8 +1428,8 @@ void do_stats(proc_t** p, float elapsed_
 	    idle_ticks *= nr_cpu;
 	  }
 	  printf("CPU states:"
-		 " %2ld.%ld%% user, %2ld.%ld%% system,"
-		 " %2ld.%ld%% nice, %2ld.%ld%% idle",
+		 " %2Lu.%Lu%% user, %2Lu.%Lu%% system,"
+		 " %2Lu.%Lu%% nice, %2Lu.%Lu%% idle",
 		 user_ticks / 10UL, user_ticks % 10UL,
 		 system_ticks / 10UL, system_ticks % 10UL,
 		 nice_ticks / 10UL, nice_ticks % 10UL,
@@ -1447,19 +1452,24 @@ void do_stats(proc_t** p, float elapsed_
 	    }
 	    else {
 	      for(i = 0; i < nr_cpu; i++) {
-		if(fscanf(file, "cpu%*d %d %d %d %d\n",
+		if(fscanf(file, "cpu%*u %Lu %Lu %Lu %Lu\n",
 			  &u_ticks, &n_ticks, &s_ticks, &i_ticks) != 4) {
 		  fprintf(stderr, "fscanf failed on /proc/stat for cpu %d\n", i);
 		  break;
 		}
 		else  {
+		  if (u_ticks < u_ticks_o[i]) u_ticks = u_ticks_o[i];
+		  if (s_ticks < s_ticks_o[i]) s_ticks = s_ticks_o[i];
+		  if (i_ticks < i_ticks_o[i]) i_ticks = i_ticks_o[i];
+		  if (n_ticks < n_ticks_o[i]) n_ticks = n_ticks_o[i];
 		  t_ticks = (u_ticks + s_ticks + i_ticks + n_ticks)
 		  	    - (u_ticks_o[i] + s_ticks_o[i]
 			       + i_ticks_o[i] + n_ticks_o[i]);
+		  if (t_ticks == 0) t_ticks = 1;
 		  if (Irixmode) cpumap=i;
 		  else cpumap=cpu_mapping[i];
-		  printf ("CPU%d states: %2d.%-d%% user, %2d.%-d%% system,"
-			  " %2d.%-d%% nice, %2d.%-d%% idle",
+		  printf ("CPU%d states: %2Lu.%-Lu%% user, %2Lu.%-Lu%% system,"
+			  " %2Lu.%-Lu%% nice, %2Lu.%-Lu%% idle",
 			  cpumap,
 			  (u_ticks - u_ticks_o[i] + n_ticks - n_ticks_o[i]) * 100 / t_ticks,
 			  (u_ticks - u_ticks_o[i]) * 100 % t_ticks / 100,
@@ -1495,7 +1505,7 @@ void do_stats(proc_t** p, float elapsed_
          fprintf(stderr, "fgets failed on /proc/stat\n");
        }
        for(i = 0; i < nr_cpu; i++) {
-         if(fscanf(file, "cpu%*d %d %d %d %d\n",
+         if(fscanf(file, "cpu%*u %Lu %Lu %Lu %Lu\n",
                    &u_ticks_o[i], &n_ticks_o[i], &s_ticks_o[i],
                    &i_ticks_o[i]) != 4) {
            fprintf(stderr, "fscanf failed on /proc/stat for cpu %d\n", i);
