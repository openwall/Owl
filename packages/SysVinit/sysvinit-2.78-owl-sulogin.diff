diff -ur sysvinit-2.78.owl-bound-format/man/sulogin.8 sysvinit-2.78/man/sulogin.8
--- sysvinit-2.78.owl-bound-format/man/sulogin.8	Fri Nov 20 17:42:15 1998
+++ sysvinit-2.78/man/sulogin.8	Sun Dec 10 05:59:38 2000
@@ -34,8 +34,7 @@
 .SH ENVIRONMENT VARIABLES
 \fIsulogin\fP looks for the environment variable \fBSUSHELL\fP or
 \fBsushell\fP to determine what shell to start. If the environment variable
-is not set, it will try to execute root's shell from /etc/passwd. If that
-fails it will fall back to \fB/bin/sh\fP.
+is not set, it will try to execute root's shell from /etc/passwd.
 .PP
 This is very valuable together with the \fB-b\fP flag to init. To boot
 the system into single user mode, with the root file system mounted read/write,
@@ -43,15 +42,6 @@
 is valid for the LILO bootprompt)
 .PP
 boot: linux -b rw sushell=/sbin/sash
-.SH FILES
-\fIsulogin\fP examines the next files to find the root password. If
-they are damaged, or non-existant, it will use fallback methods that
-even go so far as to provide you with a shell prompt without asking
-for the root password if they are irrepairably damaged.
-.PP
-/etc/passwd,
-.br
-/etc/shadow (if present)
 .SH AUTHOR
 Miquel van Smoorenburg <miquels@cistron.nl>
 .SH SEE ALSO
diff -ur sysvinit-2.78.owl-bound-format/src/sulogin.c sysvinit-2.78/src/sulogin.c
--- sysvinit-2.78.owl-bound-format/src/sulogin.c	Sat Apr 24 15:01:45 1999
+++ sysvinit-2.78/src/sulogin.c	Sun Dec 10 06:35:57 2000
@@ -4,9 +4,6 @@
  *		user to supply the root password before a
  *		shell is started.
  *
- *		If the password file is in any way corrupt
- *		a root password is not needed.
- *
  *		If there is a shadow password file and the
  *		encrypted root password is "x" the shadow
  *		password will be used.
@@ -20,21 +17,26 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
+#define __USE_XOPEN_EXTENDED
 #include <unistd.h>
 #include <fcntl.h>
 #include <signal.h>
+#include <setjmp.h>
 #include <pwd.h>
+#include <shadow.h>
 #include <termios.h>
 #include <sys/ioctl.h>
 #if defined(__GLIBC__)
 #  include <crypt.h>
 #endif
 
+#if 0
 #define CHECK_DES	1
 #define CHECK_MD5	1
 
 #define PASSWD	"/etc/passwd"
 #define SHADOW	"/etc/shadow"
+#endif
 #define BINSH	"/bin/sh"
 
 char *Version = "@(#)sulogin 2.76-4 24-apr-1999 miquels@cistron.nl";
@@ -42,6 +44,8 @@
 int timeout = 0;
 int profile = 0;
 
+static sigjmp_buf timed_out;
+
 #if 0
 /*
  *	Fix the tty modes and set reasonable defaults.
@@ -87,8 +91,11 @@
  */
 void alrm_handler()
 {
+	signal(SIGALRM, SIG_DFL);
+	siglongjmp(timed_out, 1);
 }
 
+#if 0
 /*
  *	See if an encrypted password is valid. The encrypted
  *	password is checked for traditional-style DES and
@@ -136,12 +143,24 @@
 {
 	if (val) *var = val;
 }
+#endif
 
 /*
  *	Get the root password entry.
  */
 struct passwd *getrootpwent()
 {
+	struct passwd *pw;
+	struct spwd *spw;
+
+	if ((pw = getpwnam("root")) &&
+	    !strcmp(pw->pw_passwd, "x") &&
+	    (spw = getspnam("root")))
+		pw->pw_passwd = spw->sp_pwdp;
+
+	return pw;
+
+#if 0
 	static struct passwd pwd;
 	FILE *fp;
 	static char line[256];
@@ -222,6 +241,7 @@
 		fprintf(stderr, "%s: root password garbled\n", SHADOW);
 		strcpy(pwd.pw_passwd, ""); }
 	return &pwd;
+#endif
 }
 
 /*
@@ -230,6 +250,32 @@
  */
 char *getpasswd()
 {
+	char *pass;
+	struct termios tty;
+
+	if (timeout) {
+		tcgetattr(0, &tty);
+		if (sigsetjmp(timed_out, 1)) {
+			tcsetattr(0, TCSANOW, &tty);
+			puts("\nTimed out");
+			return NULL;
+		}
+		signal(SIGALRM, alrm_handler);
+		alarm(timeout);
+	}
+
+	pass = getpass(
+		"Give root password for maintenance\n"
+		"(or type Control-D for normal startup): ");
+
+	if (timeout) {
+		alarm(0);
+		signal(SIGALRM, SIG_DFL);
+	}
+
+	return pass;
+
+#if 0
 	struct sigaction sa;
 	struct termios old, tty;
 	static char pass[128];
@@ -267,6 +313,7 @@
 	printf("\n");
 
 	return ret;
+#endif
 }
 
 /*
@@ -314,9 +361,11 @@
 	execl(sushell, shell, NULL);
 	perror(sushell);
 
+#if 0
 	setenv("SHELL", BINSH, 1);
 	execl(BINSH, profile ? "-sh" : "sh", NULL);
 	perror(BINSH);
+#endif
 }
 
 void usage(void)
@@ -402,17 +451,19 @@
 	/*
 	 *	Ask for the password.
 	 */
-	while(1) {
+	while (pwd) {
 		if ((p = getpasswd()) == NULL) break;
-		if (pwd->pw_passwd[0] == 0 ||
+		if ((pwd->pw_passwd[0] == 0 && p[0] == 0) ||
 		    strcmp(crypt(p, pwd->pw_passwd), pwd->pw_passwd) == 0)
 			sushell(pwd);
+		if (p[0] == 0) break;
 		printf("Login incorrect.\n");
 	}
 
 	/*
 	 *	User pressed Control-D.
 	 */
+	putchar('\n');
 	return 0;
 }
 
