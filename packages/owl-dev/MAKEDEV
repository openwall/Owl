#!/bin/bash -

VERSION='MAKEDEV 2.5.2-0.13-owl1'

# This version of MAKEDEV is based on work of many people.  The script was
# initially written by Nick Holloway, and then maintained by Michael K.
# Johnson and later by Nalin Dahyabhai of Red Hat.  Finally, it has been
# modified for Owl.

#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#
# Customisation:
#   The devices fall into various classes.  This section contains the mapping
# from a class name into a group name and permission.
#   You will almost certainly need to edit the group name to match your
# system, and you may change the permissions to suit your preference.  These
# lines _must_ be of the format "user group perm".

 pub_rw="  root root   666"
 pub_ro="  root root   644"
private="  root root   600"
   kmem="  root kmem   640"
    tty="  root tty    600"	# should become 620 after login, but not now
 owntty="  root tty    666"	# /dev/tty only
   cons="  root tty    600"
    vcs="  root root   600"
dialout="  root uucp   660"
  mouse="  root root   600"
printer="  root root   600"	# should allow group access once lpd is smarter
 floppy="  root floppy 660"
   disk="  root disk   660"
   scsi="  root root   600"
  cdrom="  root disk   660"
   tape="  root disk   660"
  audio="  root audio  660"
  video="  root video  660"
  radio="  root radio  660"
  ibcs2="  root root   600"
scanner="  root root   600"

MAXVT=8

#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#

procfs=/proc
procfs_rel2dev=${procfs}

opt_v=
opt_d=
opt_n=
opt_p=
opt_V=
opt_rpm=

while [ $# -ge 1 ]
do
	case $1 in
		--)	shift; break ;;
		-v)	shift; opt_v=1 ;;
		-d)	shift; opt_d=1 ;;
		-n)	shift; opt_n=1; opt_v=1 ;;
		-p)	shift; opt_p=1 ;;
		-V|--version|--help)
			shift; opt_V=1 ;;
		--rpm)
			shift; opt_rpm=1 ;;
		-*)	echo "$0: unknown flag \"$1\"" >&2; exit 1 ;;
		*)	break ;;
	esac
done

if [ "$opt_V" ]
then
	echo "$VERSION"
	exit 0
fi

opts="${opt_n:+-n} ${opt_p:+-p} ${opt_v:+-v} ${opt_d:+-d} ${opt_rpm:+--rpm}"

#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#

makedev () {	# usage: makedev name [bcu] major minor owner group mode
	if [ "$opt_v" ]
	then	if [ "$opt_d" ]
		then	echo "delete $1"
		else	echo "create $1	$2 $3 $4 $5:$6 $7" 
		fi
	fi
	if [ ! "$opt_n" ]
	then	if [ "$opt_d" ]
		then
			rm -f $1
		else
			rm -f $1-
			if [ "$opt_rpm" ]
			then
				echo "%dev($2,$3,$4) %attr($7,$5,$6) /dev/$1"
			else
				mknod $1- $2 $3 $4 &&
				chown $5:$6 $1- &&
				chmod $7 $1- &&
				mv $1- $1 || {
					rm -f $1-
					exit 1
				}
			fi
		fi
	fi
}
symlink () {	# usage: symlink name target
	if [ "$opt_v" ]
	then	if [ "$opt_d" ]
		then	echo "delete $1"
		else	echo "create $1	-> $2"
		fi
	fi
	[ ! "$opt_n" ] && rm -f $1 &&
	[ ! "$opt_d" ] && ln -s $2 $1
}

#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#

# For bash and ksh, we can use fast builtin routines to do manipulation.
# The extra level of indirection using `eval' is necessary for ksh.

math () {
	eval echo "\$(($*))"
}
index () {	# index string c
	eval "I=\${1%$2*}"
	eval echo "\${#I}"
}
suffix () {
	eval echo "\${1#$2}"
}
strip () {
	eval echo "\${1% $2 *} \${1#* $2 }"
}
first () {
	eval echo "\${1:0:1}"
}
second () {
	eval echo "\${1:1:1}"
}

#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#---#

devices=
if [ "$opt_p" -o ! -f $procfs/devices ]
then
	test "$opt_p" || echo "$0: warning: can't read $procfs/devices" >&2
else
	exec 3<$procfs/devices
	while read major device <&3
	do
		case "$device" in
			pty/m%d)
				device=pty
				;;
			pty/s%d)
				device=ttyp
				;;
			tts/%d)
				device=ttyS
				;;
			cua/%d)
				device=cua
				;;
			pts/%d)
				device=pts
				;;
			*/*|*%*|devices:|'')
				continue
				;;
		esac
		eval "major_$device=$major"
		devices="$devices $device"
	done
	exec 3<&-
fi

Major () {
	device=$2
	if [ "$opt_d" ]
	then
		echo -1	# don't care
	else
		eval echo \${major_$1:-\${device:?\"unknown major number for $1\"}}
	fi
}

cvt () {
	while [ $# -ne 0 ]
	do
		case "$1" in
			mem|tty|ttyp|cua|cub)	;;
			hd)	(for d in a b c d e f g h ; do
					echo -n hd$d " "
				 done) ; echo
				;;
			ide0)	echo hda hdb ;;
			ide1)	echo hdc hdd ;;
			ide2)	echo hde hdf ;;
			ide3)	echo hdg hdh ;;
			ide4)	echo hdi hdj ;;
			ide5)	echo hdk hdl ;;
			ide6)	echo hdm hdn ;;
			ide7)	echo hdo hdp ;;
			sd)	echo sda sdb sdc sdd sde sdf sdg sdh ;;
			sr)	echo scd0 ;;
			st)	echo st0 ;;
			xd)	echo xda xdb ;;
			fd)	echo fd0 fd1 ;;
			lp)	echo lp ;;
			mt)	echo ftape ;;
			loop)	echo loop ;;
			md)	echo md ;;
			ibcs2)	echo ibcs2 ;;
			tpqic02)	echo qic ;;
			sound)		echo audio ;;
			logiscan)	echo logiscan ;;
			ac4096)		echo ac4096 ;;
			sbpcd | sbpcd[123])	echo $1 ;;
			joystick)	echo js ;;
			apm_bios)	echo apm ;;
			dcf)		echo dcf ;;
			aztcd)		echo aztcd ;;
			pcmcia)	;; # taken care of by its own driver
			ttyC)	echo cyclades ;;
			isdn)	echo isdnmodem isdnbri dcbri ;;
			vcs)	;;
			*)	echo "$0: don't know what \"$1\" is" >&2 ;;
		esac
		shift
	done
}

for arg
do
	case $arg in
	generic)
		$0 $opts std || exit 1
		$0 $opts fd || exit 1
		$0 $opts fd0 fd1 || exit 1
		$0 $opts hda hdb hdc hdd hde hdf hdg hdh || exit 1
		$0 $opts xda xdb || exit 1
		$0 $opts sda sdb sdc sdd sde sdf sdg sdh || exit 1
		$0 $opts st0 st1 || exit 1
		$0 $opts scd0 scd1 || exit 1
		$0 $opts sg || exit 1
		$0 $opts md || exit 1
		$0 $opts loop || exit 1
		$0 $opts pty || exit 1
		$0 $opts pts || exit 1
		$0 $opts console || exit 1
		$0 $opts ttyS0 ttyS1 ttyS2 ttyS3 || exit 1
		$0 $opts busmice || exit 1
		$0 $opts lp || exit 1
		$0 $opts par || exit 1
		$0 $opts audio || exit 1
		$0 $opts usb || exit 1
		$0 $opts fb || exit 1
		$0 $opts misc || exit 1
		$0 $opts kbd || exit 1
		;;
	local)
		$0.local $opts || exit 1
		;;
	std)
		makedev mem     c 1 1 $kmem
		makedev kmem    c 1 2 $kmem
		makedev null    c 1 3 $pub_rw
		makedev port    c 1 4 $kmem
		makedev zero    c 1 5 $pub_rw
		symlink core    $procfs_rel2dev/kcore
		makedev full    c 1 7 $pub_rw
		makedev random  c 1 8 $pub_ro
		makedev urandom c 1 9 $pub_ro
		$0 $opts ram || exit 1
		makedev tty     c 5 0 $owntty
		;;
	ram)
		for i in 0 1 2 3 4 5 6 7 ; do
			makedev ram$i  b 1 $i $disk
		done
		if [ "$opt_d" ]
		then
			rm -f ram
		else
			ln -sf ram0 ram
		fi
		makedev initrd b 1 250 $disk
		;;
	console)
		major=`Major vcs 7`
		# console
		makedev tty0 c 4 0 $cons
		makedev console c 5 1 $cons
		[ "$major" ] && makedev vcs0 c $major 0 $vcs
		[ "$major" ] && makedev vcsa c $major 128 $vcs
		# individual vts
		line=1
		while [ $line -le $MAXVT -a $line -le 63 ]
		do
			makedev tty$line c 4 $line $tty
			[ "$major" ] && makedev vcs$line c $major $line $vcs
			[ "$major" ] && makedev vcsa$line c $major `math $line + 128` $vcs
			line=`math $line + 1`
		done
		;;
	tty[1-9]|tty[1-5][0-9]|tty[6][0-3])
		line=`suffix $arg tty`
		makedev tty$line c 4 $line $tty
		;;
	ttyS[0-9]|ttyS[1-5][0-9]|ttyS[6][0-3])
		line=`suffix $arg ttyS`
		minor=`math 64 + $line`
		makedev ttyS$line c 4 $minor $dialout
		makedev cua$line c 5 $minor $dialout
		;;
	pty[a-ep-z])
		bank=`suffix $arg pty`
		base=`index pqrstuvwxyzabcde $bank`
		base=`math $base \* 16`
		for i in 0 1 2 3 4 5 6 7 8 9 a b c d e f
		do
			j=`index 0123456789abcdef $i`
			makedev pty$bank$i c 2 `math $base + $j` $tty
			makedev tty$bank$i c 3 `math $base + $j` $tty
		done
		;;
	pty)
		ptysufs=""
		for i in p q r s t u v w x y z a b c d e
		do
			ptysufs="$ptysufs pty$i"
		done
		$0 $opts $ptysufs || exit 1
		;;
	pts)
		if [ "$opt_d" ]; then
			test -d pts && rmdir pts
		else
			mkdir -p -m 755 pts
		fi
		makedev ptmx c 5 2 $pub_rw
		;;
	cyclades|ttyC)
		major1=`Major ttyC 19` || continue
		#major2=`Major cub 20` || continue
		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \
                         16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
		do
			makedev ttyC$i c $major1 $i $dialout
			#makedev cub$i c $major2 $i $dialout
		done
		;;
	stallion|ttyE)
		major1=`Major ttyE 24` || continue
		#major2=`Major cue 25` || continue
		majorc=28
		minor=0
		until [ $minor -gt 256 ]
		do
			makedev ttyE$minor c $major1 $minor $dialout
			#makedev cue$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		for i in 0 1 2 3
		do
			makedev staliomem$i c $majorc $i $private
		done
		;;
	chase|ttyH)
		major1=`Major ttyH 17` || continue
		#major2=`Major cuh 18` || continue
		minor=0
		until [ $minor -gt 16 ] # tell me if 16 is wrong
		do
			makedev ttyH$minor c $major1 $minor $dialout
			#makedev cuh$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	rocketport|ttyR)
		major1=`Major ttyR 46` || continue
		#major2=`Major cur 47` || continue
		minor=0
		until [ $minor -gt 64 ] # tell me if 64 is wrong
		do
			makedev ttyR$minor c $major1 $minor $dialout
			#makedev cur$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	ttyV)
		major1=`Major ttyV 105` || continue
		#major2=`Major cuv 106` || continue
		minor=0
		until [ $minor -gt 16 ] # tell me if 16 is wrong
		do
			makedev ttyV$minor c $major1 $minor $dialout
			#makedev cuv$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	digi|ttyD)
		major1=`Major ttyD 22` || continue
		#major2=`Major cud 23` || continue
		minor=0
		until [ $minor -gt 16 ] # tell me if 16 is wrong
		do
			makedev ttyD$minor c $major1 $minor $dialout
			#makedev cud$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	specialix|ttyX)
		major1=`Major ttyX 32` || continue
		#major2=`Major cux 33` || continue
		minor=0
		until [ $minor -gt 16 ] # tell me if 16 is wrong
		do
			makedev ttyX$minor c $major1 $minor $dialout
			#makedev cux$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	specialixIO8|ttyW)
		major1=`Major ttyW 75` || continue
		#major2=`Major cuw 76` || continue
		minor=0
		until [ $minor -gt 16 ] # tell me if 16 is wrong
		do
			makedev ttyW$minor c $major1 $minor $dialout
			#makedev cuw$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	PAM|ttyM)
		major1=`Major ttyM 79` || continue
		#major2=`Major cum 80` || continue
		minor=0
		until [ $minor -gt 16 ] # tell me if 16 is wrong
		do
			makedev ttyM$minor c $major1 $minor $dialout
			#makedev cum$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	riscom|ttyL)
		major=`Major ttyL 48` || continue
		minor=0
		until [ $minor -gt 16 ] # tell me if 16 is wrong
		do
			makedev ttyL$minor c $major $minor $dialout
			minor=`math minor + 1`
		done
		;;
	computone|ttyF)
		major=`Major ttyF 71` || continue
		#major2=`Major cuf 72` || continue
		minor=0
		until [ $minor -gt 255 ]
		do
			makedev ttyF$minor c $major $minor $dialout
			#makedev cuf$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		major=73
		for i in 0 4 8 12
		do
			makedev ip2ipl$i  c $major $i $private
			makedev ip2stat$i c $major `math $i + 1` $private
		done
		;;
	ESP|ttyP)
		major=`Major ttyP 57` || continue
		#major2=`Major cup 58` || continue
		minor=0
		until [ $minor -gt 4 ] # tell me if 4 is wrong
		do
			makedev ttyP$minor c $major $minor $dialout
			#makedev cup$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	COMX|comx)
		major=`Major comx 88` || continue
		minor=0
		until [ $minor -gt 4 ] # tell me if 4 is wrong
		do
			makedev comx$minor c $major $minor $private
			minor=`math minor + 1`
		done
		;;
	isdnmodem|ttyI)
		major1=`Major ttyI 43` || continue
		#major2=`Major cui 44` || continue
		minor=0
		until [ $minor -gt 63 ]
		do
			makedev ttyI$minor c $major1 $minor $dialout
			#makedev cui$minor c $major2 $minor $dialout
			minor=`math minor + 1`
		done
		;;
	isdnbri)
		major=45
		minor=0
		until [ $minor -gt 63 ]
		do
			makedev isdn$minor c $major $minor $private
			makedev isdnctrl$minor c $major `math $minor + 64` $private
			makedev ippp$minor c $major `math $minor + 128` $private
			minor=`math minor + 1`
		done
		makedev isdninfo c $major 255 $private
		;;
	dcbri)
		major=52
		for i in 0 1 2 3
		do
			makedev dcbri$i c $major $i $private
		done
		;;
	capi)
		major=68
		makedev capi20 c $major 0 $private
		for i in 0 1 2 3 4 5 6 7 8 9
		do
			makedev capi20.0$i c $major `math $i + 1` $private
		done
		for i in 10 11 12 13 14 15 16 17 18 19
		do
			makedev capi20.$i c $major `math $i + 1` $private
		done
		;;
	scc)
		major1=`Major scc 34` || continue
		for i in 0 1 2 3 # more?
		do
			makedev scc$i c $major $i $private
		done
		;;
	lp)
		major=`Major lp 6` || continue
		makedev ${arg}0 c $major 0 $printer
		makedev ${arg}1 c $major 1 $printer
		makedev ${arg}2 c $major 2 $printer
		;;
	par)
		major=`Major lp 6` || continue
		makedev ${arg}0 c $major 0 $printer
		makedev ${arg}1 c $major 1 $printer
		makedev ${arg}2 c $major 2 $printer
		;;
	parport)
		major=`Major parport 99` || continue
		makedev ${arg}0 c $major 0 $printer
		makedev ${arg}1 c $major 1 $printer
		makedev ${arg}2 c $major 2 $printer
		;;
	slm)
		major=`Major slm 28` || continue
		for i in 0 1 2 3
		do
			makedev slm c $major $i $printer
		done
		;;
	busmice)
		major=`Major misc 10` || continue
		makedev logimouse c $major 0 $mouse
		makedev psmouse   c $major 1 $mouse
		symlink psaux psmouse
		makedev msmouse   c $major 2 $mouse
		makedev atimouse  c $major 3 $mouse
		makedev jmouse    c $major 4 $mouse
		makedev sunmouse  c $major 6 $mouse
		;;
	misc)
		major=`Major misc 10` || continue
		makedev rtc c $major 135 $private
		makedev openprom c $major 139 $private
		;;
	kbd)
		major=`Major kbd 11` || continue
		makedev kbd c $major 0 $private
		;;
	js)
		major=`Major Joystick` || continue
		makedev js0 c $major 0 $mouse
		makedev js1 c $major 1 $mouse
		;;
	fd[0-7])
		major=`Major fd 2` || continue
		base=`suffix $arg fd`
		if [ $base -ge 4 ]
		then
			base=`math $base + 124`
		fi
		makedev ${arg}       b $major $base             $floppy
		makedev ${arg}d360   b $major `math $base +  4` $floppy
		makedev ${arg}h1200  b $major `math $base +  8` $floppy
		makedev ${arg}D360   b $major `math $base + 12` $floppy
		makedev ${arg}D720   b $major `math $base + 16` $floppy
		makedev ${arg}h360   b $major `math $base + 20` $floppy
		makedev ${arg}h720   b $major `math $base + 24` $floppy
		makedev ${arg}H1440  b $major `math $base + 28` $floppy
		makedev ${arg}E2880  b $major `math $base + 32` $floppy
		makedev ${arg}CompaQ b $major `math $base + 36` $floppy

		symlink ${arg}H360 ${arg}D360
		symlink ${arg}H720 ${arg}D720

		makedev ${arg}h1440 b $major `math $base + 40` $floppy
		makedev ${arg}H1680 b $major `math $base + 44` $floppy
		makedev ${arg}h410  b $major `math $base + 48` $floppy
		makedev ${arg}H820  b $major `math $base + 52` $floppy
		makedev ${arg}h1476 b $major `math $base + 56` $floppy
		makedev ${arg}H1722 b $major `math $base + 60` $floppy
		makedev ${arg}h420  b $major `math $base + 64` $floppy
		makedev ${arg}H830  b $major `math $base + 68` $floppy
		makedev ${arg}h1494 b $major `math $base + 72` $floppy
		makedev ${arg}H1743 b $major `math $base + 76` $floppy
		makedev ${arg}h880  b $major `math $base + 80` $floppy
		makedev ${arg}D1040 b $major `math $base + 84` $floppy
		makedev ${arg}D1120 b $major `math $base + 88` $floppy
		makedev ${arg}h1600 b $major `math $base + 92` $floppy
		makedev ${arg}H1760 b $major `math $base + 96` $floppy
		makedev ${arg}H1920 b $major `math $base + 100` $floppy
		makedev ${arg}E3200 b $major `math $base + 104` $floppy
		makedev ${arg}E3520 b $major `math $base + 108` $floppy
		makedev ${arg}E3840 b $major `math $base + 112` $floppy
		makedev ${arg}H1840 b $major `math $base + 116` $floppy
		makedev ${arg}D800  b $major `math $base + 120` $floppy
		makedev ${arg}H1600 b $major `math $base + 124` $floppy
		;;
	hd[a-b])
		major=`Major ide0 3` || continue
		unit=`suffix $arg hd`
		base=`index ab $unit`
		base=`math $base \* 64`
		makedev hd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev hd$unit$part b $major `math $base + $part` $disk
		done
		;;
	hd[c-d])
		major=`Major ide1 22` || continue
		unit=`suffix $arg hd`
		base=`index cd $unit`
		base=`math $base \* 64`
		makedev hd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev hd$unit$part b $major `expr $base + $part` $disk
		done
		;;
	hd[e-f])
		major=`Major ide2 33` || continue
		unit=`suffix $arg hd`
		base=`index ef $unit`
		base=`math $base \* 64`
		makedev hd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev hd$unit$part b $major `expr $base + $part` $disk
		done
		;;
	hd[g-h])
		major=`Major ide3 34` || continue
		unit=`suffix $arg hd`
		base=`index gh $unit`
		base=`math $base \* 64`
		makedev hd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev hd$unit$part b $major `expr $base + $part` $disk
		done
		;;
	hd[i-j])
		major=`Major ide4 56` || continue
		unit=`suffix $arg hd`
		base=`index ij $unit`
		base=`math $base \* 64`
		makedev hd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev hd$unit$part b $major `expr $base + $part` $disk
		done
		;;
	hd[k-l])
		major=`Major ide5 57` || continue
		unit=`suffix $arg hd`
		base=`index kl $unit`
		base=`math $base \* 64`
		makedev hd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev hd$unit$part b $major `expr $base + $part` $disk
		done
		;;
	hd[m-n])
		major=`Major ide6 88` || continue
		unit=`suffix $arg hd`
		base=`index mn $unit`
		base=`math $base \* 64`
		makedev hd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev hd$unit$part b $major `expr $base + $part` $disk
		done
		;;
	hd[o-p])
		major=`Major ide7 89` || continue
		unit=`suffix $arg hd`
		base=`index op $unit`
		base=`math $base \* 64`
		makedev hd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev hd$unit$part b $major `expr $base + $part` $disk
		done
		;;
	ht)
		major=`Major ht0 37` || continue
		# Only one IDE tape drive is currently supported; ht0.
		makedev ht0 c $major 0 $tape
		makedev nht0 c $major 128 $tape
		;;
	pt)
		major=`Major pt 96` || continue
		for i in 0 1 2 3
		do
			makedev pt$i c $major $i $tape
			makedev npt$i c $major `math $i + 128` $tape
		done
		;;
	xd[a-d])
		major=`Major xd 13` || continue
		unit=`suffix $arg xd`
		base=`index abcd $unit`
		base=`math $base \* 64`
		makedev xd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev xd$unit$part b $major `expr $base + $part` $disk
		done
		;;
	sd[a-z])
		unit=`suffix $arg sd`
		base=`index abcdefghijklmnopqrstuvwxyz $unit`
		base=`math $base \* 16`
		if [ $base -lt 256 ]; then
                        major=8
                else
                        major=65
                        base=`math $base \- 256`
                fi
		makedev sd$unit b $major $base $disk
		for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			minor=`expr $base + $part`
			makedev sd$unit$part b $major $minor $disk
		done
		;;
	sd[a-d][a-z])
		unit=`suffix $arg sd`
		unitmaj=`first $unit`
		unitmin=`second $unit`
		basemaj=`index Xabcd $unitmaj`
		basemin=`index abcdefghijklmnopqrstuvwxyz $unitmin`
		basemaj=`math $basemaj \* 416`
		basemin=`math $basemin \* 16`
		base=`math $basemaj + $basemin`
		basemaj=`math $base / 256`
		base=`math $base % 256`
		major=`math basemaj \+ 64`
		if [ $major -gt 71 ]; then
			echo "$0: don't know how to make device \"$arg\"" >&2
			exit 0
		fi
		makedev sd$unit b $major $base $disk
		for part in 1 2 3 # 4 5 6 7 8 9 10 11 12 13 14 15
		do
			minor=`expr $base + $part`
			makedev sd$unit$part b $major $minor $disk
		done
		;;
	dac960)
		[ -d rd ] || {
			mkdir rd
			chown root.root rd
			chmod 755 rd
		}
		for ctr in 0 1 2 3 4 5 6 7
		do
		    major=`math 48 + $ctr`
		    minor=0
		    for ld in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \
			    17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
		    do
			makedev rd/c${ctr}d${ld} b $major $minor $disk
			minor=`math minor + 1`
			for part in 1 2 3 4 5 6 7
			do
			    makedev rd/c${ctr}d${ld}p$part b $major $minor $disk
			    minor=`math minor + 1`
			done
		    done
		done
		;;
	ida)
		[ -d ida ] || {
			mkdir ida
			chown root.root ida
			chmod 755 ida
		}
		for ctr in 0 1 2 # 3 4 5 6 7
		do
		    major=`math 72 + $ctr`
		    minor=0
		    for ld in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		    do
			makedev ida/c${ctr}d${ld} b $major $minor $disk
			minor=`math minor + 1`
			for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
			do
			    makedev ida/c${ctr}d${ld}p$part b $major $minor $disk
			    minor=`math minor + 1`
			done
		    done
		done
		;;
	cciss[0-9])
		[ -d cciss ] || {
			mkdir cciss
			chown root.root cciss
			chmod 755 cciss
		}
		for ctr in 0 1 2 # 3 4 5 6 7
		do
		    major=`math 104 + $ctr`
		    minor=0
		    for ld in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		    do
			makedev cciss/c${ctr}d${ld} b $major $minor $disk
			minor=`math minor + 1`
			for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
			do
			    makedev cciss/c${ctr}d${ld}p$part b $major $minor $disk
			    minor=`math minor + 1`
			done
		    done
		done
		;;
	rom)
		major=`Major rom 31`
		for i in 0 1 2 3 4 5 6 7
		do
			makedev rom$i    b $major $i $disk
			makedev rrom$i   b $major `math $i +8` $disk
			makedev flash$i  b $major `math $i +16` $disk
			makedev rflash$i b $major `math $i +24` $disk
		done
		;;
	ndb|nb)
		major=`Major ndb 43` || continue
		minor=0
		while [ $minor -lt 128 ] ; do
			makedev nb$minor b $major $minor $disk
			minor=`math $minor + 1`
		done
		;;
	loop)
		major=`Major loop 7` || continue
		for part in 0 1 2 3 4 5 6 7
		do
			makedev loop$part b $major $part $disk
		done
		;;
	md)
		major=`Major md 9` || continue
		for part in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		do
			makedev md$part b $major $part $disk
		done
		;;
	st[0-7])
		major=`Major st 9`
		unit=`suffix $arg st`
		makedev st$unit c $major $unit $tape
		makedev nst$unit c $major `math 128 + $unit` $tape
		;;
	qic)
		major=`Major tpqic02 12`
		makedev ntpqic11   c $major   2 $tape
		makedev tpqic11    c $major   3 $tape
		makedev ntpqic24   c $major   4 $tape
		makedev tpqic24    c $major   5 $tape
		makedev ntpqic120  c $major   6 $tape
		makedev tpqic120   c $major   7 $tape
		makedev ntpqic150  c $major   8 $tape
		makedev tpqic150   c $major   9 $tape
		makedev rmt8       c $major   6 $tape
		makedev rmt16      c $major   8 $tape
		makedev tape-d     c $major 136 $tape
		makedev tape-reset c $major 255 $tape
		major=`Major qft 27`
		for i in 0 1 2 3
		do
			makedev qft$i     c $major $i $tape
			makedev nqft$i    c $major `math $i + 4` $tape
			makedev zqft$i    c $major `math $i + 16` $tape
			makedev nzqft$i   c $major `math $i + 20` $tape
			makedev rawqft$i  c $major `math $i + 32` $tape
			makedev nrawqft$i c $major `math $i + 36` $tape
		done
		;;
	ftape)
		major=`Major mt 27` || continue
		for unit in 0 1 2 3
		do
			makedev rft$unit c $major $unit $tape
			makedev nrft$unit c $major `math $unit + 4` $tape
		done
		symlink ftape rft0
		symlink nftape nrft0
		;;
	scd[0-7])
		major=`Major sr 11` || continue
		unit=`suffix $arg scd`
		makedev scd$unit b $major $unit $cdrom
		makedev sr$unit b $major $unit $cdrom
		;;
	sonycd)
		major=`Major cdu31a` || continue
		makedev $arg b $major 0 $cdrom
		;;
	mcd)
		major=`Major mcd 23` || continue
		makedev $arg b $major 0 $cdrom
		;;
	mcdx)
		major=`Major mcdx 20` || continue
		makedev $arg b $major 0 $cdrom
		;;
	cdu535)
		makedev $arg b 24 0 $cdrom
		;;
	lmscd)
		makedev $arg b 24 0 $cdrom
		;;
	sbpcd|sbpcd[123])
		major=`Major $arg` || continue
		base=`suffix ${arg}0 sbpcd`
		# base=`expr ${arg}0 : "sbpcd\(.\)"`
		for minor in 0 1 2 3
		do
			# XXX
			unit=`expr substr 0123456789abcdef \( $base \* 4 + $minor + 1 \) 1`
			makedev sbpcd$unit b $major $minor $cdrom
		done
		[ $arg = sbpcd ] && symlink $arg ${arg}0
		;;
	aztcd)
		major=`Major $arg` || continue
		makedev ${arg}0 b $major 0 $cdrom
		;;
	bpcd)
		makedev $arg b 41 0 $cdrom
		;;
	optcd)
		makedev $arg b 17 0 $cdrom
		;;
	sjcd)
		makedev $arg b 18 0 $cdrom
		;;
	cfs|coda)
		makedev cfs0 c 67 0 $private
		;;
	xfs|arla)
		makedev xfs0 c 103 0 $private
		;;
	logiscan)
		major=`Major logiscan` || continue
		makedev $arg c $major 0 $scanner
		;;
	m105scan)
		major=`Major m105` || continue
		makedev $arg c $major 0 $scanner
		;;
	ac4096)
		major=`Major ac4096` || continue
		makedev $arg c $major 0 $scanner
		;;
	audio)
		major=`Major sound 14`
		makedev mixer      c $major  0 $audio
		makedev sequencer  c $major  1 $audio
		makedev midi00     c $major  2 $audio
		makedev dsp        c $major  3 $audio
		makedev audio      c $major  4 $audio
		makedev sndstat    c $major  6 $audio
		makedev audioctl   c $major  7 $audio
#		makedev sequencer2 c $major  8 $audio
		makedev mixer1     c $major 16 $audio
#		makedev patmgr0    c $major 17 $audio
		makedev midi01     c $major 18 $audio
		makedev dsp1       c $major 19 $audio
		makedev audio1     c $major 20 $audio
#		makedev patmgr1    c $major 33 $audio
		makedev midi02     c $major 34 $audio
		makedev midi03     c $major 50 $audio
		major=31
		makedev mpu401data c $major 0  $audio
		makedev mpu401stat c $major 1  $audio
		major=35
		for i in 0 1 2 3
		do
			makedev midi$i  c $major $i $audio
			makedev rmidi$i c $major `math $i + 64` $audio
			makedev smtpe$i c $major `math $i + 128` $audio
		done
		;;
	pcaudio)
		major=`Major pcsp` || continue
		makedev pcmixer c $major 0 $audio
		makedev pcsp    c $major 3 $audio
		makedev pcaudio c $major 4 $audio
		;;
	video|video4linux|v4l|radio|vtx|vttuner)
		# video4linux api includes radio, teletext, etc.
		major=`Major video 81` || continue
		minor=0
		until [ $minor -gt 63 ]
		do
			makedev video$minor c $major $minor $video
			makedev radio$minor c $major `math $minor + 64` $radio
			minor=`math $minor + 1`
		done
		minor=0
		until [ $minor -gt 31 ]
		do
			makedev vtx$minor c $major `math $minor + 192` $video
			makedev vbi$minor c $major `math $minor + 224` $video
			minor=`math $minor + 1`
		done
		symlink video video0
		symlink vbi vbi0
		symlink vtx vtx0
		major=82
		minor=0
		until [ $minor -gt 1 ]
		do
			makedev winradio$minor c $major $minor $radio
			minor=`math $minor + 1`
		done
		symlink winradio winradio0
		major=83
		#makedev vtx     c $major 0 $video
		makedev vttuner c $major 16 $video
		;;
	i2c)
		major=`Major i2c 89` || continue
		minor=0
		until [ $minor -gt 1 ] # tell me if 1 is wrong...
		do
			makedev i2c$minor c $major $minor $private
			minor=`math $minor + 1`
		done
		;;
	tlk)
		major=102
		minor=0
		until [ $minor -gt 3 ] # tell me if 3 is wrong...
		do
			makedev tlk$minor c $major $minor $private
			minor=`math $minor + 1`
		done
		;;
	srnd)
		makedev srnd0 c 110 0 $private
		makedev srnd1 c 110 1 $private
		;;
	fgrab)
		makedev mmetfgrab c 40 0 $private
		makedev wvisfgrab c 26 0 $private
		for i in 0 1 # more?
		do
			makedev iscc$i    c 93 $i $private
			makedev isccctl$i c 93 `math $i + 128` $private
		done
		for i in 0 1 # more?
		do
			makedev dcxx$i c 94 $i $private
		done
		;;
	sg)
		major=`Major sg 21`
		for unit in a b c d e f g h
		do
			minor=`index abcdefgh $unit`
			# minor=`expr abcdefgh : ".*$unit" - 1`
			makedev $arg$unit c $major $minor $scsi
			# we symlink to keep the permissions the same
			# it would be bad to have to change permissions
			# twice; devices would be left open when people
			# changed configuration.
			symlink $arg$minor $arg$unit
		done
		;;
	pg)
		major=`Major pg 97`
		for unit in 0 1 2 3
		do
			makedev pg$unit c $major $unit $scsi
		done
		;;
	fd)
		# not really devices, we use the /proc filesystem
		symlink fd     $procfs_rel2dev/self/fd
		symlink stdin  fd/0
		symlink stdout fd/1
		symlink stderr fd/2
		;;
	ibcs2)
		major=`Major ibcs2` || continue
		makedev socksys c $major 0 $ibcs2
		symlink nfsd socksys
		makedev spx     c $major 1 $ibcs2
		symlink X0R null
		;;
	netlink)
		major=36
		makedev route c $major 0 $private
		makedev skip  c $major 1 $private
		;;
	enskip)
		major=64
		makedev enskip c $major 0 $private
		;;
	ipfilt*)
		major=95
		makedev ipl     c $major 0 $private
		makedev ipnat   c $major 1 $private
		makedev ipstate c $major 2 $private
		makedev ipauth  c $major 3 $private
		;;
	qng)
		makedev qng c 77 0 $private
		;;
	apm)
		major=`Major apm_bios` || continue
		makedev $arg c $major 0 $private
		;;
	dcf)
		major=`Major dcf` || continue
		makedev $arg c $major 0 $private
		;;
	usb)
		major=`Major usb 180`
		if [ "$opt_d" ]; then
			test -d usb && rmdir usb
		else
			mkdir -p -m 755 usb
		fi
		for i in 0 1 2 3 # up to 15
		do
			makedev usb/lp$i    c $major $i $printer
			makedev usb/mouse$i c $major `math $i + 16` $mouse
		done
		;;
	fb)
		major=`Major fb 29`
		for i in 0 1 2 3 # up to 7
		do
			makedev fb$i c $major `math $i \* 32` $private
		done
		;;
	update)
		if [ ! "$devices" ]
		then
			echo "$0: don't appear to have any devices" >&2
			continue
		fi
		if [ "$opt_d" ]
		then
			echo "$0: can't delete an update" >&2
			continue
		fi
		create=
		delete=
		devs="$devices"
		if [ -f DEVICES ]
		then
			exec 3<DEVICES
			while read device major <&3
			do
				eval now=\$major_$device
				if [ "$now" = "" ]
				then
					delete="$delete `cvt $device`"
					continue
				elif [ "$now" != $major ]
				then
					create="$create "`cvt $device`
				fi
				devs=`strip " $devs " $device`
				# devs=`expr "$devs" : "\(.*\) $device"``expr "$devs" : ".* $device\(.*\)"`
			done
			exec 3<&-
		fi
		create="$create "`cvt $devs`
		[ "$delete" != "" ] && $0 $opts -d $delete || exit 1
		[ "$create" != " " ] && $0 $opts $create || exit 1
		[ "$opt_n" ] && continue
		for device in $devices
		do
			if [ "`cvt $device`" ]
			then
			    eval echo $device \$major_$device
			fi
		done > DEVICES
		;;
	*)
		echo "$0: don't know how to make device \"$arg\"" >&2
		;;
	esac
done

exit 0
