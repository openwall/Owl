diff -ur SimplePAMApps-0.60.orig/pamapps/login/login.c SimplePAMApps-0.60/pamapps/login/login.c
--- SimplePAMApps-0.60.orig/pamapps/login/login.c	Sun Mar 28 12:17:11 1999
+++ SimplePAMApps-0.60/pamapps/login/login.c	Sun Jul  9 16:42:38 2000
@@ -35,6 +35,7 @@
 #include <termios.h>
 #include <unistd.h>
 #include <signal.h>
+#include <syslog.h>
 /* should be in above(?): */ extern int vhangup(void);
 
 #include <security/pam_appl.h>
@@ -58,10 +59,10 @@
 #define DEFAULT_SHELL             "/bin/sh"
 
 #define LOGIN_WARNING_TIMEOUT     65
-#define LOGIN_WARNING_TEXT        "\a..Hurry! Login will terminate soon..\n"
+#define LOGIN_WARNING_TEXT        "\aHurry! Login will terminate soon...\n"
 
 #define LOGIN_ABORT_TIMEOUT       80
-#define LOGIN_ABORT_TEXT          "\a..Login canceled!\n"
+#define LOGIN_ABORT_TEXT          "\a\n"
 
 #define MAX_LOGIN                 3  /* largest tolerated delay */
 #define SLEEP_AFTER_MAX_LOGIN     5  /* failed login => delay before retry */
@@ -78,6 +79,14 @@
 				      * care that MIN_DELAY*2^MAX_LOGIN
 				      * is not too large for (int) */
 
+#undef DO_ERROR_RECOVERY
+#undef DO_ERROR_MESSAGES
+
+#ifndef DO_ERROR_MESSAGES
+#define SYSLOG_IDENT			"login"
+#define SYSLOG_FACILITY			LOG_AUTH
+#define SYSLOG_PRIORITY			LOG_ERR
+#endif
 
 #define LOGIN_STATE_ARGS_PARSED		2
 #define LOGIN_STATE_TERMINAL_OBTAINED	3
@@ -92,7 +101,9 @@
 /* internal strings and flags */
 
 #define DEFAULT_HOME              "/"
-#define LOGIN_ATTEMPT_FAILED      "Sorry, please try again\n\n"
+#define LOGIN_ATTEMPT_FAILED      "Login incorrect\n\n"
+#define LOGIN_AUTHTOK_EXPIRED \
+	"login: please update your authentication token(s)\n"
 
 /* for login session - after login */
 #define TERMINAL_PERMS            (S_IRUSR|S_IWUSR | S_IWGRP)
@@ -117,11 +128,32 @@
 static int login_flags=0;
 static const char *login_remote_host="localhost";
 static const char *login_remote_user="[system]";
-static const char *login_prompt = "Login: ";    /* default first time round */
-static const char *user_prompt = "Login: ";     /* default second, third... */
+static const char *login_prompt = "login: ";    /* default first time round */
+static const char *user_prompt = "login: ";     /* default second, third... */
 
 /* ------ some local (static) functions ------- */
 
+#ifdef __GNUC__
+__attribute__ ((format (printf, 1, 2)))
+#endif
+static void say(const char *format, ...)
+{
+    va_list args;
+
+#ifdef DO_ERROR_MESSAGES
+    va_start(args, format);
+    fprintf(stderr, "login: ");
+    vfprintf(stderr, format, args);
+    fputc('\n', stderr);
+    va_end(args);
+#else
+    openlog(SYSLOG_IDENT, LOG_PID, SYSLOG_FACILITY);
+    va_start(args, format);
+    vsyslog(SYSLOG_PRIORITY, format, args);
+    va_end(args);
+#endif
+}
+
 /*
  * set up the conversation timeout facilities.
  */
@@ -156,11 +188,15 @@
 
     (void) fprintf (stderr, "Login internal error: please seek help!\n");
     (void) fprintf (stderr, "This message will persist for an hour.\n");
+#ifdef DO_ERROR_MESSAGES
     (void) fprintf (stderr, "The problem is that,\n\n %s\n\n", s);
     (void) fprintf (stderr, "Obviously, this should never happen! It could possibly be\n");
     (void) fprintf (stderr, "a problem with (Linux-)PAM -- A recently installed module\n");
     (void) fprintf (stderr, "perhaps? For reference, this is the version of this\n");
     (void) fprintf (stderr, "application:\n\n %s", rcsid);
+#else
+    say("internal error: %s", s);
+#endif
 
     /* delay - to read the message */
 
@@ -278,23 +314,24 @@
     {
 	pw_dir = pam_getenv(pamh, "HOME");
 	if ( !pw_dir || *pw_dir == '\0' || chdir(pw_dir) ) {
-	    (void) fprintf (stderr, "home directory for %s does not work..", 
-								user);
-	    if (!strcmp(pw_dir,DEFAULT_HOME) || chdir(DEFAULT_HOME) ) 
+	    say("home directory for %s does not work", user);
+#ifdef DO_ERROR_RECOVERY
+	    if (!pw_dir || strcmp(pw_dir, DEFAULT_HOME))
+	    if (chdir(DEFAULT_HOME))
 	    {
-		(void) fprintf (stderr, ". %s not available either; exiting\n", DEFAULT_HOME);
+		say("%s not available either; exiting", DEFAULT_HOME);
 		break;
 	    }
 	    if (!pw_dir || *pw_dir == '\0') {
-		(void) fprintf(stderr, ". setting to " DEFAULT_HOME "\n");
+		say("setting directory to " DEFAULT_HOME);
 		pw_dir = DEFAULT_HOME;
 	    } else {
-		(void) fprintf(stderr, ". changing to " DEFAULT_HOME "\n");
+		say("changing directory to " DEFAULT_HOME);
 	    }
+#endif
 	    if (pam_misc_setenv(pamh, "HOME", pw_dir, 0) != PAM_SUCCESS) {
 		D(("failed to set $HOME"));
-		(void) fprintf(stderr, 
-			"Warning: unable to set HOME environment variable\n");
+		say("unable to set HOME environment variable");
 	    }
 	}
 
@@ -308,7 +345,7 @@
 	{
 	    delay = STANDARD_DELAY;
 	    pam_retval = PAM_BUF_ERR;
-	    (void) fprintf (stderr, "unable to build shell arguments");
+	    say("unable to build shell arguments");
 	    break;
 	}
 
@@ -325,7 +362,7 @@
 	if (shell_env == NULL) 
 	{
 	    delay = STANDARD_DELAY;
-	    (void) fprintf (stderr, "environment corrupt; sorry..");
+	    say("environment corrupt");
 	    break;
 	}
 
@@ -347,7 +384,7 @@
 	{
 	    delay =STANDARD_DELAY;
 	    pam_retval = retval;
-	    (void) fprintf (stderr, "login failed to release authenticator");
+	    say("login failed to release authenticator");
 	    break;
 	}
 
@@ -357,8 +394,7 @@
 	if (gr == NULL) 
 	{
 	    delay = STANDARD_DELAY;
-	    (void) fprintf (stderr, "Failed to find `%s' group\n", 
-							TERMINAL_GROUP);
+	    say("failed to find `%s' group", TERMINAL_GROUP);
 	    break;
 	}
 
@@ -368,7 +404,8 @@
 		|| chmod(terminal_name, TERMINAL_PERMS)) 
 	{
 	    delay = STANDARD_DELAY;
-	    (void) fprintf (stderr, "Failed to change access permission	to terminal %s\n", terminal_name);
+	    say("failed to change access permission to terminal %s",
+		terminal_name);
 	    break;
 	}
 
@@ -377,12 +414,14 @@
 	while ( pwdb_end() == PWDB_SUCCESS );            /* forget all */
 #endif
 
+	closelog();
+
 	/*
 	 * become user irrevocably
 	 */
 
 	if (setuid(uid) != 0) {
-	    (void) fprintf(stderr, "su: cannot assume uid\n");
+	    say("cannot assume uid");
 	    exit(1);
 	}
 
@@ -408,7 +447,7 @@
  * main program; login top-level skeleton
  */
 
-void main(int argc, const char **argv)
+int main(int argc, const char **argv)
 {
     static const char *shell=NULL;
     int retval=LOGIN_FALSE, status;
@@ -424,8 +463,14 @@
      */
 
     parse_args(argc, argv, &user, &login_remote_host, &login_flags);
+    if (getuid()) login_flags &= ~LOGIN_FORCE_AUTH;
+    if (!user && !getuid()) user = getenv("LOGNAME");
     state = LOGIN_STATE_ARGS_PARSED;
 
+/* set_user_credentials() should take care of supplementary groups, but
+ * we'd better have safe defaults */
+    if (setgroups(0, NULL)) return 1;
+
     do
     {
 	/*
@@ -441,7 +486,7 @@
 	{
 	    delay = 10;
 	    pam_retval = PAM_SUCCESS;
-	    (void) fprintf (stderr, "unable to attach to terminal\n");
+	    say("unable to attach to terminal");
 	    err_descr = "terminal error";
 	    break;
 	}
@@ -458,8 +503,7 @@
 	{
 	    delay = 60;
             pam_retval = PAM_ABORT;
-            (void) fprintf (stderr, "Problem initializing;\n\t%s\n", 
-							pwdb_strerror(retval));
+            say("pwdb_start: %s", pwdb_strerror(retval));
 	    err_descr = "start error";
             break;
 	}
@@ -472,8 +516,7 @@
 	{
 	    delay = 60;
 	    pam_retval = retval;
-	    (void) fprintf (stderr, "Error initializing;\n\t%s\n", 
-						pam_strerror(pamh,retval));
+	    say("pam_start: %s", pam_strerror(pamh,retval));
 	    err_descr = "start error";
 	    break;
 	}
@@ -507,9 +550,8 @@
 	{
 	    delay = 60;
 	    pam_retval = retval;
-	    (void) fprintf (stderr, "Internal failure;\n\t%s\n", 
-						pam_strerror(pamh,retval));
 	    err_descr = "environment setting error";
+	    say("%s: %s", err_descr, pam_strerror(pamh,retval));
 	    break;
 	}
 	state = LOGIN_STATE_ENV_INITIALIZED;
@@ -570,8 +612,7 @@
 	    case PAM_TRY_AGAIN:
 		D(("chauthtok: %s", pam_strerror(pamh,retval)));
 		retval = PAM_SUCCESS;
-		(void) fprintf(stderr
-			, "login: please update your authentication token(s)\n");
+		(void) fprintf (stderr, "%s", LOGIN_AUTHTOK_EXPIRED);
 	    }
 	}
 
@@ -583,9 +624,8 @@
 	{
 	    delay = STANDARD_DELAY;
 	    pam_retval = retval;
-	    (void) fprintf (stderr, "Login failure;\n\t%s\n", 
-						pam_strerror(pamh,retval));
 	    err_descr = "authentication failure";
+	    say("%s: %s", err_descr, pam_strerror(pamh,retval));
 	    break;
 	}
 	state = LOGIN_STATE_AUTHEN_SUCCESS;
@@ -603,9 +643,8 @@
 	{
 	    delay = STANDARD_DELAY;
 	    pam_retval = retval;
-	    (void) fprintf (stderr, "Error opening session;\n\t%s\n", 
-						pam_strerror(pamh,retval));
 	    err_descr = "unable to open session";
+	    say("%s: %s", err_descr, pam_strerror(pamh,retval));
 	    break;
 	}
 	state = LOGIN_STATE_SESSION_OPENED;
@@ -659,13 +698,13 @@
 	{
 	    delay = 60;
 	    pam_retval = PAM_ABORT;
-	    printf ("login: %s: %s\n", place, err_descr);
+	    say("%s: %s", place, err_descr);
 	    err_descr = "error opening utmp session";
 	    break;
 	}
 	else if (retval > 0) 
 	{
-	    (void) fprintf (stderr, "login: %s: %s\n", place, err_descr);
+	    say("%s: %s", place, err_descr);
 	    err_descr = NULL;
 	}
 	state = LOGIN_STATE_UTMP_OPENED;
@@ -690,13 +729,13 @@
 	    {
 		delay = 60;
 		pam_retval = PAM_ABORT;
-		(void) fprintf (stderr, "login: %s: %s\n", place, err_descr);
+		say("%s: %s", place, err_descr);
 		err_descr = "error closing utmp session";
 		break;
 	    }
 	    else if (retval > 0)
 	    { 
-		(void) fprintf(stderr, "login: %s: %s\n", place, err_descr);
+		say("%s: %s", place, err_descr);
 		err_descr = NULL;
 	    }
 	}
@@ -706,7 +745,8 @@
 	{
 	    retval = pam_setcred(pamh, PAM_DELETE_CRED);
 	    if (retval != PAM_SUCCESS) 
-		(void) fprintf(stderr, "WARNING: could not delete credentials\n\t%s\n", pam_strerror(pamh,retval));
+		say("could not delete credentials: %s",
+		    pam_strerror(pamh,retval));
 	}
 
 	if (state >= LOGIN_STATE_SESSION_OPENED)
@@ -733,13 +773,14 @@
 
     /* delay - to read the message */
 
-    if (err_descr != NULL)
-	(void) fprintf (stderr, "%s: %s\n", place, err_descr);
-    else
+    if (err_descr != NULL) {
+	say("%s: %s", place, err_descr);
+	return retcode;
+    } else
 	(void) fprintf (stderr, "%s\n", GOODBYE_MESSAGE); 
 
     /*Give time to read the goodbye message*/
     (void) sleep(delay);
 
-    exit (retcode);
+    return retcode;
 }
--- SimplePAMApps-0.60.orig/Discussions	Sun Mar 28 12:15:58 1999
+++ SimplePAMApps-0.60/Discussions	Sun Jul  9 16:56:53 2000
@@ -9,6 +9,10 @@
    login command line.  People haven't agreed how to solve the problem.  I
    need to think more.
 
+[ In this package, login has been patched to be able to obtain the username
+from LOGNAME (as well as from the command line) when started as root (not
+SUID).  This is to be used by getty's. ]
+
 3. Somebody (I don't remember who) stated that `su' had to provide a protection
    against brute force attacks on user passwords.  The issue needs more
    discussion.  Such a protection makes a sense only if all ways for brute
