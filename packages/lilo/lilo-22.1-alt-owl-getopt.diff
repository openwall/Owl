--- lilo-22.1/lilo.c.orig	Sun Oct 28 03:10:34 2001
+++ lilo-22.1/lilo.c	Tue Jan 15 00:28:28 2002
@@ -222,7 +222,7 @@
 {
     int pass, mask;
     struct stat st;
-    int md_fd;
+    int md_fd = -1;
     md_disk_info_t md_disk_info;
     GEOMETRY geo;
     char *boot, *extrap;
@@ -516,6 +516,10 @@
 }  /* void raid_setup(void) */
 #undef COVERED
 
+extern const char *__progname;
+
+static void usage(int ret) __attribute__ ((noreturn));
+
 static void show_other(int fd)
 {
     BOOT_SECTOR buf[SETUPSECS-1];
@@ -551,7 +555,9 @@
 }
 
 
-static void show_images(char *map_file)
+static void show_images(const char *map_file) __attribute__ ((noreturn));
+
+static void show_images(const char *map_file)
 {
     DESCR_SECTORS descrs;
     BOOT_SECTOR boot;
@@ -711,116 +717,108 @@
     if (descrs.l.checksum ==
     	  crc32(descrs.sector, sizeof(descrs.l.sector), CRC_POLY1) )  exit(0);
 #endif
-    fflush(stdout);
-    fprintf(errstd,"Checksum error\n");
-    exit(1);
+    die("Checksum error");
 }
 
 
-static void usage(char *name)
+static void usage(int ret)
 {
-    char *here;
+    fprintf(errstd,
+"Usage: %s [ -C config_file ] -q [ -m map_file ] [ -v [ N ] ]\n"
+"       %s [ -C config_file ] [ -b boot_device ] [ -c ] [ -g | -l | -L ]\n"
+"            [ -i boot_loader ] [ -m map_file ] [ -d delay ]\n"
+"            [ -v [ N ] ] [ -t ] [ -s save_file | -S save_file ]\n"
+"            [ -p ][ -P fix | -P ignore ] [ -r root_dir ] [ -w ]\n"
+"       %s [ -C config_file ] [ -m map_file ] [ -R 'word ...' ]\n"
+"       %s [ -C config_file ] -I 'name [ options ]'\n"
+"       %s [ -C config_file ] [ -s save_file ] -u | -U [ boot_device ]\n"
+"       %s -A '/dev/XXX [ N ]' \t\tactivate a partition\n"
+"       %s -M '/dev/XXX [ mbr_file ]' \tinstall master boot record\n"
+"       %s -T help \t\t\tlist additional options\n"
+"       %s -V [ -v [ N ] ] \t\t\tversion information\n\n",
+	__progname, __progname, __progname,
+	__progname, __progname, __progname,
+	__progname, __progname, __progname);
 
-    here = strrchr(name,'/');
-    if (here) name = here+1;
-    fprintf(errstd,"usage: %s [ -C config_file ] -q [ -m map_file ] "
-      "[ -v N | -v ... ]\n",name);
-    fprintf(errstd,"%7s%s [ -C config_file ] [ -b boot_device ] [ -c ] "
-      "[ -g | -l | -L ]\n","",name);
-    fprintf(errstd,"%12s[ -i boot_loader ] [ -m map_file ] [ -d delay ]\n","");
-    fprintf(errstd,"%12s[ -v N | -v ... ] [ -t ] [ -s save_file | -S save_file ]\n",
-      "");
-    fprintf(errstd,"%12s[ -p ][ -P fix | -P ignore ] [ -r root_dir ] [ -w ]\n","");
-    fprintf(errstd,"%7s%s [ -C config_file ] [ -m map_file ] "
-      "-R [ word ... ]\n","",name);
-    fprintf(errstd,"%7s%s [ -C config_file ] -I name [ options ]\n","",name);
-    fprintf(errstd,"%7s%s [ -C config_file ] [ -s save_file ] "
-      "-u | -U [ boot_device ]\n","",name);
-    fprintf(errstd,"%7s%s -A /dev/XXX [ N ]\t\tactivate a partition\n","",name);
-    fprintf(errstd,"%7s%s -M /dev/XXX [ mbr_file ]\tinstall master boot record\n","",name);
-    fprintf(errstd,"%7s%s -T help \t\t\tlist additional options\n", "", name);
-    fprintf(errstd,"%7s%s -V [ -v ]\t\t\tversion information\n\n","",name);
-    exit(1);
+    exit(ret);
 }
 
+static char *xstrdup(const char *str)
+{
+    char *r = strdup(str);
+    if (!r)
+        die("strdup: %s", strerror(errno));
+    return r;
+}
+
+static char *get_two_args(const char *str, char **extra_arg, char *defstr)
+{
+    char *arg1 = xstrdup(str);
+    char *arg2 = strchr(arg1,' ');
+
+    *extra_arg = 0;
+    if (arg2) {
+        for (;' ' == *arg2;++arg2)
+            *arg2 = '\0';
+        if (*arg2)
+            *extra_arg = arg2;
+    }
+    if (defstr && !*extra_arg)
+        *extra_arg = defstr;
+    return arg1;
+}
 
-int main(int argc,char **argv)
+int main(int argc, char *const argv[])
 {
-    char *name,*reboot_arg,*identify,*ident_opt,*new_root;
-    char *tell_param, *uninst_dev, *param, *act1, *act2, ch;
-    int query,more,version,uninstall,validate,activate,instmbr,geom;
+    char *reboot_arg = 0, *identify = 0, *ident_opt = 0, *new_root = 0;
+    char *tell_param = 0, *uninst_dev = 0, *act1 = 0, *act2 = 0, ch;
+    int query = 0, more = 0, version = 0, uninstall = 0, validate = 0;
+    int activate = 0, instmbr = 0, geom = 0;
     struct stat st;
     int fd;
     long raid_offset;
 
     errstd = stderr;
     config_file = DFL_CONFIG;
-    act1 = act2 = tell_param = 
-	    reboot_arg = identify = ident_opt = new_root = uninst_dev = NULL;
-    lowest = do_md_install = zflag =
-	    query = version = uninstall = validate = activate = instmbr = 0;
+    lowest = do_md_install = zflag = 0;
     verbose = -1;
-    name = *argv;
-    argc--;
+
     cfg_init(cf_options);
-    while (argc && **++argv == '-') {
-	argc--;
-      /* first those options with a mandatory parameter */
-      /* Notably absent are "RuUv" */
-	if (strchr("AbCdDfiImMPrsSTx", ch=(*argv)[1])) {
-	    if ((*argv)[2]) param = (*argv)+2;
-	    else {
-		param = *++argv;
-		if(argc-- <= 0) usage(name);
-	    }
-	} else { 
-	    param = NULL;
-	}
-#if 0
-fprintf(errstd,"argc=%d, *argv=%s, ch=%c param=%s\n", argc, *argv, ch, param);
-#endif
+
+    while ((ch = getopt(argc,argv, 
+	 "A:b:cC:d:D:f:hi:I:lLm:M:P:qr:R:s:S:tT:u::U::v::Vwx:X")) != -1) {
 	switch (ch) {
 	    case 'A':
 		activate = 1;
-		act1 = param;
-		if (argc && argv[1][0] != '-') {
-		    act2 = *++argv;
-		    argc--;
-		}
+		act1 = get_two_args(optarg,&act2,0);
 		break;
 	    case 'b':
-		cfg_set(cf_options,"boot",param,NULL);
+		cfg_set(cf_options,"boot",xstrdup(optarg),NULL);
 		break;
 	    case 'c':
 		cfg_set(cf_options,"compact",NULL,NULL);
 		compact = 1;
 		break;
 	    case 'C':
-		config_file = param;
+		config_file = xstrdup(optarg);
 		break;
 	    case 'd':
-		cfg_set(cf_options,"delay",param,NULL);
+		cfg_set(cf_options,"delay",xstrdup(optarg),NULL);
 		break;
 	    case 'D':
-		cfg_set(cf_options,"default",param,NULL);
+		cfg_set(cf_options,"default",xstrdup(optarg),NULL);
 		break;
 	    case 'f':
-		cfg_set(cf_options,"disktab",param,NULL);
+		cfg_set(cf_options,"disktab",xstrdup(optarg),NULL);
 		break;
 	    case 'g':
 		geometric |= 1;
 		break;
 	    case 'i':
-		cfg_set(cf_options,"install",param,NULL);
+		cfg_set(cf_options,"install",xstrdup(optarg),NULL);
 		break;
 	    case 'I':
-		identify = param;
-		if (argc && *argv[1] != '-') {
-		    ident_opt = *++argv;
-		    argc--;
-		} else {
-		    ident_opt = "i";
-		}
+		identify = get_two_args(optarg,&ident_opt,"i");
 		break;
 	    case 'l':
 		geometric |= 2;
@@ -829,87 +827,58 @@
 		geometric |= 4;
 		break;
 	    case 'm':
-		cfg_set(cf_options,"map",param,NULL);
+		cfg_set(cf_options,"map",xstrdup(optarg),NULL);
 		break;
 	    case 'M':
 		instmbr = 1;
-		act1 = param;
-		if (argc && argv[1][0] != '-') {
-		    act2 = *++argv;
-		    argc--;
-		}
+		act1 = get_two_args(optarg,&act2,0);
 		break;
 	    case 'p':
 		passw = 1;	/* force re-gen of password file */
 		break;
 	    case 'P':
-		if (!strcmp(param,"fix"))
+		if (!strcmp(optarg,"fix"))
 		    cfg_set(cf_options,"fix-table",NULL,NULL);
-		else if (!strcmp(param,"ignore"))
+		else if (!strcmp(optarg,"ignore"))
 		    cfg_set(cf_options,"ignore-table",NULL,NULL);
-		else usage(name);
+		else usage(1);
 		break;
 	    case 'q':
 		query = 1;
 		break;
 	    case 'r':
-		new_root = param;
+		new_root = xstrdup(optarg);
 		break;
 	    case 'R':
-	        if (*(param = (*argv)+2)) argc++;
-	        else if (argc) param = *++argv;
-	        else reboot_arg = "";
-	        
-		while (argc) {
-			if (!reboot_arg)
-			    *(reboot_arg = alloc(strlen(param)+1)) = 0;
-			else {
-			    param = *++argv;
-			    strcat(reboot_arg = ralloc(reboot_arg,
-			        strlen(reboot_arg)+strlen(param)+2)," ");
-			}
-			strcat(reboot_arg, param);
-			argc--;
-		    }
-#if 0
-fprintf(errstd,"REBOOT=\"%s\"\n", reboot_arg);		    
-#endif
+		reboot_arg = xstrdup(optarg);
 		break;
 	    case 's':
-		cfg_set(cf_options,"backup",param,NULL);
+		cfg_set(cf_options,"backup",xstrdup(optarg),NULL);
 		break;
 	    case 'S':
-		cfg_set(cf_options,"force-backup",param,NULL);
+		cfg_set(cf_options,"force-backup",xstrdup(optarg),NULL);
 		break;
 	    case 't':
 		test = 1;
 		break;
 	    case 'T':
-	        tell_param = param;
+		tell_param = xstrdup(optarg);
 	    	break;
 	    case 'u':
 		validate = 1;
 		/* fall through */
 	    case 'U':	/* argument to -u or -U is optional */
 		uninstall = 1;
-		if ((*argv)[2]) param = (*argv)+2;
-		else if (argc && argv[1][0] != '-') {
-		    param = *++argv;
-		    argc--;
-		}
-		uninst_dev = param;
+		if (optarg && *optarg)
+		    uninst_dev = xstrdup(optarg);
 		break;
 	    case 'v':
-	        if ((*argv)[2]) param = (*argv)+2;
-	        else if (argc && argv[1][0]>='0' && argv[1][0]<='9') {
-	            param = *++argv;
-	            argc--;
-	        }
-	        if (param) 
-		    verbose = to_number(param);
-		else
-	            if (verbose<0) verbose = 1;
-	            else verbose++;
+		if (optarg && *optarg) {
+		    verbose = to_number(optarg);
+		    if (verbose < 0)
+			usage(1);
+	        } else
+	            ++verbose;
 	        if (verbose) errstd = stdout;
 		break;
 	    case 'V':
@@ -920,14 +889,14 @@
 		nowarn = 1;
 		break;
 	    case 'x':
-		if (!strcmp(param,"none"))
-		    cfg_set(cf_options,RAID_EXTRA_BOOT,param,NULL);
-		else if (!strcmp(param,"auto"))
-		    cfg_set(cf_options,RAID_EXTRA_BOOT,param,NULL);
-		else if (!strcmp(param,"mbr-only"))
-		    cfg_set(cf_options,RAID_EXTRA_BOOT,param,NULL);
+		if (!strcmp(optarg,"none"))
+		    cfg_set(cf_options,RAID_EXTRA_BOOT,xstrdup(optarg),NULL);
+		else if (!strcmp(optarg,"auto"))
+		    cfg_set(cf_options,RAID_EXTRA_BOOT,xstrdup(optarg),NULL);
+		else if (!strcmp(optarg,"mbr-only"))
+		    cfg_set(cf_options,RAID_EXTRA_BOOT,xstrdup(optarg),NULL);
 		else
-		    cfg_set(cf_options,RAID_EXTRA_BOOT,param,NULL);
+		    cfg_set(cf_options,RAID_EXTRA_BOOT,xstrdup(optarg),NULL);
 		break;
 	    case 'X':
 #ifndef PAR1_PARAMS
@@ -962,11 +931,16 @@
 	    case 'z':
 		zflag++;	/* force zero of MBR 8-byte area */
 		break;
+	    case 'h':
+		usage(0);
 	    default:
-		usage(name);
+		usage(1);
 	}
     }
-    if (argc) usage(name);
+
+    if (optind < argc)
+        usage(1);
+
     if (!new_root) new_root = getenv("ROOT");
     if (new_root && *new_root) {
 	if (chroot(new_root) < 0) die("chroot %s: %s",new_root,strerror(errno));
@@ -975,7 +949,7 @@
 	if (chdir("/") < 0) die("chdir /: %s",strerror(errno));
     }
     if (atexit(temp_remove)) die("atexit() failed");
-    if (version+activate+instmbr+(tell_param!=NULL) > 1) usage(name);
+    if (version+activate+instmbr+(tell_param!=NULL) > 1) usage(1);
     if (activate) do_activate(act1, act2);
     if (verbose > 0 || version) {
        printf("LILO version %d.%d%s%s", VERSION_MAJOR, VERSION_MINOR,
@@ -1079,7 +1053,6 @@
 	    sync();
 	    exit(0);
 	}
-	if (argc) usage(name);
 	geo_init(cfg_get_strg(cf_options,"disktab"));
 	if (query)
 	    show_images(!cfg_get_strg(cf_options,"map") ? MAP_FILE :
