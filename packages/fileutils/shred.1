.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.020.
.TH SHRED "1" "January 2000" "GNU fileutils 4.0p" FSF
.SH NAME
shred \- delete a file securely, first overwriting it to hide its contents
.SH SYNOPSIS
.B shred
[\fIOPTIONS\fR] \fIFILE \fR[...]
.SH DESCRIPTION
." Add any additional description here
.PP
\fBshred\fR overwrites devices or files, to help prevent even very
expensive hardware from recovering the data.
.PP
Ordinarily when you remove a file, the data is not actually destroyed.  
Only the index listing where the file is stored is destroyed, and the 
storage is made available for reuse. There are undelete utilities that 
will attempt to reconstruct the index and can bring the file back if 
the parts were not reused.
.PP
On a busy system with a nearly-full drive, space can get reused in a
few seconds.  But there is no way to know for sure.  If you have
sensitive data, you may want to be sure that recovery is not possible
by actually overwriting the file with non-sensitive data.
.PP
However, even after doing that, it is possible to take the disk back
to a laboratory and use a lot of sensitive (and expensive) equipment to
look for the faint "echoes" of the original data underneath the
overwritten data.  If the data has only been overwritten once, it's not
even that hard.
.PP
The best way to remove something irretrievably is to destroy the
media it's on with acid, melt it down, or the like.  For cheap
removable media like floppy disks, this is the preferred method.
However, hard drives are expensive and hard to melt, so the `shred'
utility tries to achieve a similar effect non-destructively.
.PP
This uses many overwrite passes, with the data patterns chosen to
maximize the damage they do to the old data.  While this will work on
floppies, the patterns are designed for best effect on hard drives.
For more details, see the source code and Peter Gutmann's paper `Secure
Deletion of Data from Magnetic and Solid-State Memory', from the
proceedings of the Sixth USENIX Security Symposium (San Jose,
California, 22-25 July, 1996).
.PP
\fB*Please note*\fR that there is a very important assumption made, that
the filesystem used overwrites data in place.  This is the traditional
way to do things, but many modern filesystem designs do not satisfy this
assumption.  Exceptions include:
.TP	 
* Log-structured or journaled filesystems, such as those supplied with AIX and Solaris.
.TP
* Filesystems that write redundant data and carry on even if some writes fail, such as RAID-based filesystems.
.TP
* Filesystems that make snapshots, such as Network Appliance's NFS server.
.TP
* Filesystems that cache in temporary locations, such as NFS version 3 clients.
.TP
* Compressed filesystems.
.PP			    
If you are not sure how your filesystem operates, then you should
assume that it does not overwrite data in place, which means that shred
cannot reliably operate on regular files in your filesystem.
.PP				       
Generally speaking, it is more reliable to shred a device than a
file, since this bypasses the problem of filesystem design mentioned
above.  However, even shredding devices is not always completely
reliable.  For example, most disks map out bad sectors invisibly to the
application; if the bad sectors contain sensitive data, `shred' won't
be able to destroy it.
.PP						  
\fBshred\fR makes no attempt to detect or report these problem, just as
it makes no attempt to do anything about backups.  However, since it is
more reliable to shred devices than files, `shred' by default does not
truncate or remove the output file.  This default is more suitable for
devices, which typically cannot be truncated and should not be removed.
.TP
\fB\-f\fR, \fB\-\-force\fR
change permissions to allow writing if necessary
.TP
\fB\-n\fR, \fB\-\-iterations\fR=\fIN\fR
Overwrite N times instead of the default (25)
.TP
\fB\-s\fR, \fB\-\-size\fR=\fIN\fR
shred this many bytes (suffixes like k, M, G accepted)
.TP
\fB\-u\fR, \fB\-\-remove\fR
truncate and remove file after overwriting
.TP
\fB\-v\fR, \fB\-\-verbose\fR
show progress
.TP
\fB\-x\fR, \fB\-\-exact\fR
do not round file sizes up to the next full block
.TP
\fB\-z\fR, \fB\-\-zero\fR
add a final overwrite with zeros to hide shredding
.TP
-
shred standard output
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
print version information and exit
.PP

FIXME maybe add more discussion here?
.SH AUTHOR
Written by Colin Plumb.
.SH "REPORTING BUGS"
Report bugs to <bug-fileutils@gnu.org>.
.SH COPYRIGHT
Copyright \(co 1999 Free Software Foundation, Inc.
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
The full documentation for
.B shred
is maintained as a Texinfo manual.  If the
.B info
and
.B shred
programs are properly installed at your site, the command
.IP
.B info shred
.PP
should give you access to the complete manual.
