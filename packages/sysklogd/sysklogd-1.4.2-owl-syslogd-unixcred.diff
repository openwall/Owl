diff -urp sysklogd-1.4.1-pre-unixcred/syslogd.c sysklogd-1.4.1/syslogd.c
--- sysklogd-1.4.1-pre-unixcred/syslogd.c	2010-11-09 11:27:11 +0000
+++ sysklogd-1.4.1/syslogd.c	2010-11-09 12:00:23 +0000
@@ -480,6 +480,9 @@ static char sccsid[] = "@(#)syslogd.c	5.
  *	restart code, so that subsequent SIGHUPs are able to set it
  *	again and cause a new restart.  This fixes a race condition
  *	when somebody sends tons of HUP signals.
+ *
+ * Wed Oct 31 18:24:54 MSD 2007: ArkanoiD <ark at owl.openwall.com>
+ *	Enable unix socket peer credentials check
  */
 
 
@@ -769,6 +772,19 @@ struct code	FacNames[] = {
 	{NULL,           -1},
 };
 
+#define SINFO_ISINTERNAL 0x01
+#define SINFO_HAVECRED   0x02
+#define SINFO_KLOG       0x04
+#define SINFO_TIMESTAMP  0x08
+
+struct sourceinfo {
+	char	*hostname;
+	uid_t	uid;
+	gid_t	gid;
+	pid_t	pid;
+	unsigned int flags;
+} sinfo;
+
 int	Debug;			/* debug flag */
 char	LocalHostName[MAXHOSTNAMELEN+1];	/* our hostname */
 char	*LocalDomain;		/* our local domain name */
@@ -796,10 +812,10 @@ int main(int argc, char **argv);
 char **crunch_list(char *list);
 int usage(void);
 void untty(void);
-void printchopped(const char *hname, char *msg, size_t len, int fd);
-void printline(const char *hname, char *msg);
+void printchopped(const struct sourceinfo* const, char *msg, size_t len, int fd);
+void printline(const struct sourceinfo* const, char *msg);
 void printsys(char *msg);
-void logmsg(int pri, char *msg, const char *from, int flags);
+void logmsg(int pri, char *msg, const struct sourceinfo* const, int flags);
 void fprintlog(register struct filed *f, char *from, int flags, char *msg);
 void endtty();
 void wallmsg(register struct filed *f, struct iovec *iov);
@@ -830,6 +846,50 @@ static int create_unix_socket(const char
 static int create_inet_socket();
 #endif
 
+static ssize_t recv_withcred(int s, void *buf, size_t len, int flags,
+			     pid_t *pid, uid_t *uid, gid_t *gid)
+{
+	struct cmsghdr *cmptr;
+	struct msghdr m;
+	struct iovec iov;
+	char   control[CMSG_SPACE(sizeof(struct ucred))];
+	size_t rc;
+
+	memset(&m, 0, sizeof(m));
+	memset(control, 0, sizeof(control));
+	iov.iov_base = (char *) buf;
+	iov.iov_len  = len;
+	m.msg_iov = &iov;
+	m.msg_iovlen = 1;
+	m.msg_control = control;
+	m.msg_controllen = sizeof(control);
+	if ((rc = recvmsg(s, &m, flags)) < 0)
+		return rc;
+#ifdef SCM_CREDENTIALS
+	if (!(m.msg_flags & MSG_CTRUNC) &&
+	    (cmptr = (m.msg_controllen >= sizeof(struct cmsghdr)) ?
+		CMSG_FIRSTHDR(&m) : NULL)
+	    && (cmptr->cmsg_level == SOL_SOCKET)
+	    && (cmptr->cmsg_type == SCM_CREDENTIALS)) {
+		if (pid)
+			*pid = ((struct ucred *) CMSG_DATA(cmptr))->pid;
+		if (uid)
+			*uid = ((struct ucred *) CMSG_DATA(cmptr))->uid;
+		if (gid)
+			*gid = ((struct ucred *) CMSG_DATA(cmptr))->gid;
+	} else
+#endif
+	{
+		if (pid)
+			*pid = (pid_t) -1;
+		if (uid)
+			*uid = (uid_t) -1;
+		if (gid)
+			*gid = (gid_t) -1;
+	}
+	return rc;
+}
+
 static int set_nonblock_flag(int desc)
 {
 	int flags = fcntl(desc, F_GETFL, 0);
@@ -958,7 +1018,6 @@ int main(argc, argv)
 	int	fd;
 #ifdef  SYSLOG_INET
 	struct sockaddr_in frominet;
-	char *from;
 #endif
 	pid_t ppid = getpid();
 #endif
@@ -1299,32 +1358,43 @@ int main(argc, argv)
 #ifdef SYSLOG_UNIXAF
 		for (i = 0; i < nfunix; i++) {
 		    if ((fd = funix[i]) != -1 && FD_ISSET(fd, &readfds)) {
+			memset(&sinfo, '\0', sizeof(sinfo));
 			memset(line, '\0', sizeof(line));
-			i = recv(fd, line, MAXLINE - 2, 0);
+			i = recv_withcred(fd, line, MAXLINE - 2, 0, 
+				 	  &sinfo.pid, &sinfo.uid, &sinfo.gid);
+
+			if (sinfo.uid == -1 || sinfo.gid == -1 ||
+			    sinfo.pid == -1) 
+				logerror("error - credentials not provided");
+			else
+				sinfo.flags = SINFO_HAVECRED;
+
 			dprintf("Message from UNIX socket: #%d\n", fd);
 			if (i > 0) {
 				line[i] = line[i+1] = '\0';
-				printchopped(LocalHostName, line, i + 2,  fd);
+				sinfo.hostname = LocalHostName;
+				printchopped(&sinfo, line, i + 2, fd);
 			} else if (i < 0 && errno != EINTR) {
 				dprintf("UNIX socket error: %d = %s.\n", \
 					errno, strerror(errno));
 				logerror("recvfrom UNIX");
-	      	}
-				}
 			}
+		    }
+		}
 #endif
 
 #ifdef SYSLOG_INET
 		if (InetInuse && AcceptRemote && FD_ISSET(inetm, &readfds)) {
 			len = sizeof(frominet);
 			memset(line, '\0', sizeof(line));
+			memset(&sinfo, '\0', sizeof(sinfo));
 			i = recvfrom(finet, line, MAXLINE - 2, 0, \
 				     (struct sockaddr *) &frominet, &len);
 			dprintf("Message from inetd socket: #%d, host: %s\n",
 				inetm, inet_ntoa(frominet.sin_addr));
 			if (i > 0) {
 				line[i] = line[i+1] = '\0';
-				from = (char *)cvthname(&frominet);
+				sinfo.hostname = (char *)cvthname(&frominet);
 				/*
 				 * Here we could check if the host is permitted
 				 * to send us syslog messages. We just have to
@@ -1334,7 +1404,7 @@ int main(argc, argv)
 				 * letters so we could match them against whatever.
 				 *  -Joey
 				 */
-				printchopped(from, line, \
+				printchopped(&sinfo, line, \
  					     i + 2,  finet);
 			} else if (i < 0 && errno != EINTR && errno != EAGAIN) {
 				dprintf("INET socket error: %d = %s.\n", \
@@ -1350,11 +1420,13 @@ int main(argc, argv)
 		if ( FD_ISSET(fileno(stdin), &readfds) ) {
 			dprintf("Message from stdin.\n");
 			memset(line, '\0', sizeof(line));
+			memset(&sinfo, '\0', sizeof(sinfo));
 			line[0] = '.';
 			parts[fileno(stdin)] = (char *) 0;
 			i = read(fileno(stdin), line, MAXLINE);
 			if (i > 0) {
-				printchopped(LocalHostName, line, i+1, fileno(stdin));
+				sinfo.hostname = LocalHostName;
+				printchopped(&sinfo, line, i+1, fileno(stdin));
 		  	} else if (i < 0) {
 		    		if (errno != EINTR) {
 		      			logerror("stdin");
@@ -1380,6 +1452,8 @@ static int create_unix_socket(const char
 	struct sockaddr_un sunx;
 	int fd;
 	char line[MAXLINE +1];
+	int passcred = 1;
+	socklen_t sl = sizeof(passcred);
 
 	if (path[0] == '\0')
 		return -1;
@@ -1402,6 +1476,7 @@ static int create_unix_socket(const char
 #endif
 		return -1;
 	}
+	setsockopt(fd, SOL_SOCKET, SO_PASSCRED, &passcred, sl);
 	return fd;
 }
 #endif
@@ -1549,8 +1624,8 @@ void untty()
  * than one message.
  */
 
-void printchopped(hname, msg, len, fd)
-	const char *hname;
+void printchopped(source, msg, len, fd)
+	const struct sourceinfo *const source;
 	char *msg;
 	size_t len;
 	int fd;
@@ -1573,7 +1648,7 @@ void printchopped(hname, msg, len, fd)
 		if ( (strlen(msg) + strlen(tmpline)) > MAXLINE )
 		{
 			logerror("Cannot glue message parts together");
-			printline(hname, tmpline);
+			printline(source, tmpline);
 			start = msg;
 		}
 		else
@@ -1581,7 +1656,7 @@ void printchopped(hname, msg, len, fd)
 			dprintf("Previous: %s\n", tmpline);
 			dprintf("Next: %s\n", msg);
 			strcat(tmpline, msg);	/* length checked above */
-			printline(hname, tmpline);
+			printline(source, tmpline);
 			if ( (strlen(msg) + 1) == len )
 				return;
 			else
@@ -1608,7 +1683,7 @@ void printchopped(hname, msg, len, fd)
 
 	do {
 		end = strchr(start + 1, '\0');
-		printline(hname, start);
+		printline(source, start);
 		start = end + 1;
 	} while ( *start != '\0' );
 
@@ -1622,8 +1697,8 @@ void printchopped(hname, msg, len, fd)
  * on the appropriate log files.
  */
 
-void printline(hname, msg)
-	const char *hname;
+void printline(source, msg)
+	const struct sourceinfo *const source;
 	char *msg;
 {
 	register char *p, *q;
@@ -1665,7 +1740,7 @@ void printline(hname, msg)
 	}
 	*q = '\0';
 
-	logmsg(pri, line, hname, SYNC_FILE);
+	logmsg(pri, line, source, SYNC_FILE);
 	return;
 }
 
@@ -1683,7 +1758,11 @@ void printsys(msg)
 	char line[MAXLINE + 1];
 	int pri, flags;
 	char *lp;
+	struct sourceinfo source;
 
+	memset(&source, '\0', sizeof(source));
+	source.flags = SINFO_KLOG;
+	source.hostname = LocalHostName;
 	(void) snprintf(line, sizeof(line), "vmunix: ");
 	lp = line + strlen(line);
 	for (p = msg; *p != '\0'; ) {
@@ -1706,7 +1785,7 @@ void printsys(msg)
 		    q < &line[MAXLINE])
 			*q++ = c;
 		*q = '\0';
-		logmsg(pri, line, LocalHostName, flags);
+		logmsg(pri, line, &source, flags);
 	}
 	return;
 }
@@ -1738,13 +1817,14 @@ time_t	now;
 void logmsg(pri, msg, from, flags)
 	int pri;
 	char *msg;
-	const char *from;
+	const struct sourceinfo * const from;
 	int flags;
 {
 	register struct filed *f;
 	int fac, prilev, lognum;
 	int msglen;
 	char *timestamp;
+	char newmsg[MAXLINE+1];
 #ifdef __gnu_linux__
 	sigset_t mask;
 #else
@@ -1753,7 +1833,7 @@ void logmsg(pri, msg, from, flags)
 #endif
 #endif
 
-	dprintf("logmsg: %s, flags %x, from %s, msg %s\n", textpri(pri), flags, from, msg);
+	dprintf("logmsg: %s, flags %x, from %s, msg %s\n", textpri(pri), flags, from->hostname, msg);
 
 #ifdef __gnu_linux__
 	sigemptyset(&mask);
@@ -1794,6 +1874,84 @@ void logmsg(pri, msg, from, flags)
 		fac = LOG_FAC(pri);
 	prilev = LOG_PRI(pri);
 
+	/*
+	 * If we have credentials info, let's validate program name and pid.
+	 * We follow RFC 3164 section 4.1 and take process name (TAG) to
+	 * be 32 characters or less, terminated with ':' or '[',
+	 * but, unlike stated in the document, we tolerate non-alphanumeric
+	 * characters (which restriction is probably just a mistake,
+	 * as '-' sign is quite common) and spaces (LPRng daemons are said
+	 * to have space in the name).
+	 */
+	if (from->flags & SINFO_HAVECRED) { /* XXX: should log error on no creds? */
+		char tag[32 + 10]; /* rfc3164 tag+brackets+pid+colon+space+0 */
+		char *p;
+		char *oldpid;
+
+		newmsg[0] = '\0';
+
+		tag[0] = '\0';
+		strncat(tag, msg, sizeof(tag) - 1);
+
+		p = strchr(tag, ':');
+		if (!(oldpid = strchr(tag, '[')) || (p && p < oldpid)) {
+			/* We do not have valid pid in tag, skip to tag end */
+			if (p || (p = strchr(tag, ' '))) {
+				*p = '\0';
+				msg += (p + 1 - tag);
+				while (*msg == ' ')
+					msg++;
+				/* ..and add one */
+			        snprintf(newmsg, sizeof(newmsg),
+					 "%s[%u]: ", tag, from->pid);
+			} else {
+				/* Yes, it is safe to call logerror() from this
+				   part of logmsg().  Complain about tag being
+				   invalid */
+				logerror("credentials processing failed -- "
+					 "received malformed message");
+				goto finish;
+			}
+		} else {
+			/* As we have pid, validate it */
+			if ((p = strchr(tag, ']'))) {
+				*p = '\0';
+				msg += (p + 1 - tag);
+				if (*msg == ':')
+					msg++;
+				while (*msg == ' ')
+					msg++;
+			} else {
+				logerror("credentials processing failed -- "
+					 "received malformed message");
+				goto finish;
+			}
+			*oldpid++ = '\0';
+			/* XXX: We could use strtoul() here for full
+			   error checking. */
+			if ((pid_t) atoi(oldpid) != from->pid) {
+				logerror("malformed or spoofed pid detected!");
+			        snprintf(newmsg, sizeof(newmsg),
+					 "%s[%s!=%u]: ",
+					 tag, oldpid, from->pid);
+			} else
+			        snprintf(newmsg, sizeof(newmsg),
+					 "%s[%u]: ", tag, from->pid);
+		}
+		/* We may place group membership check here */
+		if (from->uid != 0 &&
+		    (from->uid != 180 /* klogd */ || fac != LOG_KERN ||
+		    strncmp(newmsg, "kernel[", 7))) {
+			int newlen = strlen(newmsg);
+			snprintf(newmsg + newlen, sizeof(newmsg) - newlen,
+			        "(uid=%u) ", from->uid);
+		}
+		/* XXX: Silent truncation is possible */
+		strncat(newmsg, msg, sizeof(newmsg) - 1 - strlen(newmsg));
+		msg = newmsg;
+		msglen = strlen(msg);
+	}
+
 	/* log the message to the particular outputs */
 	if (!Initialized) {
 		f = &consfile;
@@ -1801,7 +1959,7 @@ void logmsg(pri, msg, from, flags)
 
 		if (f->f_file >= 0) {
 			untty();
-			fprintlog(f, (char *)from, flags, msg);
+			fprintlog(f, (char *)from->hostname, flags, msg);
 			(void) close(f->f_file);
 			f->f_file = -1;
 		}
@@ -1838,7 +1996,7 @@ void logmsg(pri, msg, from, flags)
 		 */
 		if ((flags & MARK) == 0 && msglen == f->f_prevlen &&
 		    !strcmp(msg, f->f_prevline) &&
-		    !strcmp(from, f->f_prevhost)) {
+		    !strcmp(from->hostname, f->f_prevhost)) {
 			(void) strncpy(f->f_lasttime, timestamp, 15);
 			f->f_prevcount++;
 			dprintf("msg repeated %d times, %ld sec of %ld.\n",
@@ -1851,29 +2009,33 @@ void logmsg(pri, msg, from, flags)
 			 * in the future.
 			 */
 			if (now > REPEATTIME(f)) {
-				fprintlog(f, (char *)from, flags, (char *)NULL);
+				fprintlog(f, (char *)from->hostname, flags,
+					  (char *)NULL);
 				BACKOFF(f);
 			}
 		} else {
 			/* new line, save it */
 			if (f->f_prevcount)
-				fprintlog(f, (char *)from, 0, (char *)NULL);
+				fprintlog(f, (char *)from->hostname, 0,
+					  (char *)NULL);
 			f->f_prevpri = pri;
 			f->f_repeatcount = 0;
 			(void) strncpy(f->f_lasttime, timestamp, 15);
-			(void) strncpy(f->f_prevhost, from,
+			(void) strncpy(f->f_prevhost, from->hostname,
 					sizeof(f->f_prevhost));
 			if (msglen < MAXSVLINE) {
 				f->f_prevlen = msglen;
 				(void) strcpy(f->f_prevline, msg);
-				fprintlog(f, (char *)from, flags, (char *)NULL);
+				fprintlog(f, (char *)from->hostname, flags,
+					  (char *)NULL);
 			} else {
 				f->f_prevline[0] = 0;
 				f->f_prevlen = 0;
-				fprintlog(f, (char *)from, flags, msg);
+				fprintlog(f, (char *)from->hostname, flags, msg);
 			}
 		}
 	}
+finish:	;
 #ifdef __gnu_linux__
 	sigprocmask(SIG_UNBLOCK, &mask, NULL);
 #else
@@ -2304,12 +2466,16 @@ void domark()
 #ifdef SYSV
 	int lognum;
 #endif
+	struct sourceinfo source;
 
+	memset(&source, '\0', sizeof(source));
+	source.flags = SINFO_ISINTERNAL;
+	source.hostname = LocalHostName;
 	if (MarkInterval > 0) {
 	now = time(0);
 	MarkSeq += TIMERINTVL;
 	if (MarkSeq >= MarkInterval) {
-		logmsg(LOG_INFO, "-- MARK --", LocalHostName, ADDDATE|MARK);
+		logmsg(LOG_INFO, "-- MARK --", &source, ADDDATE|MARK);
 		MarkSeq = 0;
 	}
 
@@ -2348,6 +2514,11 @@ void logerror(type)
 	char *type;
 {
 	char buf[100];
+	struct sourceinfo source;
+
+	memset(&source, '\0', sizeof(source));
+	source.flags = SINFO_ISINTERNAL;
+	source.hostname = LocalHostName;
 
 	dprintf("Called logerr, msg: %s\n", type);
 
@@ -2356,7 +2527,7 @@ void logerror(type)
 	else
 		(void) snprintf(buf, sizeof(buf), "syslogd: %s: %s", type, strerror(errno));
 	errno = 0;
-	logmsg(LOG_SYSLOG|LOG_ERR, buf, LocalHostName, ADDDATE);
+	logmsg(LOG_SYSLOG|LOG_ERR, buf, &source, ADDDATE);
 	return;
 }
 
@@ -2370,6 +2541,11 @@ void die(sig)
 	int lognum;
 	int i;
 	int was_initialized = Initialized;
+	struct sourceinfo source;
+
+	memset(&source, '\0', sizeof(source));
+	source.flags = SINFO_ISINTERNAL;
+	source.hostname = LocalHostName;
 
 	Initialized = 0;	/* Don't log SIGCHLDs in case we
 				   receive one during exiting */
@@ -2386,7 +2562,7 @@ void die(sig)
 		dprintf("syslogd: exiting on signal %d\n", sig);
 		(void) snprintf(buf, sizeof(buf), "exiting on signal %d", sig);
 		errno = 0;
-		logmsg(LOG_SYSLOG|LOG_INFO, buf, LocalHostName, ADDDATE);
+		logmsg(LOG_SYSLOG|LOG_INFO, buf, &source, ADDDATE);
 	}
 
 	/* Close the UNIX sockets. */
@@ -2440,6 +2616,11 @@ void init()
 	char cline[BUFSIZ];
 #endif
 	struct servent *sp;
+	struct sourceinfo source;
+
+	memset(&source, '\0', sizeof(source));
+	source.flags = SINFO_ISINTERNAL;
+	source.hostname = LocalHostName;
 
 	sp = getservbyname("syslog", "udp");
 	if (sp == NULL) {
@@ -2646,20 +2827,20 @@ void init()
 	if ( AcceptRemote )
 #ifdef DEBRELEASE
 		logmsg(LOG_SYSLOG|LOG_INFO, "syslogd " VERSION "." PATCHLEVEL "#" DEBRELEASE \
-		       ": restart (remote reception)." , LocalHostName, \
+		       ": restart (remote reception)." , &source, \
 		       	ADDDATE);
 #else
 		logmsg(LOG_SYSLOG|LOG_INFO, "syslogd " VERSION "." PATCHLEVEL \
-		       ": restart (remote reception)." , LocalHostName, \
+		       ": restart (remote reception)." , &source, \
 		       	ADDDATE);
 #endif
 	else
 #ifdef DEBRELEASE
 		logmsg(LOG_SYSLOG|LOG_INFO, "syslogd " VERSION "." PATCHLEVEL "#" DEBRELEASE \
-		       ": restart." , LocalHostName, ADDDATE);
+		       ": restart." , &source, ADDDATE);
 #else
 		logmsg(LOG_SYSLOG|LOG_INFO, "syslogd " VERSION "." PATCHLEVEL \
-		       ": restart." , LocalHostName, ADDDATE);
+		       ": restart." , &source, ADDDATE);
 #endif
 	(void) signal(SIGHUP, sighup_handler);
 	dprintf("syslogd: restarted.\n");
