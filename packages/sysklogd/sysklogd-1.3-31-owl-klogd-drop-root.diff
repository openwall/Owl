diff -ur sysklogd-1.3-31.orig/klogd.c sysklogd-1.3-31/klogd.c
--- sysklogd-1.3-31.orig/klogd.c	Tue Jan 19 03:09:12 1999
+++ sysklogd-1.3-31/klogd.c	Wed Sep 20 05:52:17 2000
@@ -228,6 +228,8 @@
 #include <stdarg.h>
 #include <paths.h>
 #include <stdlib.h>
+#include <pwd.h>
+#include <grp.h>
 #include "klogd.h"
 #include "ksyms.h"
 #ifndef TESTING
@@ -268,6 +270,8 @@
 		symbol_lookup = 1,
 		no_fork = 0;	/* don't fork - don't run in daemon mode */
 
+static char	*run_as = NULL;
+
 static char	*symfile = (char *) 0,
 		log_buffer[LOG_BUFFER_SIZE];
 
@@ -497,8 +501,9 @@
 	 * First do a stat to determine whether or not the proc based
 	 * file system is available to get kernel messages from.
 	 */
-	if ( use_syscall ||
-	    ((stat(_PATH_KLOG, &sb) < 0) && (errno == ENOENT)) )
+	if (!run_as &&
+	    (use_syscall ||
+	    ((stat(_PATH_KLOG, &sb) < 0) && (errno == ENOENT))))
 	{
 	  	/* Initialize kernel logging. */
 	  	ksyslog(1, NULL, 0);
@@ -894,6 +899,23 @@
 	return;
 }
 
+static int drop_root(void)
+{
+	struct passwd *pw;
+
+	if (!(pw = getpwnam(run_as))) return -1;
+
+	if (!pw->pw_uid) return -1;
+
+/* XXX: This should be done near the mkdir, not here. */
+	if (chown(_PATH_VARRUN "klogd", pw->pw_uid, pw->pw_gid)) return -1;
+
+	if (setgroups(0, NULL)) return -1;
+	if (setgid(pw->pw_gid)) return -1;
+	if (setuid(pw->pw_uid)) return -1;
+
+	return 0;
+}
 
 int main(argc, argv)
 
@@ -912,7 +934,7 @@
 	chdir ("/");
 #endif
 	/* Parse the command-line. */
-	while ((ch = getopt(argc, argv, "c:df:iIk:nopsvx")) != EOF)
+	while ((ch = getopt(argc, argv, "c:df:iIk:nopsvxu:")) != EOF)
 		switch((char)ch)
 		{
 		    case 'c':		/* Set console message level. */
@@ -952,6 +974,9 @@
 		    case 'x':
 			symbol_lookup = 0;
 			break;
+		    case 'u':
+			run_as = optarg;
+			break;
 		}
 
 
@@ -1015,6 +1040,18 @@
 	/* tuck my process id away */
 	if (!check_pid(PidFile))
 	{
+		if (run_as) {
+			if (mkdir(_PATH_VARRUN "klogd", 0700) &&
+			    errno != EEXIST) {
+				perror("klogd: mkdir");
+				Terminate();
+			}
+			if (symlink("klogd/klogd.pid", PidFile)) {
+				perror("klogd: symlink");
+				Terminate();
+			}
+			PidFile = _PATH_VARRUN "klogd/klogd.pid";
+		}
 		if (!write_pid(PidFile))
 			Terminate();
 	}
@@ -1079,3 +1116,8 @@
 	}
 
+	if (run_as && drop_root()) {
+		syslog(LOG_ALERT, "klogd: failed to drop root");
+		Terminate();
+	}
+
         /* The main loop. */
