--- bash-2.05/lib/malloc/malloc.c.orig	Thu Feb 15 00:01:50 2001
+++ bash-2.05/lib/malloc/malloc.c	Mon Oct 22 15:07:18 2001
@@ -821,10 +821,10 @@
   if (ptr == 0)
     return 0;
   /* If entire block has the desired alignment, just accept it.  */
-  if (((int) ptr & (alignment - 1)) == 0)
+  if (((long) ptr & (alignment - 1)) == 0)
     return ptr;
   /* Otherwise, get address of byte in the block that has that alignment.  */
-  aligned = (char *) (((int) ptr + alignment - 1) & -alignment);
+  aligned = (char *) (((long) ptr + alignment - 1) & -alignment);
 
   /* Store a suitable indication of how to free the block,
      so that free can find the true beginning of it.  */
@@ -933,7 +933,7 @@
   for (i = totused = totfree = 0; i < NBUCKETS; i++)
     {
       v = malloc_bucket_stats (i);
-      fprintf (fp, "%12lu\t%4d\t%6d\t%5d\t%8d\t%5d\n", v.blocksize, v.nfree, v.nused, v.nmal, v.nmorecore, v.nsplit);
+      fprintf (fp, "%12lu\t%4d\t%6ld\t%5d\t%8d\t%5d\n", v.blocksize, v.nfree, v.nused, v.nmal, v.nmorecore, v.nsplit);
       totfree += v.nfree * v.blocksize;
       totused += v.nused * v.blocksize;
     }
--- bash-2.05/alias.c.orig	Thu Aug  5 14:17:24 1999
+++ bash-2.05/alias.c	Mon Oct 22 15:07:17 2001
@@ -31,6 +31,7 @@
 #endif
 
 #include <stdio.h>
+#include <ctype.h>
 #include "bashansi.h"
 #include "command.h"
 #include "general.h"
--- bash-2.05/execute_cmd.c.orig	Thu Mar 22 17:17:23 2001
+++ bash-2.05/execute_cmd.c	Mon Oct 22 15:07:17 2001
@@ -116,6 +116,9 @@
 extern int getdtablesize ();
 extern int close ();
 
+/* Defined in redir.c */
+int stdin_redirects (REDIRECT *);
+
 /* Static functions defined and used in this file. */
 static void close_pipes (), do_piping (), bind_lastarg ();
 static void cleanup_redirects ();
--- bash-2.05/flags.c.orig	Wed Feb 14 23:58:48 2001
+++ bash-2.05/flags.c	Mon Oct 22 15:07:17 2001
@@ -27,6 +27,7 @@
 
 #include "shell.h"
 #include "flags.h"
+#include "bashhist.h"
 
 #if defined (JOB_CONTROL)
 extern int set_job_control ();
--- bash-2.05/general.h.orig	Wed Feb 14 23:53:05 2001
+++ bash-2.05/general.h	Mon Oct 22 15:07:17 2001
@@ -172,6 +172,8 @@
 typedef char **CPPFunction ();
 #endif /* _FUNCTION_DEF */
 
+/* Any files that use NOW will need a definition for time() */
+#include <time.h>
 #define NOW	((time_t) time ((time_t *) 0))
 
 /* Some defines for calling file status functions. */
--- bash-2.05/jobs.c.orig	Mon Mar 26 21:08:24 2001
+++ bash-2.05/jobs.c	Mon Oct 22 15:07:17 2001
@@ -1616,6 +1616,7 @@
    This is the exit status of the entire job. */
 static WAIT
 raw_job_exit_status (job)
+     int job;
 {
   register PROCESS *p;
   for (p = jobs[job]->pipe; p->next != jobs[job]->pipe; p = p->next)
--- bash-2.05/mksyntax.c.orig	Wed Feb 14 23:59:25 2001
+++ bash-2.05/mksyntax.c	Mon Oct 22 15:07:17 2001
@@ -25,6 +25,7 @@
 #include "bashansi.h"
 #include <ctype.h>
 #include <errno.h>
+#include <unistd.h>  /* For getopt() */
 
 #include "syntax.h"
 
--- bash-2.05/parse.y.orig	Tue Mar 27 18:06:12 2001
+++ bash-2.05/parse.y	Mon Oct 22 15:07:17 2001
@@ -44,6 +44,7 @@
 #include "flags.h"
 #include "parser.h"
 #include "mailcheck.h"
+#include "test.h"
 #include "builtins/common.h"
 #include "builtins/builtext.h"
 
--- bash-2.05/pcomplete.c.orig	Wed Feb 14 23:59:55 2001
+++ bash-2.05/pcomplete.c	Mon Oct 22 15:07:17 2001
@@ -1108,11 +1108,11 @@
   WORD_LIST *lwords;
 
   debug_printf ("programmable_completions (%s, %s, %d, %d)", cmd, word, start, end);
-  debug_printf ("programmable_completions: %s -> 0x%x", cmd, (int)cs);
+  debug_printf ("programmable_completions: %s -> %p", cmd, cs);
   ret = gen_action_completions (cs, word);
   if (ret && progcomp_debug)
     {
-      debug_printf ("gen_action_completions (0x%x, %s) -->", (int)cs, word);
+      debug_printf ("gen_action_completions (%p, %s) -->", cs, word);
       print_stringlist (ret, "\t");
       rl_on_new_line ();
     }
@@ -1125,7 +1125,7 @@
 	{
 	  if (progcomp_debug)
 	    {
-	      debug_printf ("gen_globpat_matches (0x%x, %s) -->", (int)cs, word);
+	      debug_printf ("gen_globpat_matches (%p, %s) -->", cs, word);
 	      print_stringlist (tmatches, "\t");
 	      rl_on_new_line ();
 	    }
@@ -1142,7 +1142,7 @@
 	{
 	  if (progcomp_debug)
 	    {
-	      debug_printf ("gen_wordlist_matches (0x%x, %s) -->", (int)cs, word);
+	      debug_printf ("gen_wordlist_matches (%p, %s) -->", cs, word);
 	      print_stringlist (tmatches, "\t");
 	      rl_on_new_line ();
 	    }
@@ -1161,7 +1161,7 @@
       line = substring (rl_line_buffer, start, end);
       llen = end - start;
 
-      debug_printf ("command_line_to_word_list (%s, %d, %d, 0x%x, 0x%x)",
+      debug_printf ("command_line_to_word_list (%s, %d, %d, %p, %p)",
 		line, llen, rl_point - start, &nw, &cw);
       lwords = command_line_to_word_list (line, llen, rl_point - start, &nw, &cw);
       if (lwords == 0 && llen > 0)
@@ -1184,7 +1184,7 @@
 	{
 	  if (progcomp_debug)
 	    {
-	      debug_printf ("gen_shell_function_matches (0x%x, %s, 0x%x, %d, %d) -->", (int)cs, word, lwords, nw, cw);
+	      debug_printf ("gen_shell_function_matches (%p, %s, %p, %d, %d) -->", cs, word, lwords, nw, cw);
 	      print_stringlist (tmatches, "\t");
 	      rl_on_new_line ();
 	    }
@@ -1200,7 +1200,7 @@
 	{
 	  if (progcomp_debug)
 	    {
-	      debug_printf ("gen_command_matches (0x%x, %s, 0x%x, %d, %d) -->", (int)cs, word, lwords, nw, cw);
+	      debug_printf ("gen_command_matches (%p, %s, %p, %d, %d) -->", cs, word, lwords, nw, cw);
 	      print_stringlist (tmatches, "\t");
 	      rl_on_new_line ();
 	    }
--- bash-2.05/shell.c.orig	Tue Mar 27 17:25:51 2001
+++ bash-2.05/shell.c	Mon Oct 22 15:07:17 2001
@@ -69,6 +69,8 @@
 #  include <opennt/opennt.h>
 #endif
 
+extern int sh_setlinebuf(FILE *);  /* Defined in setlinebuf.c */
+
 #if !defined (HAVE_GETPW_DECLS)
 extern struct passwd *getpwuid ();
 #endif /* !HAVE_GETPW_DECLS */
--- bash-2.05/stringlib.c.orig	Thu Feb 15 00:00:42 2001
+++ bash-2.05/stringlib.c	Mon Oct 22 15:07:17 2001
@@ -38,6 +38,8 @@
 #  include <glob/fnmatch.h>
 #endif
 
+extern int glob_pattern_p(char *);    /* glob.c */
+
 /* **************************************************************** */
 /*								    */
 /*		Functions to manage arrays of strings		    */
--- bash-2.05/subst.c.orig	Mon Mar 26 21:06:16 2001
+++ bash-2.05/subst.c	Mon Oct 22 15:07:17 2001
@@ -29,6 +29,7 @@
 #include <pwd.h>
 #include <signal.h>
 #include <errno.h>
+#include <ctype.h>
 
 #if defined (HAVE_UNISTD_H)
 #  include <unistd.h>
--- bash-2.05/trap.c.orig	Thu Feb 15 00:00:48 2001
+++ bash-2.05/trap.c	Mon Oct 22 15:07:18 2001
@@ -260,8 +260,8 @@
 		 Unless we catch this, the subshell will dump core when
 		 trap_list[SIGTERM] == DEFAULT_SIG, because DEFAULT_SIG is
 		 usually 0x0. */
-	      internal_warning ("run_pending_traps: bad value in trap_list[%d]: 0x%x",
-				sig, (int)trap_list[sig]);
+	      internal_warning ("run_pending_traps: bad value in trap_list[%d]: %p",
+				sig, trap_list[sig]);
 	      if (trap_list[sig] == (char *)DEFAULT_SIG)
 		{
 		  internal_warning ("run_pending_traps: signal handler is SIG_DFL, resending %d (%s) to myself", sig, signal_name (sig));
--- bash-2.05/variables.c.orig	Wed Feb 21 20:47:11 2001
+++ bash-2.05/variables.c	Mon Oct 22 15:07:18 2001
@@ -42,6 +42,8 @@
 #include "findcmd.h"
 #include "mailcheck.h"
 #include "input.h"
+#include "hashcmd.h"
+#include "pathexp.h"
 
 #include "builtins/getopt.h"
 #include "builtins/common.h"
@@ -126,6 +128,9 @@
 
 static char *have_local_variables;
 static int local_variable_stack_size;
+
+extern void getopts_reset (int);
+extern void set_shellopts ();
 
 /* Some forward declarations. */
 static void set_home_var ();
