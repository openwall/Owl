diff -upk.orig readline-5.1.orig/bind.c readline-5.1/bind.c
--- readline-5.1.orig/bind.c	2005-10-14 15:04:27 +0000
+++ readline-5.1/bind.c	2005-12-28 23:18:36 +0000
@@ -439,7 +439,7 @@ rl_translate_keyseq (seq, array, len)
 {
   register int i, c, l, temp;
 
-  for (i = l = 0; c = seq[i]; i++)
+  for (i = l = 0; (c = seq[i]); i++)
     {
       if (c == '\\')
 	{
@@ -1154,7 +1154,7 @@ rl_parse_and_bind (string)
     {
       int passc = 0;
 
-      for (i = 1; c = string[i]; i++)
+      for (i = 1; (c = string[i]); i++)
 	{
 	  if (passc)
 	    {
@@ -1245,7 +1245,7 @@ rl_parse_and_bind (string)
       int delimiter, passc;
 
       delimiter = string[i++];
-      for (passc = 0; c = string[i]; i++)
+      for (passc = 0; (c = string[i]); i++)
 	{
 	  if (passc)
 	    {
@@ -1506,8 +1506,6 @@ rl_variable_value (name)
      const char *name;
 {
   register int i;
-  int	v;
-  char *ret;
 
   /* Check for simple variables first. */
   i = find_boolean_var (name);
@@ -2015,7 +2013,7 @@ rl_function_dumper (print_readably)
 
   fprintf (rl_outstream, "\n");
 
-  for (i = 0; name = names[i]; i++)
+  for (i = 0; (name = names[i]); i++)
     {
       rl_command_func_t *function;
       char **invokers;
@@ -2170,7 +2168,6 @@ _rl_get_string_variable_value (name)
 {
   static char numbuf[32];
   char *ret;
-  int n;
 
   if (_rl_stricmp (name, "bell-style") == 0)
     {
diff -upk.orig readline-5.1.orig/callback.c readline-5.1/callback.c
--- readline-5.1.orig/callback.c	2005-05-24 18:19:04 +0000
+++ readline-5.1/callback.c	2005-12-28 23:18:36 +0000
@@ -43,6 +43,7 @@
 #include "rldefs.h"
 #include "readline.h"
 #include "rlprivate.h"
+#include "xmalloc.h"
 
 /* Private data for callback registration functions.  See comments in
    rl_callback_read_char for more details. */
diff -upk.orig readline-5.1.orig/complete.c readline-5.1/complete.c
--- readline-5.1.orig/complete.c	2005-10-08 02:30:18 +0000
+++ readline-5.1/complete.c	2005-12-28 23:18:36 +0000
@@ -883,7 +883,7 @@ _rl_find_completion_word (fp, dp)
       /* We didn't find an unclosed quoted substring upon which to do
          completion, so use the word break characters to find the
          substring on which to complete. */
-      while (rl_point = MB_PREVCHAR (rl_line_buffer, rl_point, MB_FIND_ANY))
+      while ((rl_point = MB_PREVCHAR (rl_line_buffer, rl_point, MB_FIND_ANY)))
 	{
 	  scan = rl_line_buffer[rl_point];
 
@@ -1813,7 +1813,7 @@ rl_completion_matches (text, entry_funct
   match_list = (char **)xmalloc ((match_list_size + 1) * sizeof (char *));
   match_list[1] = (char *)NULL;
 
-  while (string = (*entry_function) (text, matches))
+  while ((string = (*entry_function) (text, matches)))
     {
       if (matches + 1 == match_list_size)
 	match_list = (char **)xrealloc
@@ -1864,7 +1864,7 @@ rl_username_completion_function (text, s
     }
 
 #if defined (HAVE_GETPWENT)
-  while (entry = getpwent ())
+  while ((entry = getpwent ()))
     {
       /* Null usernames should result in all users as possible completions. */
       if (namelen == 0 || (STREQN (username, entry->pw_name, namelen)))
diff -upk.orig readline-5.1.orig/display.c readline-5.1/display.c
--- readline-5.1.orig/display.c	2005-11-30 19:05:02 +0000
+++ readline-5.1/display.c	2005-12-28 23:18:36 +0000
@@ -1164,7 +1164,7 @@ update_line (old, new, current_line, oma
   int col_lendiff, col_temp;
 #if defined (HANDLE_MULTIBYTE)
   mbstate_t ps_new, ps_old;
-  int new_offset, old_offset, tmp;
+  int new_offset, old_offset;
 #endif
 
   /* If we're at the right edge of a terminal that supports xn, we're
diff -upk.orig readline-5.1.orig/examples/fileman.c readline-5.1/examples/fileman.c
--- readline-5.1.orig/examples/fileman.c	2002-04-16 20:50:55 +0000
+++ readline-5.1/examples/fileman.c	2005-12-28 23:18:36 +0000
@@ -98,6 +98,10 @@ COMMAND commands[] = {
 /* Forward declarations. */
 char *stripwhite ();
 COMMAND *find_command ();
+void initialize_readline ();
+int execute_line (char *);
+int valid_argument (const char *, const char *);
+void too_dangerous (const char *);
 
 /* The name of this program, as taken from argv[0]. */
 char *progname;
@@ -116,6 +120,7 @@ dupstr (s)
   return (r);
 }
 
+int
 main (argc, argv)
      int argc;
      char **argv;
@@ -238,6 +243,7 @@ char **fileman_completion PARAMS((const 
 /* Tell the GNU Readline library how to complete.  We want to try to complete
    on command names if this is the first word in the line, or on filenames
    if not. */
+void
 initialize_readline ()
 {
   /* Allow conditional parsing of the ~/.inputrc file. */
@@ -291,7 +297,7 @@ command_generator (text, state)
     }
 
   /* Return the next name which partially matches from the command list. */
-  while (name = commands[list_index].name)
+  while ((name = commands[list_index].name))
     {
       list_index++;
 
@@ -314,6 +320,7 @@ command_generator (text, state)
 static char syscom[1024];
 
 /* List the file(s) named in arg. */
+int
 com_list (arg)
      char *arg;
 {
@@ -324,6 +331,7 @@ com_list (arg)
   return (system (syscom));
 }
 
+int
 com_view (arg)
      char *arg;
 {
@@ -339,6 +347,7 @@ com_view (arg)
   return (system (syscom));
 }
 
+int
 com_rename (arg)
      char *arg;
 {
@@ -346,6 +355,7 @@ com_rename (arg)
   return (1);
 }
 
+int
 com_stat (arg)
      char *arg;
 {
@@ -362,11 +372,11 @@ com_stat (arg)
 
   printf ("Statistics for `%s':\n", arg);
 
-  printf ("%s has %d link%s, and is %d byte%s in length.\n",
+  printf ("%s has %d link%s, and is %lu byte%s in length.\n",
 	  arg,
           finfo.st_nlink,
           (finfo.st_nlink == 1) ? "" : "s",
-          finfo.st_size,
+          (unsigned long) finfo.st_size,
           (finfo.st_size == 1) ? "" : "s");
   printf ("Inode Last Change at: %s", ctime (&finfo.st_ctime));
   printf ("      Last access at: %s", ctime (&finfo.st_atime));
@@ -374,6 +384,7 @@ com_stat (arg)
   return (0);
 }
 
+int
 com_delete (arg)
      char *arg;
 {
@@ -383,6 +394,7 @@ com_delete (arg)
 
 /* Print out help for ARG, or for all of the commands if ARG is
    not present. */
+int
 com_help (arg)
      char *arg;
 {
@@ -422,6 +434,7 @@ com_help (arg)
 }
 
 /* Change to the directory ARG. */
+int
 com_cd (arg)
      char *arg;
 {
@@ -436,6 +449,7 @@ com_cd (arg)
 }
 
 /* Print out the current working directory. */
+int
 com_pwd (ignore)
      char *ignore;
 {
@@ -453,6 +467,7 @@ com_pwd (ignore)
 }
 
 /* The user wishes to quit using this program.  Just set DONE non-zero. */
+int
 com_quit (arg)
      char *arg;
 {
@@ -461,8 +476,9 @@ com_quit (arg)
 }
 
 /* Function which tells you that you can't do this. */
+void
 too_dangerous (caller)
-     char *caller;
+     const char *caller;
 {
   fprintf (stderr,
            "%s: Too dangerous for me to distribute.  Write it yourself.\n",
@@ -473,7 +489,7 @@ too_dangerous (caller)
    an error message and return zero. */
 int
 valid_argument (caller, arg)
-     char *caller, *arg;
+     const char *caller, *arg;
 {
   if (!arg || !*arg)
     {
diff -upk.orig readline-5.1.orig/examples/histexamp.c readline-5.1/examples/histexamp.c
--- readline-5.1.orig/examples/histexamp.c	2005-08-02 20:21:35 +0000
+++ readline-5.1/examples/histexamp.c	2005-12-28 23:19:50 +0000
@@ -19,6 +19,7 @@
    59 Temple Place, Suite 330, Boston, MA 02111 USA. */
 
 #include <stdio.h>
+#include <stdlib.h>
 
 #ifdef READLINE_LIBRARY
 #  include "history.h"
@@ -28,6 +29,7 @@
 
 #include <string.h>
 
+int
 main (argc, argv)
      int argc;
      char **argv;
@@ -121,4 +123,5 @@ main (argc, argv)
 	    }
 	}
     }
+    return 0;
 }
diff -upk.orig readline-5.1.orig/examples/rl.c readline-5.1/examples/rl.c
--- readline-5.1.orig/examples/rl.c	2005-08-02 20:23:48 +0000
+++ readline-5.1/examples/rl.c	2005-12-28 23:18:36 +0000
@@ -38,6 +38,10 @@
 extern void exit();
 #endif
 
+#ifdef HAVE_UNISTD_H
+#  include <unistd.h>
+#endif
+
 #if defined (READLINE_LIBRARY)
 #  include "posixstat.h"
 #  include "readline.h"
diff -upk.orig readline-5.1.orig/examples/rlcat.c readline-5.1/examples/rlcat.c
--- readline-5.1.orig/examples/rlcat.c	2005-08-02 20:24:39 +0000
+++ readline-5.1/examples/rlcat.c	2005-12-28 23:18:36 +0000
@@ -116,7 +116,7 @@ main (argc, argv)
     return stdcat(argc, argv);
 
   rl_variable_bind ("editing-mode", Vflag ? "vi" : "emacs");
-  while (temp = readline (""))
+  while ((temp = readline ("")))
     {
       if (*temp)
         add_history (temp);
@@ -152,8 +152,7 @@ stdcat (argc, argv)
      int argc;
      char **argv;
 {
-  int  i, fd, r;
-  char *s;
+  int  i, r;
   FILE *fp;
 
   if (argc == 0)
diff -upk.orig readline-5.1.orig/examples/rltest.c readline-5.1/examples/rltest.c
--- readline-5.1.orig/examples/rltest.c	2005-08-02 20:25:09 +0000
+++ readline-5.1/examples/rltest.c	2005-12-28 23:18:36 +0000
@@ -47,7 +47,7 @@ extern void exit();
 
 extern HIST_ENTRY **history_list ();
 
-main ()
+int main ()
 {
   char *temp, *prompt;
   int done;
diff -upk.orig readline-5.1.orig/histexpand.c readline-5.1/histexpand.c
--- readline-5.1.orig/histexpand.c	2004-10-31 21:03:16 +0000
+++ readline-5.1/histexpand.c	2005-12-28 23:18:36 +0000
@@ -205,7 +205,7 @@ get_history_event (string, caller_index,
     }
 
   /* Only a closing `?' or a newline delimit a substring search string. */
-  for (local_index = i; c = string[i]; i++)
+  for (local_index = i; (c = string[i]); i++)
     {
 #if defined (HANDLE_MULTIBYTE)
       if (MB_CUR_MAX > 1 && rl_byte_oriented == 0)
diff -upk.orig readline-5.1.orig/input.c readline-5.1/input.c
--- readline-5.1.orig/input.c	2005-07-05 02:30:24 +0000
+++ readline-5.1/input.c	2005-12-28 23:18:36 +0000
@@ -407,7 +407,7 @@ rl_read_key ()
   else
     {
       /* If input is coming from a macro, then use that. */
-      if (c = _rl_next_macro_key ())
+      if ((c = _rl_next_macro_key ()))
 	return (c);
 
       /* If the user has an event function, then call it periodically. */
diff -upk.orig readline-5.1.orig/isearch.c readline-5.1/isearch.c
--- readline-5.1.orig/isearch.c	2005-10-07 22:21:32 +0000
+++ readline-5.1/isearch.c	2005-12-28 23:19:16 +0000
@@ -67,10 +67,6 @@ static _rl_search_cxt *_rl_isearch_init 
 static void _rl_isearch_fini PARAMS((_rl_search_cxt *));
 static int _rl_isearch_cleanup PARAMS((_rl_search_cxt *, int));
 
-/* Last line found by the current incremental search, so we don't `find'
-   identical lines many times in a row. */
-static char *prev_line_found;
-
 /* Last search string and its length. */
 static char *last_isearch_string;
 static int last_isearch_string_len;
diff -upk.orig readline-5.1.orig/misc.c readline-5.1/misc.c
--- readline-5.1.orig/misc.c	2005-05-15 19:27:09 +0000
+++ readline-5.1/misc.c	2005-12-28 23:18:36 +0000
@@ -212,6 +212,8 @@ rl_digit_loop ()
       if (r <= 0 || (RL_ISSTATE (RL_STATE_NUMERICARG) == 0))
         break;
     }
+
+  return 0;
 }
 
 /* Create a default argument. */
diff -upk.orig readline-5.1.orig/readline.c readline-5.1/readline.c
--- readline-5.1.orig/readline.c	2005-12-28 23:18:27 +0000
+++ readline-5.1/readline.c	2005-12-28 23:18:36 +0000
@@ -85,7 +85,6 @@ static void bind_arrow_keys_internal PAR
 static void bind_arrow_keys PARAMS((void));
 
 static void readline_default_bindings PARAMS((void));
-static void reset_default_bindings PARAMS((void));
 
 static int _rl_subseq_result PARAMS((int, Keymap, int, int));
 static int _rl_subseq_getchar PARAMS((int));
@@ -1052,6 +1051,7 @@ readline_default_bindings ()
     rl_tty_set_default_bindings (_rl_keymap);
 }
 
+#if 0 /* unused */
 /* Reset the default bindings for the terminal special characters we're
    interested in back to rl_insert and read the new ones. */
 static void
@@ -1063,6 +1063,7 @@ reset_default_bindings ()
       rl_tty_set_default_bindings (_rl_keymap);
     }
 }
+#endif /* unused */
 
 /* Bind some common arrow key sequences in MAP. */
 static void
diff -upk.orig readline-5.1.orig/rltty.c readline-5.1/rltty.c
--- readline-5.1.orig/rltty.c	2005-11-14 02:07:55 +0000
+++ readline-5.1/rltty.c	2005-12-28 23:18:36 +0000
@@ -933,7 +933,6 @@ rltty_set_default_bindings (kmap)
 #if !defined (NO_TTY_DRIVER)
   TIOTYPE ttybuff;
   int tty;
-  static int called = 0;
 
   tty = fileno (rl_instream);
 
diff -upk.orig readline-5.1.orig/search.c readline-5.1/search.c
--- readline-5.1.orig/search.c	2005-08-27 15:52:36 +0000
+++ readline-5.1/search.c	2005-12-28 23:18:36 +0000
@@ -70,7 +70,6 @@ static int rl_history_search_pos;
 static char *history_search_string;
 static int history_string_size;
 
-static UNDO_LIST *noninc_saved_undo_list;
 static void make_history_line_current PARAMS((HIST_ENTRY *));
 static int noninc_search_from_pos PARAMS((char *, int, int));
 static int noninc_dosearch PARAMS((char *, int));
diff -upk.orig readline-5.1.orig/text.c readline-5.1/text.c
--- readline-5.1.orig/text.c	2005-12-28 23:18:27 +0000
+++ readline-5.1/text.c	2005-12-28 23:18:36 +0000
@@ -1237,7 +1237,7 @@ rl_change_case (count, op)
 #if defined (HANDLE_MULTIBYTE)
   wchar_t wc, nwc;
   char mb[MB_LEN_MAX+1];
-  int mblen, p;
+  int mblen;
   mbstate_t ps;
 #endif
 
diff -upk.orig readline-5.1.orig/tilde.c readline-5.1/tilde.c
--- readline-5.1.orig/tilde.c	2005-05-07 18:49:51 +0000
+++ readline-5.1/tilde.c	2005-12-28 23:18:36 +0000
@@ -196,7 +196,7 @@ tilde_expand (string)
   int result_size, result_index;
 
   result_index = result_size = 0;
-  if (result = strchr (string, '~'))
+  if ((result = strchr (string, '~')))
     result = (char *)xmalloc (result_size = (strlen (string) + 16));
   else
     result = (char *)xmalloc (result_size = (strlen (string) + 1));
diff -upk.orig readline-5.1.orig/vi_mode.c readline-5.1/vi_mode.c
--- readline-5.1.orig/vi_mode.c	2005-11-01 16:11:04 +0000
+++ readline-5.1/vi_mode.c	2005-12-28 23:18:36 +0000
@@ -1111,7 +1111,7 @@ int
 rl_vi_rubout (count, key)
      int count, key;
 {
-  int p, opoint;
+  int opoint;
 
   if (count < 0)
     return (rl_vi_delete (-count, key));
