--- bash-2.05/support/mksignames.c.orig	Tue Mar 28 18:12:40 2000
+++ bash-2.05/support/mksignames.c	Tue Oct 23 10:04:12 2001
@@ -19,6 +19,8 @@
    with Bash; see the file COPYING.  If not, write to the Free Software
    Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. */
 
+#include "config.h"
+
 #include <stdio.h>
 #include <sys/types.h>
 #include <signal.h>
--- bash-2.05/redir.c.orig	Tue Mar 27 17:43:50 2001
+++ bash-2.05/redir.c	Tue Oct 23 10:04:12 2001
@@ -289,8 +289,13 @@
 	      return (fd2);
 	    }
 	}
-      fclose (fp);
       dispose_words (tlist);
+      if (fclose (fp) != 0)
+	{
+	  if (errno == 0)
+	    errno = ENOSPC;
+	  return (errno);
+	}
     }
   return 0;
 }
--- bash-2.05/stringlib.c.orig	Thu Feb 15 00:00:42 2001
+++ bash-2.05/stringlib.c	Tue Oct 23 10:04:12 2001
@@ -220,6 +220,7 @@
       if (*p == '\\' && p[1] == c)
 	p++;
 
+      ind = r - ret;
       RESIZE_MALLOCED_BUFFER (ret, ind, 2, rlen, rlen);
       r = ret + ind;			/* in case reallocated */
       *r++ = *p++;
--- bash-2.05/unwind_prot.c.orig	Thu Feb 15 00:00:55 2001
+++ bash-2.05/unwind_prot.c	Tue Oct 23 10:04:12 2001
@@ -213,7 +213,6 @@
      char *flag, *ignore;
 {
   int free_elts = (int)flag;
-  UNWIND_ELT *elt;
 
   if (free_elts != 0 && unwind_protect_list)
     {
@@ -293,13 +292,18 @@
 restore_variable (sv)
      SAVED_VAR *sv;
 {
+  UWP u;
+
   if (sv->size != sizeof (int))
     {
       FASTCOPY ((char *)sv->desired_setting, (char *)sv->variable, sv->size);
       free (sv->desired_setting);
     }
   else
-    *(sv->variable) = (int)sv->desired_setting;
+    {
+      u.s = sv->desired_setting;
+      *(sv->variable) = u.i;
+    }
 
   free (sv);
 }
--- bash-2.05/bashline.c.orig	Tue Mar  6 20:36:07 2001
+++ bash-2.05/bashline.c	Tue Oct 23 10:04:12 2001
@@ -895,7 +895,7 @@
       if (foundcs)
 	{
 	  /* If the user specified that the compspec returns filenames, make
-	     sure that readline knows it.
+	     sure that readline knows it. */
 	  if (foundcs & COPT_FILENAMES)
 	    rl_filename_completion_desired = 1;
 	  /* Turn what the programmable completion code returns into what
